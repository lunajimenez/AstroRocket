
Cohete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011708  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  080118a8  080118a8  000128a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f08  08011f08  00013704  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011f08  08011f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f10  08011f10  00013704  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011f10  08011f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011f18  08011f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000704  20000000  08011f1c  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b94  20000708  08012620  00013708  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000129c  08012620  0001429c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013704  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017544  00000000  00000000  00013734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003561  00000000  00000000  0002ac78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0002e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f82  00000000  00000000  0002f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab2b  00000000  00000000  00030532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a043  00000000  00000000  0004b05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ff92  00000000  00000000  000650a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cec  00000000  00000000  00105078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0010bd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000708 	.word	0x20000708
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011890 	.word	0x08011890

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000070c 	.word	0x2000070c
 80001dc:	08011890 	.word	0x08011890

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 ba09 	b.w	80010cc <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9be 	b.w	80010cc <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	468e      	mov	lr, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4688      	mov	r8, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4617      	mov	r7, r2
 8000de8:	d962      	bls.n	8000eb0 <__udivmoddi4+0xdc>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	b14e      	cbz	r6, 8000e04 <__udivmoddi4+0x30>
 8000df0:	f1c6 0320 	rsb	r3, r6, #32
 8000df4:	fa01 f806 	lsl.w	r8, r1, r6
 8000df8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dfc:	40b7      	lsls	r7, r6
 8000dfe:	ea43 0808 	orr.w	r8, r3, r8
 8000e02:	40b4      	lsls	r4, r6
 8000e04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e08:	fa1f fc87 	uxth.w	ip, r7
 8000e0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e28:	f080 80ea 	bcs.w	8001000 <__udivmoddi4+0x22c>
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f240 80e7 	bls.w	8001000 <__udivmoddi4+0x22c>
 8000e32:	3902      	subs	r1, #2
 8000e34:	443b      	add	r3, r7
 8000e36:	1a9a      	subs	r2, r3, r2
 8000e38:	b2a3      	uxth	r3, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e4a:	459c      	cmp	ip, r3
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x8e>
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e54:	f080 80d6 	bcs.w	8001004 <__udivmoddi4+0x230>
 8000e58:	459c      	cmp	ip, r3
 8000e5a:	f240 80d3 	bls.w	8001004 <__udivmoddi4+0x230>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3802      	subs	r0, #2
 8000e62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e66:	eba3 030c 	sub.w	r3, r3, ip
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11d      	cbz	r5, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40f3      	lsrs	r3, r6
 8000e70:	2200      	movs	r2, #0
 8000e72:	e9c5 3200 	strd	r3, r2, [r5]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d905      	bls.n	8000e8a <__udivmoddi4+0xb6>
 8000e7e:	b10d      	cbz	r5, 8000e84 <__udivmoddi4+0xb0>
 8000e80:	e9c5 0100 	strd	r0, r1, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	4608      	mov	r0, r1
 8000e88:	e7f5      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000e8a:	fab3 f183 	clz	r1, r3
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	d146      	bne.n	8000f20 <__udivmoddi4+0x14c>
 8000e92:	4573      	cmp	r3, lr
 8000e94:	d302      	bcc.n	8000e9c <__udivmoddi4+0xc8>
 8000e96:	4282      	cmp	r2, r0
 8000e98:	f200 8105 	bhi.w	80010a6 <__udivmoddi4+0x2d2>
 8000e9c:	1a84      	subs	r4, r0, r2
 8000e9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d0e5      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eaa:	e9c5 4800 	strd	r4, r8, [r5]
 8000eae:	e7e2      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	f000 8090 	beq.w	8000fd6 <__udivmoddi4+0x202>
 8000eb6:	fab2 f682 	clz	r6, r2
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	f040 80a4 	bne.w	8001008 <__udivmoddi4+0x234>
 8000ec0:	1a8a      	subs	r2, r1, r2
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec8:	b280      	uxth	r0, r0
 8000eca:	b2bc      	uxth	r4, r7
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ed2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eda:	fb04 f20c 	mul.w	r2, r4, ip
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x11e>
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ee8:	d202      	bcs.n	8000ef0 <__udivmoddi4+0x11c>
 8000eea:	429a      	cmp	r2, r3
 8000eec:	f200 80e0 	bhi.w	80010b0 <__udivmoddi4+0x2dc>
 8000ef0:	46c4      	mov	ip, r8
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ef8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000efc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f00:	fb02 f404 	mul.w	r4, r2, r4
 8000f04:	429c      	cmp	r4, r3
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x144>
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x142>
 8000f10:	429c      	cmp	r4, r3
 8000f12:	f200 80ca 	bhi.w	80010aa <__udivmoddi4+0x2d6>
 8000f16:	4602      	mov	r2, r0
 8000f18:	1b1b      	subs	r3, r3, r4
 8000f1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f1e:	e7a5      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f20:	f1c1 0620 	rsb	r6, r1, #32
 8000f24:	408b      	lsls	r3, r1
 8000f26:	fa22 f706 	lsr.w	r7, r2, r6
 8000f2a:	431f      	orrs	r7, r3
 8000f2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f30:	fa20 f306 	lsr.w	r3, r0, r6
 8000f34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f3c:	4323      	orrs	r3, r4
 8000f3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f42:	fa1f fc87 	uxth.w	ip, r7
 8000f46:	fbbe f0f9 	udiv	r0, lr, r9
 8000f4a:	0c1c      	lsrs	r4, r3, #16
 8000f4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5e:	d909      	bls.n	8000f74 <__udivmoddi4+0x1a0>
 8000f60:	193c      	adds	r4, r7, r4
 8000f62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f66:	f080 809c 	bcs.w	80010a2 <__udivmoddi4+0x2ce>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	f240 8099 	bls.w	80010a2 <__udivmoddi4+0x2ce>
 8000f70:	3802      	subs	r0, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	eba4 040e 	sub.w	r4, r4, lr
 8000f78:	fa1f fe83 	uxth.w	lr, r3
 8000f7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f80:	fb09 4413 	mls	r4, r9, r3, r4
 8000f84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f8c:	45a4      	cmp	ip, r4
 8000f8e:	d908      	bls.n	8000fa2 <__udivmoddi4+0x1ce>
 8000f90:	193c      	adds	r4, r7, r4
 8000f92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f96:	f080 8082 	bcs.w	800109e <__udivmoddi4+0x2ca>
 8000f9a:	45a4      	cmp	ip, r4
 8000f9c:	d97f      	bls.n	800109e <__udivmoddi4+0x2ca>
 8000f9e:	3b02      	subs	r3, #2
 8000fa0:	443c      	add	r4, r7
 8000fa2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fa6:	eba4 040c 	sub.w	r4, r4, ip
 8000faa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fae:	4564      	cmp	r4, ip
 8000fb0:	4673      	mov	r3, lr
 8000fb2:	46e1      	mov	r9, ip
 8000fb4:	d362      	bcc.n	800107c <__udivmoddi4+0x2a8>
 8000fb6:	d05f      	beq.n	8001078 <__udivmoddi4+0x2a4>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x1fe>
 8000fba:	ebb8 0203 	subs.w	r2, r8, r3
 8000fbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000fc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fca:	431e      	orrs	r6, r3
 8000fcc:	40cc      	lsrs	r4, r1
 8000fce:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	e74f      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000fd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fda:	0c01      	lsrs	r1, r0, #16
 8000fdc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fe0:	b280      	uxth	r0, r0
 8000fe2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4638      	mov	r0, r7
 8000fea:	463c      	mov	r4, r7
 8000fec:	46b8      	mov	r8, r7
 8000fee:	46be      	mov	lr, r7
 8000ff0:	2620      	movs	r6, #32
 8000ff2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ff6:	eba2 0208 	sub.w	r2, r2, r8
 8000ffa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ffe:	e766      	b.n	8000ece <__udivmoddi4+0xfa>
 8001000:	4601      	mov	r1, r0
 8001002:	e718      	b.n	8000e36 <__udivmoddi4+0x62>
 8001004:	4610      	mov	r0, r2
 8001006:	e72c      	b.n	8000e62 <__udivmoddi4+0x8e>
 8001008:	f1c6 0220 	rsb	r2, r6, #32
 800100c:	fa2e f302 	lsr.w	r3, lr, r2
 8001010:	40b7      	lsls	r7, r6
 8001012:	40b1      	lsls	r1, r6
 8001014:	fa20 f202 	lsr.w	r2, r0, r2
 8001018:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800101c:	430a      	orrs	r2, r1
 800101e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001022:	b2bc      	uxth	r4, r7
 8001024:	fb0e 3318 	mls	r3, lr, r8, r3
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800102e:	fb08 f904 	mul.w	r9, r8, r4
 8001032:	40b0      	lsls	r0, r6
 8001034:	4589      	cmp	r9, r1
 8001036:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800103a:	b280      	uxth	r0, r0
 800103c:	d93e      	bls.n	80010bc <__udivmoddi4+0x2e8>
 800103e:	1879      	adds	r1, r7, r1
 8001040:	f108 3cff 	add.w	ip, r8, #4294967295
 8001044:	d201      	bcs.n	800104a <__udivmoddi4+0x276>
 8001046:	4589      	cmp	r9, r1
 8001048:	d81f      	bhi.n	800108a <__udivmoddi4+0x2b6>
 800104a:	eba1 0109 	sub.w	r1, r1, r9
 800104e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001052:	fb09 f804 	mul.w	r8, r9, r4
 8001056:	fb0e 1119 	mls	r1, lr, r9, r1
 800105a:	b292      	uxth	r2, r2
 800105c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001060:	4542      	cmp	r2, r8
 8001062:	d229      	bcs.n	80010b8 <__udivmoddi4+0x2e4>
 8001064:	18ba      	adds	r2, r7, r2
 8001066:	f109 31ff 	add.w	r1, r9, #4294967295
 800106a:	d2c4      	bcs.n	8000ff6 <__udivmoddi4+0x222>
 800106c:	4542      	cmp	r2, r8
 800106e:	d2c2      	bcs.n	8000ff6 <__udivmoddi4+0x222>
 8001070:	f1a9 0102 	sub.w	r1, r9, #2
 8001074:	443a      	add	r2, r7
 8001076:	e7be      	b.n	8000ff6 <__udivmoddi4+0x222>
 8001078:	45f0      	cmp	r8, lr
 800107a:	d29d      	bcs.n	8000fb8 <__udivmoddi4+0x1e4>
 800107c:	ebbe 0302 	subs.w	r3, lr, r2
 8001080:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001084:	3801      	subs	r0, #1
 8001086:	46e1      	mov	r9, ip
 8001088:	e796      	b.n	8000fb8 <__udivmoddi4+0x1e4>
 800108a:	eba7 0909 	sub.w	r9, r7, r9
 800108e:	4449      	add	r1, r9
 8001090:	f1a8 0c02 	sub.w	ip, r8, #2
 8001094:	fbb1 f9fe 	udiv	r9, r1, lr
 8001098:	fb09 f804 	mul.w	r8, r9, r4
 800109c:	e7db      	b.n	8001056 <__udivmoddi4+0x282>
 800109e:	4673      	mov	r3, lr
 80010a0:	e77f      	b.n	8000fa2 <__udivmoddi4+0x1ce>
 80010a2:	4650      	mov	r0, sl
 80010a4:	e766      	b.n	8000f74 <__udivmoddi4+0x1a0>
 80010a6:	4608      	mov	r0, r1
 80010a8:	e6fd      	b.n	8000ea6 <__udivmoddi4+0xd2>
 80010aa:	443b      	add	r3, r7
 80010ac:	3a02      	subs	r2, #2
 80010ae:	e733      	b.n	8000f18 <__udivmoddi4+0x144>
 80010b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010b4:	443b      	add	r3, r7
 80010b6:	e71c      	b.n	8000ef2 <__udivmoddi4+0x11e>
 80010b8:	4649      	mov	r1, r9
 80010ba:	e79c      	b.n	8000ff6 <__udivmoddi4+0x222>
 80010bc:	eba1 0109 	sub.w	r1, r1, r9
 80010c0:	46c4      	mov	ip, r8
 80010c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010c6:	fb09 f804 	mul.w	r8, r9, r4
 80010ca:	e7c4      	b.n	8001056 <__udivmoddi4+0x282>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <HAL_TIM_PeriodElapsedCallback>:
#include "GY85.h"
//#include "MPU6050.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	//mira si el timer desead
	 if (htim->Instance == TIMIMU)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10d      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x2e>
	 {
		 //LEE LOS SENSORES

		 GY85_Read_ace();
 80010e2:	f001 fc9d 	bl	8002a20 <GY85_Read_ace>
	     GY85_Read_giro();
 80010e6:	f001 fd29 	bl	8002b3c <GY85_Read_giro>
	   GY85_Read_bruj();
 80010ea:	f001 fd8d 	bl	8002c08 <GY85_Read_bruj>
	     GY85_Ace_angulos();
 80010ee:	f001 fdc1 	bl	8002c74 <GY85_Ace_angulos>
	     GY85_Giro_angulos();
 80010f2:	f001 fe4f 	bl	8002d94 <GY85_Giro_angulos>
	     Filtro_Complementario();
 80010f6:	f001 fe8f 	bl	8002e18 <Filtro_Complementario>
         filtro_kalman();
 80010fa:	f001 fee9 	bl	8002ed0 <filtro_kalman>
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40014000 	.word	0x40014000
 800110c:	00000000 	.word	0x00000000

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001116:	f003 fc5d 	bl	80049d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 fad9 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111e:	f000 fdeb 	bl	8001cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001122:	f000 fdb9 	bl	8001c98 <MX_DMA_Init>
  MX_ADC1_Init();
 8001126:	f000 fb3b 	bl	80017a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800112a:	f000 fd61 	bl	8001bf0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800112e:	f000 fd89 	bl	8001c44 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001132:	f000 fb89 	bl	8001848 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001136:	f000 fbb5 	bl	80018a4 <MX_I2C2_Init>
  MX_TIM1_Init();
 800113a:	f000 fbe1 	bl	8001900 <MX_TIM1_Init>
  MX_TIM2_Init();
 800113e:	f000 fc7d 	bl	8001a3c <MX_TIM2_Init>
  MX_TIM9_Init();
 8001142:	f000 fd1b 	bl	8001b7c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  uartx_write_text(&huart1, "INICIANDO\r\n"); // huart del gps
 8001146:	492f      	ldr	r1, [pc, #188]	@ (8001204 <main+0xf4>)
 8001148:	482f      	ldr	r0, [pc, #188]	@ (8001208 <main+0xf8>)
 800114a:	f003 fc2c 	bl	80049a6 <uartx_write_text>
  uartRX_it_idle_dma_init(&GPS_UARTRX);
 800114e:	482f      	ldr	r0, [pc, #188]	@ (800120c <main+0xfc>)
 8001150:	f001 ff00 	bl	8002f54 <uartRX_it_idle_dma_init>

  // Testing with GY-85 //
  HAL_Delay(2000);
 8001154:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001158:	f003 fcae 	bl	8004ab8 <HAL_Delay>

  uartx_write_text(&huart1, "INICIANDO\r\n"); // huart del imu
 800115c:	4929      	ldr	r1, [pc, #164]	@ (8001204 <main+0xf4>)
 800115e:	482a      	ldr	r0, [pc, #168]	@ (8001208 <main+0xf8>)
 8001160:	f003 fc21 	bl	80049a6 <uartx_write_text>
  if (GY85_Init() != 1) {
 8001164:	f001 fc18 	bl	8002998 <GY85_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d008      	beq.n	8001180 <main+0x70>
	  sprintf(texto,"SENSOR NO CONECTADO\r\n");
 800116e:	4928      	ldr	r1, [pc, #160]	@ (8001210 <main+0x100>)
 8001170:	4828      	ldr	r0, [pc, #160]	@ (8001214 <main+0x104>)
 8001172:	f00a fea3 	bl	800bebc <sprintf>
	  uartx_write_text(&huart1, texto); // huart a usar con el imu, preguntar a alcides cuál es ese
 8001176:	4927      	ldr	r1, [pc, #156]	@ (8001214 <main+0x104>)
 8001178:	4823      	ldr	r0, [pc, #140]	@ (8001208 <main+0xf8>)
 800117a:	f003 fc14 	bl	80049a6 <uartx_write_text>
 800117e:	e007      	b.n	8001190 <main+0x80>
  }
  else {
	  sprintf(texto,"CONECTADO\r\n");
 8001180:	4925      	ldr	r1, [pc, #148]	@ (8001218 <main+0x108>)
 8001182:	4824      	ldr	r0, [pc, #144]	@ (8001214 <main+0x104>)
 8001184:	f00a fe9a 	bl	800bebc <sprintf>
	  uartx_write_text(&huart1, texto);
 8001188:	4922      	ldr	r1, [pc, #136]	@ (8001214 <main+0x104>)
 800118a:	481f      	ldr	r0, [pc, #124]	@ (8001208 <main+0xf8>)
 800118c:	f003 fc0b 	bl	80049a6 <uartx_write_text>
  }

   Kalman_Init(&kalman_roll_);
 8001190:	4822      	ldr	r0, [pc, #136]	@ (800121c <main+0x10c>)
 8001192:	f003 fad1 	bl	8004738 <Kalman_Init>
   Kalman_Init(&kalman_pitch_);
 8001196:	4822      	ldr	r0, [pc, #136]	@ (8001220 <main+0x110>)
 8001198:	f003 face 	bl	8004738 <Kalman_Init>
   tiempo_imu=uwTick;
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <main+0x114>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a21      	ldr	r2, [pc, #132]	@ (8001228 <main+0x118>)
 80011a2:	6013      	str	r3, [r2, #0]
   TIMERIMU_Init();
 80011a4:	f001 faa8 	bl	80026f8 <TIMERIMU_Init>

   /* --- BMP280 excelente de la librería--- */
   bmp280_init_default_params(&bmp280.params);
 80011a8:	4820      	ldr	r0, [pc, #128]	@ (800122c <main+0x11c>)
 80011aa:	f001 ff66 	bl	800307a <bmp280_init_default_params>
 	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80011ae:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <main+0x120>)
 80011b0:	2276      	movs	r2, #118	@ 0x76
 80011b2:	849a      	strh	r2, [r3, #36]	@ 0x24
 	bmp280.i2c = &hi2c1;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <main+0x120>)
 80011b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001234 <main+0x124>)
 80011b8:	629a      	str	r2, [r3, #40]	@ 0x28

 	while (!bmp280_init(&bmp280, &bmp280.params)) {
 80011ba:	e00b      	b.n	80011d4 <main+0xc4>
 		sprintf(Data, "BMP280 initialization failed\n");
 80011bc:	491e      	ldr	r1, [pc, #120]	@ (8001238 <main+0x128>)
 80011be:	481f      	ldr	r0, [pc, #124]	@ (800123c <main+0x12c>)
 80011c0:	f00a fe7c 	bl	800bebc <sprintf>
 		uartx_write_text(&huart1, Data);
 80011c4:	491d      	ldr	r1, [pc, #116]	@ (800123c <main+0x12c>)
 80011c6:	4810      	ldr	r0, [pc, #64]	@ (8001208 <main+0xf8>)
 80011c8:	f003 fbed 	bl	80049a6 <uartx_write_text>
 		HAL_Delay(2000);
 80011cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011d0:	f003 fc72 	bl	8004ab8 <HAL_Delay>
 	while (!bmp280_init(&bmp280, &bmp280.params)) {
 80011d4:	4915      	ldr	r1, [pc, #84]	@ (800122c <main+0x11c>)
 80011d6:	4816      	ldr	r0, [pc, #88]	@ (8001230 <main+0x120>)
 80011d8:	f002 f8cb 	bl	8003372 <bmp280_init>
 80011dc:	4603      	mov	r3, r0
 80011de:	f083 0301 	eor.w	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e9      	bne.n	80011bc <main+0xac>
 	}
 	bool bme280p = bmp280.id == BME280_CHIP_ID;
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <main+0x120>)
 80011ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80011ee:	2b60      	cmp	r3, #96	@ 0x60
 80011f0:	bf0c      	ite	eq
 80011f2:	2301      	moveq	r3, #1
 80011f4:	2300      	movne	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
 	 sprintf(Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d022      	beq.n	8001244 <main+0x134>
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <main+0x130>)
 8001200:	e021      	b.n	8001246 <main+0x136>
 8001202:	bf00      	nop
 8001204:	080118a8 	.word	0x080118a8
 8001208:	2000094c 	.word	0x2000094c
 800120c:	20000004 	.word	0x20000004
 8001210:	080118b4 	.word	0x080118b4
 8001214:	20000be0 	.word	0x20000be0
 8001218:	080118cc 	.word	0x080118cc
 800121c:	20000f54 	.word	0x20000f54
 8001220:	20000f6c 	.word	0x20000f6c
 8001224:	20000f8c 	.word	0x20000f8c
 8001228:	20000c98 	.word	0x20000c98
 800122c:	20000ac8 	.word	0x20000ac8
 8001230:	20000a9c 	.word	0x20000a9c
 8001234:	200007cc 	.word	0x200007cc
 8001238:	080118d8 	.word	0x080118d8
 800123c:	20000ad0 	.word	0x20000ad0
 8001240:	080118f8 	.word	0x080118f8
 8001244:	4bb6      	ldr	r3, [pc, #728]	@ (8001520 <main+0x410>)
 8001246:	461a      	mov	r2, r3
 8001248:	49b6      	ldr	r1, [pc, #728]	@ (8001524 <main+0x414>)
 800124a:	48b7      	ldr	r0, [pc, #732]	@ (8001528 <main+0x418>)
 800124c:	f00a fe36 	bl	800bebc <sprintf>
	uartx_write_text(&huart1, Data);
 8001250:	49b5      	ldr	r1, [pc, #724]	@ (8001528 <main+0x418>)
 8001252:	48b6      	ldr	r0, [pc, #728]	@ (800152c <main+0x41c>)
 8001254:	f003 fba7 	bl	80049a6 <uartx_write_text>
	  	   }
	  */

	  	//  sprintf(texto,"%.1f,%1f,%.1f\r",acel_roll,compAngle_Roll,kalman_roll);

	  	  sprintf(texto,"roll=%.1f    pitch=%.1f\r\n\r\n",kalman_roll,kalman_pitch);
 8001258:	4bb5      	ldr	r3, [pc, #724]	@ (8001530 <main+0x420>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f97b 	bl	8000558 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	4bb3      	ldr	r3, [pc, #716]	@ (8001534 <main+0x424>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f974 	bl	8000558 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	e9cd 2300 	strd	r2, r3, [sp]
 8001278:	4622      	mov	r2, r4
 800127a:	462b      	mov	r3, r5
 800127c:	49ae      	ldr	r1, [pc, #696]	@ (8001538 <main+0x428>)
 800127e:	48af      	ldr	r0, [pc, #700]	@ (800153c <main+0x42c>)
 8001280:	f00a fe1c 	bl	800bebc <sprintf>
	  	  uartx_write_text(&huart1, texto); // preguntarle a alcides cuál huart en el imu
 8001284:	49ad      	ldr	r1, [pc, #692]	@ (800153c <main+0x42c>)
 8001286:	48a9      	ldr	r0, [pc, #676]	@ (800152c <main+0x41c>)
 8001288:	f003 fb8d 	bl	80049a6 <uartx_write_text>
	  	  //usb_uart_write(texto); --> ¿?
	  	  HAL_Delay(800);
 800128c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001290:	f003 fc12 	bl	8004ab8 <HAL_Delay>


	  // Parte correspondiente al GPS:
	  	if (GPS_UARTRX.flag_rx==1)
 8001294:	4baa      	ldr	r3, [pc, #680]	@ (8001540 <main+0x430>)
 8001296:	7f1b      	ldrb	r3, [r3, #28]
 8001298:	2b01      	cmp	r3, #1
 800129a:	f040 80b9 	bne.w	8001410 <main+0x300>
	  		  	  	  {
	  		  		 GPS_RMC();
 800129e:	f002 fd23 	bl	8003ce8 <GPS_RMC>
	  		  	  	 sprintf(texto,"LAT=%.5f   LON=%.5f\r\n",latitud,longitud);
 80012a2:	4ba8      	ldr	r3, [pc, #672]	@ (8001544 <main+0x434>)
 80012a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a8:	4ba7      	ldr	r3, [pc, #668]	@ (8001548 <main+0x438>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	e9cd 2300 	strd	r2, r3, [sp]
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	49a5      	ldr	r1, [pc, #660]	@ (800154c <main+0x43c>)
 80012b8:	48a0      	ldr	r0, [pc, #640]	@ (800153c <main+0x42c>)
 80012ba:	f00a fdff 	bl	800bebc <sprintf>
	  		  		 uartx_write_text(&huart1,texto);
 80012be:	499f      	ldr	r1, [pc, #636]	@ (800153c <main+0x42c>)
 80012c0:	489a      	ldr	r0, [pc, #616]	@ (800152c <main+0x41c>)
 80012c2:	f003 fb70 	bl	80049a6 <uartx_write_text>

	  		  		 sprintf(texto,"A=%u  M=%u  D=%u\r\n",an_gps,mes_gps,dia_gps);
 80012c6:	4ba2      	ldr	r3, [pc, #648]	@ (8001550 <main+0x440>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4ba1      	ldr	r3, [pc, #644]	@ (8001554 <main+0x444>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4ba1      	ldr	r3, [pc, #644]	@ (8001558 <main+0x448>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	460b      	mov	r3, r1
 80012da:	49a0      	ldr	r1, [pc, #640]	@ (800155c <main+0x44c>)
 80012dc:	4897      	ldr	r0, [pc, #604]	@ (800153c <main+0x42c>)
 80012de:	f00a fded 	bl	800bebc <sprintf>
	  		  		 uartx_write_text(&huart1,texto);
 80012e2:	4996      	ldr	r1, [pc, #600]	@ (800153c <main+0x42c>)
 80012e4:	4891      	ldr	r0, [pc, #580]	@ (800152c <main+0x41c>)
 80012e6:	f003 fb5e 	bl	80049a6 <uartx_write_text>

	  		  		 sprintf(texto,"hor=%u  min=%u  seg=%u\r\n",hor_gps,min_gps,seg_gps);
 80012ea:	4b9d      	ldr	r3, [pc, #628]	@ (8001560 <main+0x450>)
 80012ec:	f993 3000 	ldrsb.w	r3, [r3]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b9c      	ldr	r3, [pc, #624]	@ (8001564 <main+0x454>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001568 <main+0x458>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	460b      	mov	r3, r1
 8001300:	499a      	ldr	r1, [pc, #616]	@ (800156c <main+0x45c>)
 8001302:	488e      	ldr	r0, [pc, #568]	@ (800153c <main+0x42c>)
 8001304:	f00a fdda 	bl	800bebc <sprintf>
	  		  		 uartx_write_text(&huart1,texto);
 8001308:	498c      	ldr	r1, [pc, #560]	@ (800153c <main+0x42c>)
 800130a:	4888      	ldr	r0, [pc, #544]	@ (800152c <main+0x41c>)
 800130c:	f003 fb4b 	bl	80049a6 <uartx_write_text>

	  		  		 sprintf(texto,"vel=%.2f\r\n",gps_vel_kph);
 8001310:	4b97      	ldr	r3, [pc, #604]	@ (8001570 <main+0x460>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f91f 	bl	8000558 <__aeabi_f2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4995      	ldr	r1, [pc, #596]	@ (8001574 <main+0x464>)
 8001320:	4886      	ldr	r0, [pc, #536]	@ (800153c <main+0x42c>)
 8001322:	f00a fdcb 	bl	800bebc <sprintf>
	  		   		 uartx_write_text(&huart1,texto);
 8001326:	4985      	ldr	r1, [pc, #532]	@ (800153c <main+0x42c>)
 8001328:	4880      	ldr	r0, [pc, #512]	@ (800152c <main+0x41c>)
 800132a:	f003 fb3c 	bl	80049a6 <uartx_write_text>

	  		   		 sprintf(texto,"Rumbo=%.2f\r\n",gps_rumbo);
 800132e:	4b92      	ldr	r3, [pc, #584]	@ (8001578 <main+0x468>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f910 	bl	8000558 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	498f      	ldr	r1, [pc, #572]	@ (800157c <main+0x46c>)
 800133e:	487f      	ldr	r0, [pc, #508]	@ (800153c <main+0x42c>)
 8001340:	f00a fdbc 	bl	800bebc <sprintf>
	  		  		 uartx_write_text(&huart1,texto);
 8001344:	497d      	ldr	r1, [pc, #500]	@ (800153c <main+0x42c>)
 8001346:	4879      	ldr	r0, [pc, #484]	@ (800152c <main+0x41c>)
 8001348:	f003 fb2d 	bl	80049a6 <uartx_write_text>

	  		  		 sprintf(texto,"devi=%.2f\r\n\r\n",gps_desv_mag);
 800134c:	4b8c      	ldr	r3, [pc, #560]	@ (8001580 <main+0x470>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f901 	bl	8000558 <__aeabi_f2d>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	498a      	ldr	r1, [pc, #552]	@ (8001584 <main+0x474>)
 800135c:	4877      	ldr	r0, [pc, #476]	@ (800153c <main+0x42c>)
 800135e:	f00a fdad 	bl	800bebc <sprintf>
	  		  		 uartx_write_text(&huart1,texto);
 8001362:	4976      	ldr	r1, [pc, #472]	@ (800153c <main+0x42c>)
 8001364:	4871      	ldr	r0, [pc, #452]	@ (800152c <main+0x41c>)
 8001366:	f003 fb1e 	bl	80049a6 <uartx_write_text>

	  		  		  GPS_GGA();
 800136a:	f002 ff55 	bl	8004218 <GPS_GGA>
	  		  		  sprintf(texto,"hor=%u  min=%u  seg=%u\r\n",hor_gps,min_gps,seg_gps);
 800136e:	4b7c      	ldr	r3, [pc, #496]	@ (8001560 <main+0x450>)
 8001370:	f993 3000 	ldrsb.w	r3, [r3]
 8001374:	461a      	mov	r2, r3
 8001376:	4b7b      	ldr	r3, [pc, #492]	@ (8001564 <main+0x454>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	4b7a      	ldr	r3, [pc, #488]	@ (8001568 <main+0x458>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	460b      	mov	r3, r1
 8001384:	4979      	ldr	r1, [pc, #484]	@ (800156c <main+0x45c>)
 8001386:	486d      	ldr	r0, [pc, #436]	@ (800153c <main+0x42c>)
 8001388:	f00a fd98 	bl	800bebc <sprintf>
	  		  		  uartx_write_text(&huart1,texto);
 800138c:	496b      	ldr	r1, [pc, #428]	@ (800153c <main+0x42c>)
 800138e:	4867      	ldr	r0, [pc, #412]	@ (800152c <main+0x41c>)
 8001390:	f003 fb09 	bl	80049a6 <uartx_write_text>

	  		  		  sprintf(texto,"LAT=%.5f   LON=%.5f\r\n",latitud,longitud);
 8001394:	4b6b      	ldr	r3, [pc, #428]	@ (8001544 <main+0x434>)
 8001396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139a:	4b6b      	ldr	r3, [pc, #428]	@ (8001548 <main+0x438>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	e9cd 2300 	strd	r2, r3, [sp]
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4968      	ldr	r1, [pc, #416]	@ (800154c <main+0x43c>)
 80013aa:	4864      	ldr	r0, [pc, #400]	@ (800153c <main+0x42c>)
 80013ac:	f00a fd86 	bl	800bebc <sprintf>
	  		  		  uartx_write_text(&huart1,texto);
 80013b0:	4962      	ldr	r1, [pc, #392]	@ (800153c <main+0x42c>)
 80013b2:	485e      	ldr	r0, [pc, #376]	@ (800152c <main+0x41c>)
 80013b4:	f003 faf7 	bl	80049a6 <uartx_write_text>
	  		  		  sprintf(texto,"MOD=%u  SAT=%u\r\n",gps_modo,gps_satelites);
 80013b8:	4b73      	ldr	r3, [pc, #460]	@ (8001588 <main+0x478>)
 80013ba:	f993 3000 	ldrsb.w	r3, [r3]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b72      	ldr	r3, [pc, #456]	@ (800158c <main+0x47c>)
 80013c2:	f993 3000 	ldrsb.w	r3, [r3]
 80013c6:	4972      	ldr	r1, [pc, #456]	@ (8001590 <main+0x480>)
 80013c8:	485c      	ldr	r0, [pc, #368]	@ (800153c <main+0x42c>)
 80013ca:	f00a fd77 	bl	800bebc <sprintf>
	  		  		  uartx_write_text(&huart1,texto);
 80013ce:	495b      	ldr	r1, [pc, #364]	@ (800153c <main+0x42c>)
 80013d0:	4856      	ldr	r0, [pc, #344]	@ (800152c <main+0x41c>)
 80013d2:	f003 fae8 	bl	80049a6 <uartx_write_text>

	  		  		  sprintf(texto,"hor_di=%.2f   ALTU=%.2f\r\n\r\n",gps_hor_dilu,gps_altura);
 80013d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001594 <main+0x484>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8bc 	bl	8000558 <__aeabi_f2d>
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1
 80013e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001598 <main+0x488>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f8b5 	bl	8000558 <__aeabi_f2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	e9cd 2300 	strd	r2, r3, [sp]
 80013f6:	4622      	mov	r2, r4
 80013f8:	462b      	mov	r3, r5
 80013fa:	4968      	ldr	r1, [pc, #416]	@ (800159c <main+0x48c>)
 80013fc:	484f      	ldr	r0, [pc, #316]	@ (800153c <main+0x42c>)
 80013fe:	f00a fd5d 	bl	800bebc <sprintf>
	  		  		  uartx_write_text(&huart1,texto);
 8001402:	494e      	ldr	r1, [pc, #312]	@ (800153c <main+0x42c>)
 8001404:	4849      	ldr	r0, [pc, #292]	@ (800152c <main+0x41c>)
 8001406:	f003 face 	bl	80049a6 <uartx_write_text>

	  		  		  uartRX_DMA_Re_init(&GPS_UARTRX);
 800140a:	484d      	ldr	r0, [pc, #308]	@ (8001540 <main+0x430>)
 800140c:	f001 fdd4 	bl	8002fb8 <uartRX_DMA_Re_init>
	  		  	  	  }
	  		  HAL_Delay(600);
 8001410:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001414:	f003 fb50 	bl	8004ab8 <HAL_Delay>


	  // Parte correspondiente a la lectura de sensores:

		  	    /* --- MQ-135 --- */
		  		uartx_write_text(&huart1, "prueba");
 8001418:	4961      	ldr	r1, [pc, #388]	@ (80015a0 <main+0x490>)
 800141a:	4844      	ldr	r0, [pc, #272]	@ (800152c <main+0x41c>)
 800141c:	f003 fac3 	bl	80049a6 <uartx_write_text>
		  		     // Sin DMA --> teacher
		  		     mq135_raw = ADC_Read(&hadc1);
 8001420:	4860      	ldr	r0, [pc, #384]	@ (80015a4 <main+0x494>)
 8001422:	f001 fe12 	bl	800304a <ADC_Read>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b5f      	ldr	r3, [pc, #380]	@ (80015a8 <main+0x498>)
 800142c:	801a      	strh	r2, [r3, #0]
		  		     float ppm=mq135_raw; //aquí poner la ecuación del gas.
 800142e:	4b5e      	ldr	r3, [pc, #376]	@ (80015a8 <main+0x498>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800143a:	edc7 7a02 	vstr	s15, [r7, #8]

		  		     float gas_carbon_dioxide=(powf(10.0f,((-2.890f*(log10f(mq135_raw))) + 2.055f)));  // CO2;
 800143e:	4b5a      	ldr	r3, [pc, #360]	@ (80015a8 <main+0x498>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800144a:	eeb0 0a67 	vmov.f32	s0, s15
 800144e:	f00f fb4d 	bl	8010aec <log10f>
 8001452:	eef0 7a40 	vmov.f32	s15, s0
 8001456:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80015ac <main+0x49c>
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80015b0 <main+0x4a0>
 8001462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001466:	eef0 0a67 	vmov.f32	s1, s15
 800146a:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800146e:	f00f fb6b 	bl	8010b48 <powf>
 8001472:	ed87 0a01 	vstr	s0, [r7, #4]
		  		     sprintf(texto,"CO2=%.1f\r\n",gas_carbon_dioxide);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff f86e 	bl	8000558 <__aeabi_f2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	494c      	ldr	r1, [pc, #304]	@ (80015b4 <main+0x4a4>)
 8001482:	482e      	ldr	r0, [pc, #184]	@ (800153c <main+0x42c>)
 8001484:	f00a fd1a 	bl	800bebc <sprintf>
		  		     uartx_write_text(&huart1, texto);
 8001488:	492c      	ldr	r1, [pc, #176]	@ (800153c <main+0x42c>)
 800148a:	4828      	ldr	r0, [pc, #160]	@ (800152c <main+0x41c>)
 800148c:	f003 fa8b 	bl	80049a6 <uartx_write_text>
		  		     HAL_Delay(500);
 8001490:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001494:	f003 fb10 	bl	8004ab8 <HAL_Delay>
		  		     //printear en la terminal y definir los flotantes arriba

		  		     //q135->gas_carbon_dioxide = (powf(10.0f,((-2.890f*(log10f(mq135_raw))) + 2.055f)));   // CO2

		  		    //Parte importante para la lectura de ppm de co2
		  		         gas = ADC_Read(&hadc1)*3.3/4095.0;
 8001498:	4842      	ldr	r0, [pc, #264]	@ (80015a4 <main+0x494>)
 800149a:	f001 fdd6 	bl	800304a <ADC_Read>
 800149e:	4603      	mov	r3, r0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f847 	bl	8000534 <__aeabi_i2d>
 80014a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001510 <main+0x400>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f8ac 	bl	8000608 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	a317      	add	r3, pc, #92	@ (adr r3, 8001518 <main+0x408>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7ff f9cd 	bl	800085c <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fb95 	bl	8000bf8 <__aeabi_d2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a39      	ldr	r2, [pc, #228]	@ (80015b8 <main+0x4a8>)
 80014d2:	6013      	str	r3, [r2, #0]
		  		       	        rs = ((VCC - gas) * RL) / gas;
 80014d4:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80015bc <main+0x4ac>
 80014d8:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <main+0x4a8>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014e6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80014ea:	4b33      	ldr	r3, [pc, #204]	@ (80015b8 <main+0x4a8>)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f4:	4b32      	ldr	r3, [pc, #200]	@ (80015c0 <main+0x4b0>)
 80014f6:	edc3 7a00 	vstr	s15, [r3]
		  		       	        ratio = rs / R0;
 80014fa:	4b31      	ldr	r3, [pc, #196]	@ (80015c0 <main+0x4b0>)
 80014fc:	ed93 7a00 	vldr	s14, [r3]
 8001500:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80015c4 <main+0x4b4>
 8001504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001508:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <main+0x4b8>)
 800150a:	edc3 7a00 	vstr	s15, [r3]
 800150e:	e05d      	b.n	80015cc <main+0x4bc>
 8001510:	66666666 	.word	0x66666666
 8001514:	400a6666 	.word	0x400a6666
 8001518:	00000000 	.word	0x00000000
 800151c:	40affe00 	.word	0x40affe00
 8001520:	08011900 	.word	0x08011900
 8001524:	08011908 	.word	0x08011908
 8001528:	20000ad0 	.word	0x20000ad0
 800152c:	2000094c 	.word	0x2000094c
 8001530:	20000f84 	.word	0x20000f84
 8001534:	20000f88 	.word	0x20000f88
 8001538:	0801191c 	.word	0x0801191c
 800153c:	20000be0 	.word	0x20000be0
 8001540:	20000004 	.word	0x20000004
 8001544:	20000f20 	.word	0x20000f20
 8001548:	20000f28 	.word	0x20000f28
 800154c:	08011938 	.word	0x08011938
 8001550:	20000f34 	.word	0x20000f34
 8001554:	20000f33 	.word	0x20000f33
 8001558:	20000f32 	.word	0x20000f32
 800155c:	08011950 	.word	0x08011950
 8001560:	20000f35 	.word	0x20000f35
 8001564:	20000f30 	.word	0x20000f30
 8001568:	20000f31 	.word	0x20000f31
 800156c:	08011964 	.word	0x08011964
 8001570:	20000f3c 	.word	0x20000f3c
 8001574:	08011980 	.word	0x08011980
 8001578:	20000f40 	.word	0x20000f40
 800157c:	0801198c 	.word	0x0801198c
 8001580:	20000f44 	.word	0x20000f44
 8001584:	0801199c 	.word	0x0801199c
 8001588:	20000f48 	.word	0x20000f48
 800158c:	20000f49 	.word	0x20000f49
 8001590:	080119ac 	.word	0x080119ac
 8001594:	20000f4c 	.word	0x20000f4c
 8001598:	20000f50 	.word	0x20000f50
 800159c:	080119c0 	.word	0x080119c0
 80015a0:	080119dc 	.word	0x080119dc
 80015a4:	20000724 	.word	0x20000724
 80015a8:	20000bdc 	.word	0x20000bdc
 80015ac:	c038f5c3 	.word	0xc038f5c3
 80015b0:	4003851f 	.word	0x4003851f
 80015b4:	080119e4 	.word	0x080119e4
 80015b8:	20000c44 	.word	0x20000c44
 80015bc:	40533333 	.word	0x40533333
 80015c0:	20000c48 	.word	0x20000c48
 80015c4:	4299428f 	.word	0x4299428f
 80015c8:	20000c4c 	.word	0x20000c4c
		  		       	        co2_ppm = 116.602068f * powf(ratio, -2.769034857f);
 80015cc:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <main+0x588>)
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800169c <main+0x58c>
 80015d6:	eeb0 0a67 	vmov.f32	s0, s15
 80015da:	f00f fab5 	bl	8010b48 <powf>
 80015de:	eef0 7a40 	vmov.f32	s15, s0
 80015e2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80016a0 <main+0x590>
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	4b2e      	ldr	r3, [pc, #184]	@ (80016a4 <main+0x594>)
 80015ec:	edc3 7a00 	vstr	s15, [r3]
		  		       	    //sprintf(texto,"!A00=G%.2f$",co2_ppm);
		  		       	  	uartx_write_text(&huart1, texto);
 80015f0:	492d      	ldr	r1, [pc, #180]	@ (80016a8 <main+0x598>)
 80015f2:	482e      	ldr	r0, [pc, #184]	@ (80016ac <main+0x59c>)
 80015f4:	f003 f9d7 	bl	80049a6 <uartx_write_text>
		  		       	  	 //Fin

		  		   /* --- Parte del LDR --- */
		  		     	 // uartx_write_text(&huart1, "LR0G255B0");
		  		     	  GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, LDR_GPIO_Port);
 80015f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015fc:	482c      	ldr	r0, [pc, #176]	@ (80016b0 <main+0x5a0>)
 80015fe:	f004 fe41 	bl	8006284 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	70fb      	strb	r3, [r7, #3]
		  		     	  if (pinState == GPIO_PIN_SET) {
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d104      	bne.n	8001616 <main+0x506>
		  		     	      	 //sprintf(texto,"Luz = 1  \r\n\r\n"); //para LabView
		  		     	      	 uartx_write_text(&huart1, texto);
 800160c:	4926      	ldr	r1, [pc, #152]	@ (80016a8 <main+0x598>)
 800160e:	4827      	ldr	r0, [pc, #156]	@ (80016ac <main+0x59c>)
 8001610:	f003 f9c9 	bl	80049a6 <uartx_write_text>
 8001614:	e014      	b.n	8001640 <main+0x530>
		  		     	            // El pin está en alto (1)
		  		     	        } else {
		  		     	      	  //sprintf(texto,"LR0G0B0  \r\n\r\n\r\n"); //para el celular
		  		     	      	      uartx_write_text(&huart1, texto);
 8001616:	4924      	ldr	r1, [pc, #144]	@ (80016a8 <main+0x598>)
 8001618:	4824      	ldr	r0, [pc, #144]	@ (80016ac <main+0x59c>)
 800161a:	f003 f9c4 	bl	80049a6 <uartx_write_text>
		  		     	      	  //sprintf(texto,"Luz = 0  \r\n\r\n"); //para LabView
		  		     	      	      uartx_write_text(&huart1, texto);
 800161e:	4922      	ldr	r1, [pc, #136]	@ (80016a8 <main+0x598>)
 8001620:	4822      	ldr	r0, [pc, #136]	@ (80016ac <main+0x59c>)
 8001622:	f003 f9c0 	bl	80049a6 <uartx_write_text>
//	  		        bmp_temp, bmp_press, bmp_hum);
//	  		      HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
//	  		    }

	  		  //BMP280 lectura
	  		  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001626:	e00b      	b.n	8001640 <main+0x530>
	  		  		 sprintf(Data,"Temperature/pressure reading failed\n");
 8001628:	4922      	ldr	r1, [pc, #136]	@ (80016b4 <main+0x5a4>)
 800162a:	4823      	ldr	r0, [pc, #140]	@ (80016b8 <main+0x5a8>)
 800162c:	f00a fc46 	bl	800bebc <sprintf>
	  		  		 uartx_write_text(&huart1, Data);
 8001630:	4921      	ldr	r1, [pc, #132]	@ (80016b8 <main+0x5a8>)
 8001632:	481e      	ldr	r0, [pc, #120]	@ (80016ac <main+0x59c>)
 8001634:	f003 f9b7 	bl	80049a6 <uartx_write_text>
	  		  		 HAL_Delay(2000);
 8001638:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800163c:	f003 fa3c 	bl	8004ab8 <HAL_Delay>
	  		  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001640:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <main+0x5ac>)
 8001642:	4a1f      	ldr	r2, [pc, #124]	@ (80016c0 <main+0x5b0>)
 8001644:	491f      	ldr	r1, [pc, #124]	@ (80016c4 <main+0x5b4>)
 8001646:	4820      	ldr	r0, [pc, #128]	@ (80016c8 <main+0x5b8>)
 8001648:	f002 fb00 	bl	8003c4c <bmp280_read_float>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e7      	bne.n	8001628 <main+0x518>
	  		  	}

	  		  	sprintf(Data,"Pressure: %.2f Pa\r\nTemperature: %.2f C\r\n\r\n",pressure, temperature);
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <main+0x5b0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff7b 	bl	8000558 <__aeabi_f2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <main+0x5b4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff74 	bl	8000558 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	e9cd 2300 	strd	r2, r3, [sp]
 8001678:	4622      	mov	r2, r4
 800167a:	462b      	mov	r3, r5
 800167c:	4913      	ldr	r1, [pc, #76]	@ (80016cc <main+0x5bc>)
 800167e:	480e      	ldr	r0, [pc, #56]	@ (80016b8 <main+0x5a8>)
 8001680:	f00a fc1c 	bl	800bebc <sprintf>
	  		  	uartx_write_text(&huart1, Data);
 8001684:	490c      	ldr	r1, [pc, #48]	@ (80016b8 <main+0x5a8>)
 8001686:	4809      	ldr	r0, [pc, #36]	@ (80016ac <main+0x59c>)
 8001688:	f003 f98d 	bl	80049a6 <uartx_write_text>
	  		  	HAL_Delay(500);
 800168c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001690:	f003 fa12 	bl	8004ab8 <HAL_Delay>
  {
 8001694:	e5e0      	b.n	8001258 <main+0x148>
 8001696:	bf00      	nop
 8001698:	20000c4c 	.word	0x20000c4c
 800169c:	c03137de 	.word	0xc03137de
 80016a0:	42e93442 	.word	0x42e93442
 80016a4:	20000c50 	.word	0x20000c50
 80016a8:	20000be0 	.word	0x20000be0
 80016ac:	2000094c 	.word	0x2000094c
 80016b0:	40020000 	.word	0x40020000
 80016b4:	080119f0 	.word	0x080119f0
 80016b8:	20000ad0 	.word	0x20000ad0
 80016bc:	20000bd8 	.word	0x20000bd8
 80016c0:	20000bd0 	.word	0x20000bd0
 80016c4:	20000bd4 	.word	0x20000bd4
 80016c8:	20000a9c 	.word	0x20000a9c
 80016cc:	08011a18 	.word	0x08011a18

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	@ 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	2230      	movs	r2, #48	@ 0x30
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f00a fc51 	bl	800bf86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <SystemClock_Config+0xc8>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	4a26      	ldr	r2, [pc, #152]	@ (8001798 <SystemClock_Config+0xc8>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	@ 0x40
 8001704:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <SystemClock_Config+0xc8>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	4b21      	ldr	r3, [pc, #132]	@ (800179c <SystemClock_Config+0xcc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a20      	ldr	r2, [pc, #128]	@ (800179c <SystemClock_Config+0xcc>)
 800171a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <SystemClock_Config+0xcc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001730:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800173e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001740:	2304      	movs	r3, #4
 8001742:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001744:	2364      	movs	r3, #100	@ 0x64
 8001746:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001748:	2302      	movs	r3, #2
 800174a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800174c:	2304      	movs	r3, #4
 800174e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4618      	mov	r0, r3
 8001756:	f006 fa6b 	bl	8007c30 <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001760:	f000 fb44 	bl	8001dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	230f      	movs	r3, #15
 8001766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001768:	2302      	movs	r3, #2
 800176a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	2103      	movs	r1, #3
 8001780:	4618      	mov	r0, r3
 8001782:	f006 fccd 	bl	8008120 <HAL_RCC_ClockConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800178c:	f000 fb2e 	bl	8001dec <Error_Handler>
  }
}
 8001790:	bf00      	nop
 8001792:	3750      	adds	r7, #80	@ 0x50
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40007000 	.word	0x40007000

080017a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017a6:	463b      	mov	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017b4:	4a21      	ldr	r2, [pc, #132]	@ (800183c <MX_ADC1_Init+0x9c>)
 80017b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017da:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017dc:	2200      	movs	r2, #0
 80017de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e0:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017e2:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <MX_ADC1_Init+0xa0>)
 80017e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <MX_ADC1_Init+0x98>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001800:	480d      	ldr	r0, [pc, #52]	@ (8001838 <MX_ADC1_Init+0x98>)
 8001802:	f003 f97d 	bl	8004b00 <HAL_ADC_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800180c:	f000 faee 	bl	8001dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <MX_ADC1_Init+0xa4>)
 8001812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001814:	2301      	movs	r3, #1
 8001816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_ADC1_Init+0x98>)
 8001822:	f003 fc5f 	bl	80050e4 <HAL_ADC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800182c:	f000 fade 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000724 	.word	0x20000724
 800183c:	40012000 	.word	0x40012000
 8001840:	0f000001 	.word	0x0f000001
 8001844:	10000012 	.word	0x10000012

08001848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <MX_I2C1_Init+0x50>)
 800184e:	4a13      	ldr	r2, [pc, #76]	@ (800189c <MX_I2C1_Init+0x54>)
 8001850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001854:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <MX_I2C1_Init+0x58>)
 8001856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_I2C1_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001866:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800186a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001886:	f004 fd2f 	bl	80062e8 <HAL_I2C_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001890:	f000 faac 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200007cc 	.word	0x200007cc
 800189c:	40005400 	.word	0x40005400
 80018a0:	00061a80 	.word	0x00061a80

080018a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <MX_I2C2_Init+0x50>)
 80018aa:	4a13      	ldr	r2, [pc, #76]	@ (80018f8 <MX_I2C2_Init+0x54>)
 80018ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80018ae:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_I2C2_Init+0x50>)
 80018b0:	4a12      	ldr	r2, [pc, #72]	@ (80018fc <MX_I2C2_Init+0x58>)
 80018b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <MX_I2C2_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_I2C2_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_I2C2_Init+0x50>)
 80018c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <MX_I2C2_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MX_I2C2_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <MX_I2C2_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <MX_I2C2_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	@ (80018f4 <MX_I2C2_Init+0x50>)
 80018e2:	f004 fd01 	bl	80062e8 <HAL_I2C_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018ec:	f000 fa7e 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000820 	.word	0x20000820
 80018f8:	40005800 	.word	0x40005800
 80018fc:	00061a80 	.word	0x00061a80

08001900 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b096      	sub	sp, #88	@ 0x58
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2220      	movs	r2, #32
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f00a fb24 	bl	800bf86 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800193e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a34 <MX_TIM1_Init+0x134>)
 8001940:	4a3d      	ldr	r2, [pc, #244]	@ (8001a38 <MX_TIM1_Init+0x138>)
 8001942:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001944:	4b3b      	ldr	r3, [pc, #236]	@ (8001a34 <MX_TIM1_Init+0x134>)
 8001946:	2263      	movs	r2, #99	@ 0x63
 8001948:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a34 <MX_TIM1_Init+0x134>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001950:	4b38      	ldr	r3, [pc, #224]	@ (8001a34 <MX_TIM1_Init+0x134>)
 8001952:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001956:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001958:	4b36      	ldr	r3, [pc, #216]	@ (8001a34 <MX_TIM1_Init+0x134>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800195e:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <MX_TIM1_Init+0x134>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001964:	4b33      	ldr	r3, [pc, #204]	@ (8001a34 <MX_TIM1_Init+0x134>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800196a:	4832      	ldr	r0, [pc, #200]	@ (8001a34 <MX_TIM1_Init+0x134>)
 800196c:	f006 fdf8 	bl	8008560 <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001976:	f000 fa39 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001980:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001984:	4619      	mov	r1, r3
 8001986:	482b      	ldr	r0, [pc, #172]	@ (8001a34 <MX_TIM1_Init+0x134>)
 8001988:	f007 f95c 	bl	8008c44 <HAL_TIM_ConfigClockSource>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001992:	f000 fa2b 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001996:	4827      	ldr	r0, [pc, #156]	@ (8001a34 <MX_TIM1_Init+0x134>)
 8001998:	f006 feed 	bl	8008776 <HAL_TIM_PWM_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80019a2:	f000 fa23 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019b2:	4619      	mov	r1, r3
 80019b4:	481f      	ldr	r0, [pc, #124]	@ (8001a34 <MX_TIM1_Init+0x134>)
 80019b6:	f007 fce1 	bl	800937c <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019c0:	f000 fa14 	bl	8001dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c4:	2360      	movs	r3, #96	@ 0x60
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e0:	220c      	movs	r2, #12
 80019e2:	4619      	mov	r1, r3
 80019e4:	4813      	ldr	r0, [pc, #76]	@ (8001a34 <MX_TIM1_Init+0x134>)
 80019e6:	f007 f86b 	bl	8008ac0 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80019f0:	f000 f9fc 	bl	8001dec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4807      	ldr	r0, [pc, #28]	@ (8001a34 <MX_TIM1_Init+0x134>)
 8001a18:	f007 fd1e 	bl	8009458 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001a22:	f000 f9e3 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a26:	4803      	ldr	r0, [pc, #12]	@ (8001a34 <MX_TIM1_Init+0x134>)
 8001a28:	f000 fb86 	bl	8002138 <HAL_TIM_MspPostInit>

}
 8001a2c:	bf00      	nop
 8001a2e:	3758      	adds	r7, #88	@ 0x58
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000874 	.word	0x20000874
 8001a38:	40010000 	.word	0x40010000

08001a3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08e      	sub	sp, #56	@ 0x38
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	615a      	str	r2, [r3, #20]
 8001a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a6c:	4b42      	ldr	r3, [pc, #264]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001a6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001a76:	2263      	movs	r2, #99	@ 0x63
 8001a78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001a80:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001a82:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001a86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a88:	4b3b      	ldr	r3, [pc, #236]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a94:	4838      	ldr	r0, [pc, #224]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001a96:	f006 fd63 	bl	8008560 <HAL_TIM_Base_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001aa0:	f000 f9a4 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4831      	ldr	r0, [pc, #196]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001ab2:	f007 f8c7 	bl	8008c44 <HAL_TIM_ConfigClockSource>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001abc:	f000 f996 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ac0:	482d      	ldr	r0, [pc, #180]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001ac2:	f006 fe58 	bl	8008776 <HAL_TIM_PWM_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001acc:	f000 f98e 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001ad0:	4829      	ldr	r0, [pc, #164]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001ad2:	f006 fdf7 	bl	80086c4 <HAL_TIM_OC_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001adc:	f000 f986 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae8:	f107 0320 	add.w	r3, r7, #32
 8001aec:	4619      	mov	r1, r3
 8001aee:	4822      	ldr	r0, [pc, #136]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001af0:	f007 fc44 	bl	800937c <HAL_TIMEx_MasterConfigSynchronization>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001afa:	f000 f977 	bl	8001dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afe:	2360      	movs	r3, #96	@ 0x60
 8001b00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	4619      	mov	r1, r3
 8001b14:	4818      	ldr	r0, [pc, #96]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001b16:	f006 ffd3 	bl	8008ac0 <HAL_TIM_PWM_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001b20:	f000 f964 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2204      	movs	r2, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4813      	ldr	r0, [pc, #76]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001b2c:	f006 ffc8 	bl	8008ac0 <HAL_TIM_PWM_ConfigChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8001b36:	f000 f959 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001b42:	f006 ffbd 	bl	8008ac0 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8001b4c:	f000 f94e 	bl	8001dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	220c      	movs	r2, #12
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4807      	ldr	r0, [pc, #28]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001b5c:	f006 ff54 	bl	8008a08 <HAL_TIM_OC_ConfigChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8001b66:	f000 f941 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b6a:	4803      	ldr	r0, [pc, #12]	@ (8001b78 <MX_TIM2_Init+0x13c>)
 8001b6c:	f000 fae4 	bl	8002138 <HAL_TIM_MspPostInit>

}
 8001b70:	bf00      	nop
 8001b72:	3738      	adds	r7, #56	@ 0x38
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200008bc 	.word	0x200008bc

08001b7c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001b8e:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <MX_TIM9_Init+0x6c>)
 8001b90:	4a16      	ldr	r2, [pc, #88]	@ (8001bec <MX_TIM9_Init+0x70>)
 8001b92:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <MX_TIM9_Init+0x6c>)
 8001b96:	2263      	movs	r2, #99	@ 0x63
 8001b98:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <MX_TIM9_Init+0x6c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <MX_TIM9_Init+0x6c>)
 8001ba2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001ba6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <MX_TIM9_Init+0x6c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <MX_TIM9_Init+0x6c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001bb4:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <MX_TIM9_Init+0x6c>)
 8001bb6:	f006 fcd3 	bl	8008560 <HAL_TIM_Base_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001bc0:	f000 f914 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001bca:	463b      	mov	r3, r7
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4806      	ldr	r0, [pc, #24]	@ (8001be8 <MX_TIM9_Init+0x6c>)
 8001bd0:	f007 f838 	bl	8008c44 <HAL_TIM_ConfigClockSource>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001bda:	f000 f907 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000904 	.word	0x20000904
 8001bec:	40014000 	.word	0x40014000

08001bf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <MX_USART1_UART_Init+0x50>)
 8001bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001bfc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c28:	f007 fc7c 	bl	8009524 <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c32:	f000 f8db 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000094c 	.word	0x2000094c
 8001c40:	40011000 	.word	0x40011000

08001c44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c48:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <MX_USART6_UART_Init+0x4c>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <MX_USART6_UART_Init+0x50>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <MX_USART6_UART_Init+0x4c>)
 8001c50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <MX_USART6_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <MX_USART6_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <MX_USART6_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <MX_USART6_UART_Init+0x4c>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <MX_USART6_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <MX_USART6_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <MX_USART6_UART_Init+0x4c>)
 8001c7c:	f007 fc52 	bl	8009524 <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c86:	f000 f8b1 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000994 	.word	0x20000994
 8001c94:	40011400 	.word	0x40011400

08001c98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <MX_DMA_Init+0x5c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a13      	ldr	r2, [pc, #76]	@ (8001cf4 <MX_DMA_Init+0x5c>)
 8001ca8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <MX_DMA_Init+0x5c>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2038      	movs	r0, #56	@ 0x38
 8001cc0:	f003 fd23 	bl	800570a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cc4:	2038      	movs	r0, #56	@ 0x38
 8001cc6:	f003 fd3c 	bl	8005742 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2039      	movs	r0, #57	@ 0x39
 8001cd0:	f003 fd1b 	bl	800570a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001cd4:	2039      	movs	r0, #57	@ 0x39
 8001cd6:	f003 fd34 	bl	8005742 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	203a      	movs	r0, #58	@ 0x3a
 8001ce0:	f003 fd13 	bl	800570a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ce4:	203a      	movs	r0, #58	@ 0x3a
 8001ce6:	f003 fd2c 	bl	8005742 <HAL_NVIC_EnableIRQ>

}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	4a32      	ldr	r2, [pc, #200]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1e:	4b30      	ldr	r3, [pc, #192]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a2b      	ldr	r2, [pc, #172]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a24      	ldr	r2, [pc, #144]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2120      	movs	r1, #32
 8001d82:	4818      	ldr	r0, [pc, #96]	@ (8001de4 <MX_GPIO_Init+0xec>)
 8001d84:	f004 fa96 	bl	80062b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4812      	ldr	r0, [pc, #72]	@ (8001de8 <MX_GPIO_Init+0xf0>)
 8001da0:	f004 f8ec 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LDR_Pin */
  GPIO_InitStruct.Pin = LDR_Pin;
 8001da4:	2304      	movs	r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	480c      	ldr	r0, [pc, #48]	@ (8001de8 <MX_GPIO_Init+0xf0>)
 8001db8:	f004 f8e0 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <MX_GPIO_Init+0xec>)
 8001dd4:	f004 f8d2 	bl	8005f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	@ 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020800 	.word	0x40020800

08001dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df0:	b672      	cpsid	i
}
 8001df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <Error_Handler+0x8>

08001df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a08      	ldr	r2, [pc, #32]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e36:	2007      	movs	r0, #7
 8001e38:	f003 fc5c 	bl	80056f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a33      	ldr	r2, [pc, #204]	@ (8001f34 <HAL_ADC_MspInit+0xec>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d15f      	bne.n	8001f2a <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b32      	ldr	r3, [pc, #200]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	4a31      	ldr	r2, [pc, #196]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = MQ135_Pin;
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ135_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4821      	ldr	r0, [pc, #132]	@ (8001f3c <HAL_ADC_MspInit+0xf4>)
 8001eb6:	f004 f861 	bl	8005f7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ebc:	4a21      	ldr	r2, [pc, #132]	@ (8001f44 <HAL_ADC_MspInit+0xfc>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ed4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001edc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ee0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ee4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ee8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001eec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001efe:	4810      	ldr	r0, [pc, #64]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001f00:	f003 fc3a 	bl	8005778 <HAL_DMA_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001f0a:	f7ff ff6f 	bl	8001dec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a0b      	ldr	r2, [pc, #44]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001f12:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f14:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2012      	movs	r0, #18
 8001f20:	f003 fbf3 	bl	800570a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f24:	2012      	movs	r0, #18
 8001f26:	f003 fc0c 	bl	8005742 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	@ 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40012000 	.word	0x40012000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	2000076c 	.word	0x2000076c
 8001f44:	40026410 	.word	0x40026410

08001f48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	@ 0x30
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a3b      	ldr	r2, [pc, #236]	@ (8002054 <HAL_I2C_MspInit+0x10c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d12c      	bne.n	8001fc4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a39      	ldr	r2, [pc, #228]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b37      	ldr	r3, [pc, #220]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f86:	23c0      	movs	r3, #192	@ 0xc0
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f8a:	2312      	movs	r3, #18
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f96:	2304      	movs	r3, #4
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	482e      	ldr	r0, [pc, #184]	@ (800205c <HAL_I2C_MspInit+0x114>)
 8001fa2:	f003 ffeb 	bl	8005f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	4b2b      	ldr	r3, [pc, #172]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	4a2a      	ldr	r2, [pc, #168]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8001fb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb6:	4b28      	ldr	r3, [pc, #160]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fc2:	e042      	b.n	800204a <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a25      	ldr	r2, [pc, #148]	@ (8002060 <HAL_I2C_MspInit+0x118>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d13d      	bne.n	800204a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a20      	ldr	r2, [pc, #128]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff0:	2312      	movs	r3, #18
 8001ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	4619      	mov	r1, r3
 8002006:	4815      	ldr	r0, [pc, #84]	@ (800205c <HAL_I2C_MspInit+0x114>)
 8002008:	f003 ffb8 	bl	8005f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800200c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002012:	2312      	movs	r3, #18
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800201e:	2309      	movs	r3, #9
 8002020:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	4619      	mov	r1, r3
 8002028:	480c      	ldr	r0, [pc, #48]	@ (800205c <HAL_I2C_MspInit+0x114>)
 800202a:	f003 ffa7 	bl	8005f7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8002038:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800203c:	6413      	str	r3, [r2, #64]	@ 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_I2C_MspInit+0x110>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
}
 800204a:	bf00      	nop
 800204c:	3730      	adds	r7, #48	@ 0x30
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40005400 	.word	0x40005400
 8002058:	40023800 	.word	0x40023800
 800205c:	40020400 	.word	0x40020400
 8002060:	40005800 	.word	0x40005800

08002064 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2e      	ldr	r2, [pc, #184]	@ (800212c <HAL_TIM_Base_MspInit+0xc8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d11e      	bne.n	80020b4 <HAL_TIM_Base_MspInit+0x50>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	4b2d      	ldr	r3, [pc, #180]	@ (8002130 <HAL_TIM_Base_MspInit+0xcc>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	4a2c      	ldr	r2, [pc, #176]	@ (8002130 <HAL_TIM_Base_MspInit+0xcc>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6453      	str	r3, [r2, #68]	@ 0x44
 8002086:	4b2a      	ldr	r3, [pc, #168]	@ (8002130 <HAL_TIM_Base_MspInit+0xcc>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2018      	movs	r0, #24
 8002098:	f003 fb37 	bl	800570a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800209c:	2018      	movs	r0, #24
 800209e:	f003 fb50 	bl	8005742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2019      	movs	r0, #25
 80020a8:	f003 fb2f 	bl	800570a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020ac:	2019      	movs	r0, #25
 80020ae:	f003 fb48 	bl	8005742 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 80020b2:	e036      	b.n	8002122 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020bc:	d116      	bne.n	80020ec <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <HAL_TIM_Base_MspInit+0xcc>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002130 <HAL_TIM_Base_MspInit+0xcc>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ce:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <HAL_TIM_Base_MspInit+0xcc>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	201c      	movs	r0, #28
 80020e0:	f003 fb13 	bl	800570a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020e4:	201c      	movs	r0, #28
 80020e6:	f003 fb2c 	bl	8005742 <HAL_NVIC_EnableIRQ>
}
 80020ea:	e01a      	b.n	8002122 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM9)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a10      	ldr	r2, [pc, #64]	@ (8002134 <HAL_TIM_Base_MspInit+0xd0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d115      	bne.n	8002122 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <HAL_TIM_Base_MspInit+0xcc>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002130 <HAL_TIM_Base_MspInit+0xcc>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002104:	6453      	str	r3, [r2, #68]	@ 0x44
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <HAL_TIM_Base_MspInit+0xcc>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	2018      	movs	r0, #24
 8002118:	f003 faf7 	bl	800570a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800211c:	2018      	movs	r0, #24
 800211e:	f003 fb10 	bl	8005742 <HAL_NVIC_EnableIRQ>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40023800 	.word	0x40023800
 8002134:	40014000 	.word	0x40014000

08002138 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	@ 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a24      	ldr	r2, [pc, #144]	@ (80021e8 <HAL_TIM_MspPostInit+0xb0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d11f      	bne.n	800219a <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <HAL_TIM_MspPostInit+0xb4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <HAL_TIM_MspPostInit+0xb4>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_TIM_MspPostInit+0xb4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002176:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002188:	2301      	movs	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	4817      	ldr	r0, [pc, #92]	@ (80021f0 <HAL_TIM_MspPostInit+0xb8>)
 8002194:	f003 fef2 	bl	8005f7c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002198:	e022      	b.n	80021e0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a2:	d11d      	bne.n	80021e0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <HAL_TIM_MspPostInit+0xb4>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	4a0f      	ldr	r2, [pc, #60]	@ (80021ec <HAL_TIM_MspPostInit+0xb4>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b4:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <HAL_TIM_MspPostInit+0xb4>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80021c0:	230f      	movs	r3, #15
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021d0:	2301      	movs	r3, #1
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <HAL_TIM_MspPostInit+0xb8>)
 80021dc:	f003 fece 	bl	8005f7c <HAL_GPIO_Init>
}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	@ 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000

080021f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	@ 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a68      	ldr	r2, [pc, #416]	@ (80023b4 <HAL_UART_MspInit+0x1c0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d163      	bne.n	80022de <HAL_UART_MspInit+0xea>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	4b67      	ldr	r3, [pc, #412]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	4a66      	ldr	r2, [pc, #408]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 8002220:	f043 0310 	orr.w	r3, r3, #16
 8002224:	6453      	str	r3, [r2, #68]	@ 0x44
 8002226:	4b64      	ldr	r3, [pc, #400]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	4b60      	ldr	r3, [pc, #384]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a5f      	ldr	r2, [pc, #380]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	@ 0x30
 8002242:	4b5d      	ldr	r3, [pc, #372]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800224e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002260:	2307      	movs	r3, #7
 8002262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4619      	mov	r1, r3
 800226a:	4854      	ldr	r0, [pc, #336]	@ (80023bc <HAL_UART_MspInit+0x1c8>)
 800226c:	f003 fe86 	bl	8005f7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002270:	4b53      	ldr	r3, [pc, #332]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 8002272:	4a54      	ldr	r2, [pc, #336]	@ (80023c4 <HAL_UART_MspInit+0x1d0>)
 8002274:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002276:	4b52      	ldr	r3, [pc, #328]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 8002278:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800227c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800227e:	4b50      	ldr	r3, [pc, #320]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002284:	4b4e      	ldr	r3, [pc, #312]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800228a:	4b4d      	ldr	r3, [pc, #308]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 800228c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002290:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002292:	4b4b      	ldr	r3, [pc, #300]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 8002294:	2200      	movs	r2, #0
 8002296:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002298:	4b49      	ldr	r3, [pc, #292]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800229e:	4b48      	ldr	r3, [pc, #288]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022a4:	4b46      	ldr	r3, [pc, #280]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022aa:	4b45      	ldr	r3, [pc, #276]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022b0:	4843      	ldr	r0, [pc, #268]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 80022b2:	f003 fa61 	bl	8005778 <HAL_DMA_Init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80022bc:	f7ff fd96 	bl	8001dec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a3f      	ldr	r2, [pc, #252]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 80022c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022c6:	4a3e      	ldr	r2, [pc, #248]	@ (80023c0 <HAL_UART_MspInit+0x1cc>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2025      	movs	r0, #37	@ 0x25
 80022d2:	f003 fa1a 	bl	800570a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022d6:	2025      	movs	r0, #37	@ 0x25
 80022d8:	f003 fa33 	bl	8005742 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80022dc:	e066      	b.n	80023ac <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a39      	ldr	r2, [pc, #228]	@ (80023c8 <HAL_UART_MspInit+0x1d4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d161      	bne.n	80023ac <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	4b32      	ldr	r3, [pc, #200]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 80022ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f0:	4a31      	ldr	r2, [pc, #196]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 80022f2:	f043 0320 	orr.w	r3, r3, #32
 80022f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f8:	4b2f      	ldr	r3, [pc, #188]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 80022fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	4b2b      	ldr	r3, [pc, #172]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	4a2a      	ldr	r2, [pc, #168]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6313      	str	r3, [r2, #48]	@ 0x30
 8002314:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <HAL_UART_MspInit+0x1c4>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002320:	23c0      	movs	r3, #192	@ 0xc0
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002330:	2308      	movs	r3, #8
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	4824      	ldr	r0, [pc, #144]	@ (80023cc <HAL_UART_MspInit+0x1d8>)
 800233c:	f003 fe1e 	bl	8005f7c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002340:	4b23      	ldr	r3, [pc, #140]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 8002342:	4a24      	ldr	r2, [pc, #144]	@ (80023d4 <HAL_UART_MspInit+0x1e0>)
 8002344:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002346:	4b22      	ldr	r3, [pc, #136]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 8002348:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800234c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800234e:	4b20      	ldr	r3, [pc, #128]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002354:	4b1e      	ldr	r3, [pc, #120]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800235a:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 800235c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002360:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002362:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002368:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800236e:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 8002370:	2200      	movs	r2, #0
 8002372:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002374:	4b16      	ldr	r3, [pc, #88]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 8002376:	2200      	movs	r2, #0
 8002378:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800237a:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 800237c:	2200      	movs	r2, #0
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002380:	4813      	ldr	r0, [pc, #76]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 8002382:	f003 f9f9 	bl	8005778 <HAL_DMA_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 800238c:	f7ff fd2e 	bl	8001dec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a0f      	ldr	r2, [pc, #60]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 8002394:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002396:	4a0e      	ldr	r2, [pc, #56]	@ (80023d0 <HAL_UART_MspInit+0x1dc>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	2047      	movs	r0, #71	@ 0x47
 80023a2:	f003 f9b2 	bl	800570a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80023a6:	2047      	movs	r0, #71	@ 0x47
 80023a8:	f003 f9cb 	bl	8005742 <HAL_NVIC_EnableIRQ>
}
 80023ac:	bf00      	nop
 80023ae:	3730      	adds	r7, #48	@ 0x30
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	200009dc 	.word	0x200009dc
 80023c4:	40026440 	.word	0x40026440
 80023c8:	40011400 	.word	0x40011400
 80023cc:	40020800 	.word	0x40020800
 80023d0:	20000a3c 	.word	0x20000a3c
 80023d4:	40026428 	.word	0x40026428

080023d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <NMI_Handler+0x4>

080023e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <HardFault_Handler+0x4>

080023e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <MemManage_Handler+0x4>

080023f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <BusFault_Handler+0x4>

080023f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <UsageFault_Handler+0x4>

08002400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242e:	f002 fb23 	bl	8004a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800243c:	4802      	ldr	r0, [pc, #8]	@ (8002448 <ADC_IRQHandler+0x10>)
 800243e:	f002 fd15 	bl	8004e6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000724 	.word	0x20000724

0800244c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002450:	4803      	ldr	r0, [pc, #12]	@ (8002460 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002452:	f006 f9e9 	bl	8008828 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002456:	4803      	ldr	r0, [pc, #12]	@ (8002464 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002458:	f006 f9e6 	bl	8008828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000874 	.word	0x20000874
 8002464:	20000904 	.word	0x20000904

08002468 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800246e:	f006 f9db 	bl	8008828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000874 	.word	0x20000874

0800247c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002480:	4802      	ldr	r0, [pc, #8]	@ (800248c <TIM2_IRQHandler+0x10>)
 8002482:	f006 f9d1 	bl	8008828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200008bc 	.word	0x200008bc

08002490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <USART1_IRQHandler+0x10>)
 8002496:	f007 f9f9 	bl	800988c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000094c 	.word	0x2000094c

080024a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024a8:	4802      	ldr	r0, [pc, #8]	@ (80024b4 <DMA2_Stream0_IRQHandler+0x10>)
 80024aa:	f003 fafd 	bl	8005aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000076c 	.word	0x2000076c

080024b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <DMA2_Stream1_IRQHandler+0x10>)
 80024be:	f003 faf3 	bl	8005aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000a3c 	.word	0x20000a3c

080024cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <DMA2_Stream2_IRQHandler+0x10>)
 80024d2:	f003 fae9 	bl	8005aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200009dc 	.word	0x200009dc

080024e0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <USART6_IRQHandler+0x10>)
 80024e6:	f007 f9d1 	bl	800988c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000994 	.word	0x20000994

080024f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return 1;
 80024f8:	2301      	movs	r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_kill>:

int _kill(int pid, int sig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800250e:	f009 fe11 	bl	800c134 <__errno>
 8002512:	4603      	mov	r3, r0
 8002514:	2216      	movs	r2, #22
 8002516:	601a      	str	r2, [r3, #0]
  return -1;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_exit>:

void _exit (int status)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffe7 	bl	8002504 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002536:	bf00      	nop
 8002538:	e7fd      	b.n	8002536 <_exit+0x12>

0800253a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e00a      	b.n	8002562 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800254c:	f3af 8000 	nop.w
 8002550:	4601      	mov	r1, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	60ba      	str	r2, [r7, #8]
 8002558:	b2ca      	uxtb	r2, r1
 800255a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	dbf0      	blt.n	800254c <_read+0x12>
  }

  return len;
 800256a:	687b      	ldr	r3, [r7, #4]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	e009      	b.n	800259a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	60ba      	str	r2, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	dbf1      	blt.n	8002586 <_write+0x12>
  }
  return len;
 80025a2:	687b      	ldr	r3, [r7, #4]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_close>:

int _close(int file)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d4:	605a      	str	r2, [r3, #4]
  return 0;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_isatty>:

int _isatty(int file)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ec:	2301      	movs	r3, #1
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800261c:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <_sbrk+0x5c>)
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <_sbrk+0x60>)
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002628:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002630:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <_sbrk+0x64>)
 8002632:	4a12      	ldr	r2, [pc, #72]	@ (800267c <_sbrk+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002644:	f009 fd76 	bl	800c134 <__errno>
 8002648:	4603      	mov	r3, r0
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e009      	b.n	8002668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265a:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	4a05      	ldr	r2, [pc, #20]	@ (8002678 <_sbrk+0x64>)
 8002664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20020000 	.word	0x20020000
 8002674:	00000400 	.word	0x00000400
 8002678:	20000c54 	.word	0x20000c54
 800267c:	200012a0 	.word	0x200012a0

08002680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <SystemInit+0x20>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268a:	4a05      	ldr	r2, [pc, #20]	@ (80026a0 <SystemInit+0x20>)
 800268c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026a8:	f7ff ffea 	bl	8002680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026ac:	480c      	ldr	r0, [pc, #48]	@ (80026e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ae:	490d      	ldr	r1, [pc, #52]	@ (80026e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b0:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b4:	e002      	b.n	80026bc <LoopCopyDataInit>

080026b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ba:	3304      	adds	r3, #4

080026bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c0:	d3f9      	bcc.n	80026b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c4:	4c0a      	ldr	r4, [pc, #40]	@ (80026f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c8:	e001      	b.n	80026ce <LoopFillZerobss>

080026ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026cc:	3204      	adds	r2, #4

080026ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d0:	d3fb      	bcc.n	80026ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026d2:	f009 fd35 	bl	800c140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7fe fd1b 	bl	8001110 <main>
  bx  lr    
 80026da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	20000704 	.word	0x20000704
  ldr r2, =_sidata
 80026e8:	08011f1c 	.word	0x08011f1c
  ldr r2, =_sbss
 80026ec:	20000708 	.word	0x20000708
  ldr r4, =_ebss
 80026f0:	2000129c 	.word	0x2000129c

080026f4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <DMA1_Stream0_IRQHandler>
	...

080026f8 <TIMERIMU_Init>:
float heading;



void TIMERIMU_Init()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
#ifndef tiempo_muestreo
HAL_TIM_Base_Start_IT(&htimimu);
 80026fc:	4802      	ldr	r0, [pc, #8]	@ (8002708 <TIMERIMU_Init+0x10>)
 80026fe:	f005 ff7f 	bl	8008600 <HAL_TIM_Base_Start_IT>
#endif
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000904 	.word	0x20000904

0800270c <init_ace>:
 uint8_t init_ace()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af04      	add	r7, sp, #16
    uint8_t tmp = ADXL345_FMT;
 8002712:	2309      	movs	r3, #9
 8002714:	71fb      	strb	r3, [r7, #7]
    imu.ace_x = imu.ace_y = imu.ace_z = 0;
 8002716:	4b27      	ldr	r3, [pc, #156]	@ (80027b4 <init_ace+0xa8>)
 8002718:	2200      	movs	r2, #0
 800271a:	811a      	strh	r2, [r3, #8]
 800271c:	4b25      	ldr	r3, [pc, #148]	@ (80027b4 <init_ace+0xa8>)
 800271e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002722:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <init_ace+0xa8>)
 8002724:	80da      	strh	r2, [r3, #6]
 8002726:	4b23      	ldr	r3, [pc, #140]	@ (80027b4 <init_ace+0xa8>)
 8002728:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800272c:	4b21      	ldr	r3, [pc, #132]	@ (80027b4 <init_ace+0xa8>)
 800272e:	809a      	strh	r2, [r3, #4]

    // Configurar resolución y formato del acelerómetro
    if (HAL_I2C_Mem_Write(imu.hi2c, ADXL345, ADXL345_DATA_FMT, I2C_MEM_ADDR_SIZE_8BIT, &tmp, 1, HAL_MAX_DELAY) != HAL_OK)
 8002730:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <init_ace+0xa8>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	9302      	str	r3, [sp, #8]
 800273a:	2301      	movs	r3, #1
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	1dfb      	adds	r3, r7, #7
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2301      	movs	r3, #1
 8002744:	2231      	movs	r2, #49	@ 0x31
 8002746:	21a6      	movs	r1, #166	@ 0xa6
 8002748:	f004 fa42 	bl	8006bd0 <HAL_I2C_Mem_Write>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <init_ace+0x4a>
        return 0;
 8002752:	2300      	movs	r3, #0
 8002754:	e02a      	b.n	80027ac <init_ace+0xa0>

    tmp = ADXL345_RATE_CFG;
 8002756:	230b      	movs	r3, #11
 8002758:	71fb      	strb	r3, [r7, #7]
    // Establecer frecuencia de muestreo a 200 Hz
    if (HAL_I2C_Mem_Write(imu.hi2c, ADXL345, ADXL345_BW_RATE, I2C_MEM_ADDR_SIZE_8BIT, &tmp, 1, HAL_MAX_DELAY) != HAL_OK)
 800275a:	4b16      	ldr	r3, [pc, #88]	@ (80027b4 <init_ace+0xa8>)
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	9302      	str	r3, [sp, #8]
 8002764:	2301      	movs	r3, #1
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	1dfb      	adds	r3, r7, #7
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2301      	movs	r3, #1
 800276e:	222c      	movs	r2, #44	@ 0x2c
 8002770:	21a6      	movs	r1, #166	@ 0xa6
 8002772:	f004 fa2d 	bl	8006bd0 <HAL_I2C_Mem_Write>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <init_ace+0x74>
        return 0;
 800277c:	2300      	movs	r3, #0
 800277e:	e015      	b.n	80027ac <init_ace+0xa0>

    tmp = ADXL345_EN_MSR;
 8002780:	2308      	movs	r3, #8
 8002782:	71fb      	strb	r3, [r7, #7]
    // Habilitar mediciones
    if (HAL_I2C_Mem_Write(imu.hi2c, ADXL345, ADXL345_POWER_CTL, I2C_MEM_ADDR_SIZE_8BIT, &tmp, 1, HAL_MAX_DELAY) != HAL_OK)
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <init_ace+0xa8>)
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	2301      	movs	r3, #1
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	1dfb      	adds	r3, r7, #7
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2301      	movs	r3, #1
 8002798:	222d      	movs	r2, #45	@ 0x2d
 800279a:	21a6      	movs	r1, #166	@ 0xa6
 800279c:	f004 fa18 	bl	8006bd0 <HAL_I2C_Mem_Write>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <init_ace+0x9e>
        return 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e000      	b.n	80027ac <init_ace+0xa0>

    return 1;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000c58 	.word	0x20000c58

080027b8 <calibrate_offset>:

 void calibrate_offset()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
    int32_t x_tmp = 0, y_tmp = 0, z_tmp = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]

    for (uint8_t i = 0; i < ITG3205_NUM_SAMPLES; i++) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	70fb      	strb	r3, [r7, #3]
 80027ce:	e01c      	b.n	800280a <calibrate_offset+0x52>
        HAL_Delay(50);
 80027d0:	2032      	movs	r0, #50	@ 0x32
 80027d2:	f002 f971 	bl	8004ab8 <HAL_Delay>
        GY85_Read_giro();
 80027d6:	f000 f9b1 	bl	8002b3c <GY85_Read_giro>
        x_tmp += imu.giro_x;
 80027da:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <calibrate_offset+0x98>)
 80027dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80027e0:	461a      	mov	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4413      	add	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
        y_tmp += imu.giro_y;
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <calibrate_offset+0x98>)
 80027ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4413      	add	r3, r2
 80027f4:	60bb      	str	r3, [r7, #8]
        z_tmp += imu.giro_z;
 80027f6:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <calibrate_offset+0x98>)
 80027f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80027fc:	461a      	mov	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	607b      	str	r3, [r7, #4]
    for (uint8_t i = 0; i < ITG3205_NUM_SAMPLES; i++) {
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	3301      	adds	r3, #1
 8002808:	70fb      	strb	r3, [r7, #3]
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	2b13      	cmp	r3, #19
 800280e:	d9df      	bls.n	80027d0 <calibrate_offset+0x18>
    }

    x_offset = x_tmp / ITG3205_NUM_SAMPLES;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a10      	ldr	r2, [pc, #64]	@ (8002854 <calibrate_offset+0x9c>)
 8002814:	fb82 1203 	smull	r1, r2, r2, r3
 8002818:	10d2      	asrs	r2, r2, #3
 800281a:	17db      	asrs	r3, r3, #31
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	4a0e      	ldr	r2, [pc, #56]	@ (8002858 <calibrate_offset+0xa0>)
 8002820:	6013      	str	r3, [r2, #0]
    y_offset = y_tmp / ITG3205_NUM_SAMPLES;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4a0b      	ldr	r2, [pc, #44]	@ (8002854 <calibrate_offset+0x9c>)
 8002826:	fb82 1203 	smull	r1, r2, r2, r3
 800282a:	10d2      	asrs	r2, r2, #3
 800282c:	17db      	asrs	r3, r3, #31
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <calibrate_offset+0xa4>)
 8002832:	6013      	str	r3, [r2, #0]
    z_offset = z_tmp / ITG3205_NUM_SAMPLES;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a07      	ldr	r2, [pc, #28]	@ (8002854 <calibrate_offset+0x9c>)
 8002838:	fb82 1203 	smull	r1, r2, r2, r3
 800283c:	10d2      	asrs	r2, r2, #3
 800283e:	17db      	asrs	r3, r3, #31
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	4a07      	ldr	r2, [pc, #28]	@ (8002860 <calibrate_offset+0xa8>)
 8002844:	6013      	str	r3, [r2, #0]
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000c58 	.word	0x20000c58
 8002854:	66666667 	.word	0x66666667
 8002858:	20000c9c 	.word	0x20000c9c
 800285c:	20000ca0 	.word	0x20000ca0
 8002860:	20000ca4 	.word	0x20000ca4

08002864 <init_giro>:

uint8_t init_giro()
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af04      	add	r7, sp, #16
    uint8_t tmp = ITG3205_DIV;
 800286a:	2304      	movs	r3, #4
 800286c:	71fb      	strb	r3, [r7, #7]
    imu.giro_x = imu.giro_y = imu.giro_z = 0;
 800286e:	4b33      	ldr	r3, [pc, #204]	@ (800293c <init_giro+0xd8>)
 8002870:	2200      	movs	r2, #0
 8002872:	81da      	strh	r2, [r3, #14]
 8002874:	4b31      	ldr	r3, [pc, #196]	@ (800293c <init_giro+0xd8>)
 8002876:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800287a:	4b30      	ldr	r3, [pc, #192]	@ (800293c <init_giro+0xd8>)
 800287c:	819a      	strh	r2, [r3, #12]
 800287e:	4b2f      	ldr	r3, [pc, #188]	@ (800293c <init_giro+0xd8>)
 8002880:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002884:	4b2d      	ldr	r3, [pc, #180]	@ (800293c <init_giro+0xd8>)
 8002886:	815a      	strh	r2, [r3, #10]

    // Configurar divisor de muestreo
    if (HAL_I2C_Mem_Write(imu.hi2c, ITG3205, ITG3205_SMPLRT_DIV, I2C_MEM_ADDR_SIZE_8BIT, &tmp, 1, HAL_MAX_DELAY) != HAL_OK)
 8002888:	4b2c      	ldr	r3, [pc, #176]	@ (800293c <init_giro+0xd8>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	f04f 33ff 	mov.w	r3, #4294967295
 8002890:	9302      	str	r3, [sp, #8]
 8002892:	2301      	movs	r3, #1
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2301      	movs	r3, #1
 800289c:	2215      	movs	r2, #21
 800289e:	21d0      	movs	r1, #208	@ 0xd0
 80028a0:	f004 f996 	bl	8006bd0 <HAL_I2C_Mem_Write>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <init_giro+0x4a>
        return 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e041      	b.n	8002932 <init_giro+0xce>

    tmp = ITG3205_FS_CFG;
 80028ae:	231d      	movs	r3, #29
 80028b0:	71fb      	strb	r3, [r7, #7]
    // Configurar frecuencia de corte y escala completa
    if (HAL_I2C_Mem_Write(imu.hi2c, ITG3205, ITG3205_DLPF_FS, I2C_MEM_ADDR_SIZE_8BIT, &tmp, 1, HAL_MAX_DELAY) != HAL_OK)
 80028b2:	4b22      	ldr	r3, [pc, #136]	@ (800293c <init_giro+0xd8>)
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	9302      	str	r3, [sp, #8]
 80028bc:	2301      	movs	r3, #1
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2301      	movs	r3, #1
 80028c6:	2216      	movs	r2, #22
 80028c8:	21d0      	movs	r1, #208	@ 0xd0
 80028ca:	f004 f981 	bl	8006bd0 <HAL_I2C_Mem_Write>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <init_giro+0x74>
        return 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e02c      	b.n	8002932 <init_giro+0xce>

    tmp = ITG3205_DIS_INT;
 80028d8:	2300      	movs	r3, #0
 80028da:	71fb      	strb	r3, [r7, #7]
    // Deshabilitar interrupciones
    if (HAL_I2C_Mem_Write(imu.hi2c, ITG3205, ITG3205_INT, I2C_MEM_ADDR_SIZE_8BIT, &tmp, 1, HAL_MAX_DELAY) != HAL_OK)
 80028dc:	4b17      	ldr	r3, [pc, #92]	@ (800293c <init_giro+0xd8>)
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	9302      	str	r3, [sp, #8]
 80028e6:	2301      	movs	r3, #1
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2301      	movs	r3, #1
 80028f0:	2217      	movs	r2, #23
 80028f2:	21d0      	movs	r1, #208	@ 0xd0
 80028f4:	f004 f96c 	bl	8006bd0 <HAL_I2C_Mem_Write>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <init_giro+0x9e>
        return 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	e017      	b.n	8002932 <init_giro+0xce>

    tmp = ITG3205_PWR_CFG;
 8002902:	2300      	movs	r3, #0
 8002904:	71fb      	strb	r3, [r7, #7]
    // Usar oscilador interno como fuente de reloj
    if (HAL_I2C_Mem_Write(imu.hi2c, ITG3205, ITG3205_PWR, I2C_MEM_ADDR_SIZE_8BIT, &tmp, 1, HAL_MAX_DELAY) != HAL_OK)
 8002906:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <init_giro+0xd8>)
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	2301      	movs	r3, #1
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	1dfb      	adds	r3, r7, #7
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2301      	movs	r3, #1
 800291a:	223e      	movs	r2, #62	@ 0x3e
 800291c:	21d0      	movs	r1, #208	@ 0xd0
 800291e:	f004 f957 	bl	8006bd0 <HAL_I2C_Mem_Write>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <init_giro+0xc8>
        return 0;
 8002928:	2300      	movs	r3, #0
 800292a:	e002      	b.n	8002932 <init_giro+0xce>

    calibrate_offset();
 800292c:	f7ff ff44 	bl	80027b8 <calibrate_offset>

    return 1;
 8002930:	2301      	movs	r3, #1
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000c58 	.word	0x20000c58

08002940 <init_bruj>:

uint8_t init_bruj()
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af04      	add	r7, sp, #16
          if (HAL_I2C_Mem_Write(imu.hi2c, HMC5883, Config_Reg_B, I2C_MEM_ADDR_SIZE_8BIT, &tmp, 1, HAL_MAX_DELAY) != HAL_OK)
        	  return 0;

    return 1;
*/
	uint8_t tmp = HMC5883_MODECFG;
 8002946:	2300      	movs	r3, #0
 8002948:	71fb      	strb	r3, [r7, #7]

	   imu.bruj_x =imu.bruj_y =imu.bruj_z = 0;
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <init_bruj+0x54>)
 800294c:	2200      	movs	r2, #0
 800294e:	829a      	strh	r2, [r3, #20]
 8002950:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <init_bruj+0x54>)
 8002952:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8002956:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <init_bruj+0x54>)
 8002958:	825a      	strh	r2, [r3, #18]
 800295a:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <init_bruj+0x54>)
 800295c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <init_bruj+0x54>)
 8002962:	821a      	strh	r2, [r3, #16]

	   if (HAL_I2C_Mem_Write(imu.hi2c, HMC5883, HMC5883_MODEREG, I2C_MEM_ADDR_SIZE_8BIT, &tmp, 1, HAL_MAX_DELAY) != HAL_OK)
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <init_bruj+0x54>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
 800296c:	9302      	str	r3, [sp, #8]
 800296e:	2301      	movs	r3, #1
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	1dfb      	adds	r3, r7, #7
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2301      	movs	r3, #1
 8002978:	2202      	movs	r2, #2
 800297a:	211a      	movs	r1, #26
 800297c:	f004 f928 	bl	8006bd0 <HAL_I2C_Mem_Write>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <init_bruj+0x4a>
	    return 0;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <init_bruj+0x4c>

	    return 1;
 800298a:	2301      	movs	r3, #1

}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000c58 	.word	0x20000c58

08002998 <GY85_Init>:

uint8_t GY85_Init()
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
    imu.hi2c = &imu_i2c;
 800299c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a10 <GY85_Init+0x78>)
 800299e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a14 <GY85_Init+0x7c>)
 80029a0:	601a      	str	r2, [r3, #0]
#ifdef tiempo_muestreo
muestreo=tiempo_muestreo/1000.0;//PASA A SEGUNDOS EL TIEMPO DE MUESTREO
#else
muestreo =(float)TIMIMU->ARR/1000000.0;
 80029a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a18 <GY85_Init+0x80>)
 80029a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ae:	ee17 0a90 	vmov	r0, s15
 80029b2:	f7fd fdd1 	bl	8000558 <__aeabi_f2d>
 80029b6:	a314      	add	r3, pc, #80	@ (adr r3, 8002a08 <GY85_Init+0x70>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fd ff4e 	bl	800085c <__aeabi_ddiv>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7fe f916 	bl	8000bf8 <__aeabi_d2f>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4a13      	ldr	r2, [pc, #76]	@ (8002a1c <GY85_Init+0x84>)
 80029d0:	6013      	str	r3, [r2, #0]
#endif


    if (!init_ace()) return 0;
 80029d2:	f7ff fe9b 	bl	800270c <init_ace>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <GY85_Init+0x48>
 80029dc:	2300      	movs	r3, #0
 80029de:	e00e      	b.n	80029fe <GY85_Init+0x66>
    if (!init_giro()) return 0;
 80029e0:	f7ff ff40 	bl	8002864 <init_giro>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <GY85_Init+0x56>
 80029ea:	2300      	movs	r3, #0
 80029ec:	e007      	b.n	80029fe <GY85_Init+0x66>
    if (!init_bruj()) return 0;
 80029ee:	f7ff ffa7 	bl	8002940 <init_bruj>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <GY85_Init+0x64>
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <GY85_Init+0x66>

    return 1;
 80029fc:	2301      	movs	r3, #1
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	f3af 8000 	nop.w
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	412e8480 	.word	0x412e8480
 8002a10:	20000c58 	.word	0x20000c58
 8002a14:	20000820 	.word	0x20000820
 8002a18:	40014000 	.word	0x40014000
 8002a1c:	20000c94 	.word	0x20000c94

08002a20 <GY85_Read_ace>:

uint8_t GY85_Read_ace()
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af02      	add	r7, sp, #8
    uint8_t reg_addr = ADXL345_DATA;
 8002a26:	2332      	movs	r3, #50	@ 0x32
 8002a28:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp[ADXL345_OUT_LEN];


    if (HAL_I2C_Master_Transmit(imu.hi2c, ADXL345, &reg_addr, 1, HAL_MAX_DELAY) != HAL_OK)
 8002a2a:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <GY85_Read_ace+0x8c>)
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	1dfa      	adds	r2, r7, #7
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2301      	movs	r3, #1
 8002a38:	21a6      	movs	r1, #166	@ 0xa6
 8002a3a:	f003 fd99 	bl	8006570 <HAL_I2C_Master_Transmit>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <GY85_Read_ace+0x28>
        return 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e02d      	b.n	8002aa4 <GY85_Read_ace+0x84>

    if (HAL_I2C_Master_Receive(imu.hi2c, ADXL345, tmp, ADXL345_OUT_LEN, HAL_MAX_DELAY) != HAL_OK)
 8002a48:	4b18      	ldr	r3, [pc, #96]	@ (8002aac <GY85_Read_ace+0x8c>)
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	463a      	mov	r2, r7
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2306      	movs	r3, #6
 8002a56:	21a6      	movs	r1, #166	@ 0xa6
 8002a58:	f003 fe88 	bl	800676c <HAL_I2C_Master_Receive>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <GY85_Read_ace+0x46>
        return 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e01e      	b.n	8002aa4 <GY85_Read_ace+0x84>

    imu.ace_x = (tmp[1] << 8) | tmp[0];
 8002a66:	787b      	ldrb	r3, [r7, #1]
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	b21a      	sxth	r2, r3
 8002a6e:	783b      	ldrb	r3, [r7, #0]
 8002a70:	b21b      	sxth	r3, r3
 8002a72:	4313      	orrs	r3, r2
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	4b0d      	ldr	r3, [pc, #52]	@ (8002aac <GY85_Read_ace+0x8c>)
 8002a78:	809a      	strh	r2, [r3, #4]
    imu.ace_y = (tmp[3] << 8) | tmp[2];
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	b21a      	sxth	r2, r3
 8002a82:	78bb      	ldrb	r3, [r7, #2]
 8002a84:	b21b      	sxth	r3, r3
 8002a86:	4313      	orrs	r3, r2
 8002a88:	b21a      	sxth	r2, r3
 8002a8a:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <GY85_Read_ace+0x8c>)
 8002a8c:	80da      	strh	r2, [r3, #6]
    imu.ace_z = (tmp[5] << 8) | tmp[4];
 8002a8e:	797b      	ldrb	r3, [r7, #5]
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	b21a      	sxth	r2, r3
 8002a96:	793b      	ldrb	r3, [r7, #4]
 8002a98:	b21b      	sxth	r3, r3
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	b21a      	sxth	r2, r3
 8002a9e:	4b03      	ldr	r3, [pc, #12]	@ (8002aac <GY85_Read_ace+0x8c>)
 8002aa0:	811a      	strh	r2, [r3, #8]

    return 1;
 8002aa2:	2301      	movs	r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000c58 	.word	0x20000c58

08002ab0 <GY85_Giro_flotantes>:
void  GY85_Giro_flotantes()
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
//pasando a grados por segundo
	imu.giro_x_f=imu.giro_x*GIRO_SCALE;
 8002ab4:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <GY85_Giro_flotantes+0x88>)
 8002ab6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fd3a 	bl	8000534 <__aeabi_i2d>
 8002ac0:	a31b      	add	r3, pc, #108	@ (adr r3, 8002b30 <GY85_Giro_flotantes+0x80>)
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	f7fd fd9f 	bl	8000608 <__aeabi_dmul>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f7fe f891 	bl	8000bf8 <__aeabi_d2f>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4a17      	ldr	r2, [pc, #92]	@ (8002b38 <GY85_Giro_flotantes+0x88>)
 8002ada:	6253      	str	r3, [r2, #36]	@ 0x24
	imu.giro_y_f=imu.giro_y*GIRO_SCALE;
 8002adc:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <GY85_Giro_flotantes+0x88>)
 8002ade:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fd26 	bl	8000534 <__aeabi_i2d>
 8002ae8:	a311      	add	r3, pc, #68	@ (adr r3, 8002b30 <GY85_Giro_flotantes+0x80>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fd8b 	bl	8000608 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7fe f87d 	bl	8000bf8 <__aeabi_d2f>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4a0d      	ldr	r2, [pc, #52]	@ (8002b38 <GY85_Giro_flotantes+0x88>)
 8002b02:	6293      	str	r3, [r2, #40]	@ 0x28
	imu.giro_z_f=imu.giro_z*GIRO_SCALE;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <GY85_Giro_flotantes+0x88>)
 8002b06:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fd12 	bl	8000534 <__aeabi_i2d>
 8002b10:	a307      	add	r3, pc, #28	@ (adr r3, 8002b30 <GY85_Giro_flotantes+0x80>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f7fd fd77 	bl	8000608 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f7fe f869 	bl	8000bf8 <__aeabi_d2f>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4a03      	ldr	r2, [pc, #12]	@ (8002b38 <GY85_Giro_flotantes+0x88>)
 8002b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	ada2811d 	.word	0xada2811d
 8002b34:	3fb1cf06 	.word	0x3fb1cf06
 8002b38:	20000c58 	.word	0x20000c58

08002b3c <GY85_Read_giro>:
uint8_t GY85_Read_giro()
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af02      	add	r7, sp, #8
    uint8_t reg_addr = ITG3205_DATA;
 8002b42:	231d      	movs	r3, #29
 8002b44:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp[ITG3205_OUT_LEN];

    if (HAL_I2C_Master_Transmit(imu.hi2c, ITG3205, &reg_addr, 1, HAL_MAX_DELAY) != HAL_OK)
 8002b46:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf8 <GY85_Read_giro+0xbc>)
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	1dfa      	adds	r2, r7, #7
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	2301      	movs	r3, #1
 8002b54:	21d0      	movs	r1, #208	@ 0xd0
 8002b56:	f003 fd0b 	bl	8006570 <HAL_I2C_Master_Transmit>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <GY85_Read_giro+0x28>
        return 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e044      	b.n	8002bee <GY85_Read_giro+0xb2>

    if (HAL_I2C_Master_Receive(imu.hi2c, ITG3205, tmp, ITG3205_OUT_LEN, HAL_MAX_DELAY) != HAL_OK)
 8002b64:	4b24      	ldr	r3, [pc, #144]	@ (8002bf8 <GY85_Read_giro+0xbc>)
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	463a      	mov	r2, r7
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2306      	movs	r3, #6
 8002b72:	21d0      	movs	r1, #208	@ 0xd0
 8002b74:	f003 fdfa 	bl	800676c <HAL_I2C_Master_Receive>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <GY85_Read_giro+0x46>
        return 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e035      	b.n	8002bee <GY85_Read_giro+0xb2>

    imu.giro_x = ((tmp[0] << 8) | tmp[1]) - x_offset;
 8002b82:	783b      	ldrb	r3, [r7, #0]
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b21a      	sxth	r2, r3
 8002b8a:	787b      	ldrb	r3, [r7, #1]
 8002b8c:	b21b      	sxth	r3, r3
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	4b19      	ldr	r3, [pc, #100]	@ (8002bfc <GY85_Read_giro+0xc0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	b21a      	sxth	r2, r3
 8002ba0:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <GY85_Read_giro+0xbc>)
 8002ba2:	815a      	strh	r2, [r3, #10]
    imu.giro_y = ((tmp[2] << 8) | tmp[3]) - y_offset;
 8002ba4:	78bb      	ldrb	r3, [r7, #2]
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	b21a      	sxth	r2, r3
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <GY85_Read_giro+0xc4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	b21a      	sxth	r2, r3
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <GY85_Read_giro+0xbc>)
 8002bc4:	819a      	strh	r2, [r3, #12]
    imu.giro_z = ((tmp[4] << 8) | tmp[5]) - z_offset;
 8002bc6:	793b      	ldrb	r3, [r7, #4]
 8002bc8:	b21b      	sxth	r3, r3
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	b21a      	sxth	r2, r3
 8002bce:	797b      	ldrb	r3, [r7, #5]
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c04 <GY85_Read_giro+0xc8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	b21a      	sxth	r2, r3
 8002be4:	4b04      	ldr	r3, [pc, #16]	@ (8002bf8 <GY85_Read_giro+0xbc>)
 8002be6:	81da      	strh	r2, [r3, #14]
    GY85_Giro_flotantes();
 8002be8:	f7ff ff62 	bl	8002ab0 <GY85_Giro_flotantes>
    return 1;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000c58 	.word	0x20000c58
 8002bfc:	20000c9c 	.word	0x20000c9c
 8002c00:	20000ca0 	.word	0x20000ca0
 8002c04:	20000ca4 	.word	0x20000ca4

08002c08 <GY85_Read_bruj>:

uint8_t GY85_Read_bruj()
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af04      	add	r7, sp, #16
    uint8_t reg_addr = HMC5883_DATA;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	71fb      	strb	r3, [r7, #7]
        return 0;

    if (HAL_I2C_Master_Receive(imu.hi2c, HMC5883, tmp, HMC5883_OUT_LEN, HAL_MAX_DELAY) != HAL_OK)
        return 0;
*/
    HAL_I2C_Mem_Read(imu.hi2c,HMC5883, reg_addr, I2C_MEMADD_SIZE_8BIT, &tmp, HMC5883_OUT_LEN, HAL_MAX_DELAY);
 8002c12:	4b17      	ldr	r3, [pc, #92]	@ (8002c70 <GY85_Read_bruj+0x68>)
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	2306      	movs	r3, #6
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	463b      	mov	r3, r7
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2301      	movs	r3, #1
 8002c2a:	211a      	movs	r1, #26
 8002c2c:	f004 f8ca 	bl	8006dc4 <HAL_I2C_Mem_Read>
    imu.bruj_x = (uint16_t)(tmp[0] << 8) | tmp[1];
 8002c30:	783b      	ldrb	r3, [r7, #0]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	787a      	ldrb	r2, [r7, #1]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	b21a      	sxth	r2, r3
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <GY85_Read_bruj+0x68>)
 8002c40:	821a      	strh	r2, [r3, #16]
    imu.bruj_z = (uint16_t)(tmp[2] << 8) | tmp[3];
 8002c42:	78bb      	ldrb	r3, [r7, #2]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b21a      	sxth	r2, r3
 8002c50:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <GY85_Read_bruj+0x68>)
 8002c52:	829a      	strh	r2, [r3, #20]
    imu.bruj_y = (uint16_t)(tmp[4] << 8) | tmp[5];
 8002c54:	793b      	ldrb	r3, [r7, #4]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	797a      	ldrb	r2, [r7, #5]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b21a      	sxth	r2, r3
 8002c62:	4b03      	ldr	r3, [pc, #12]	@ (8002c70 <GY85_Read_bruj+0x68>)
 8002c64:	825a      	strh	r2, [r3, #18]

    return 1;
 8002c66:	2301      	movs	r3, #1
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000c58 	.word	0x20000c58

08002c74 <GY85_Ace_angulos>:
}



	void GY85_Ace_angulos()
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
    float denom = sqrtf(imu.ace_y * imu.ace_y + imu.ace_z * imu.ace_z);
 8002c7a:	4b40      	ldr	r3, [pc, #256]	@ (8002d7c <GY85_Ace_angulos+0x108>)
 8002c7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b3e      	ldr	r3, [pc, #248]	@ (8002d7c <GY85_Ace_angulos+0x108>)
 8002c84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c88:	fb03 f202 	mul.w	r2, r3, r2
 8002c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d7c <GY85_Ace_angulos+0x108>)
 8002c8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c92:	4619      	mov	r1, r3
 8002c94:	4b39      	ldr	r3, [pc, #228]	@ (8002d7c <GY85_Ace_angulos+0x108>)
 8002c96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cac:	f00d ffa4 	bl	8010bf8 <sqrtf>
 8002cb0:	ed87 0a01 	vstr	s0, [r7, #4]
    if (denom < EPSILON) denom = EPSILON;
 8002cb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cb8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002d80 <GY85_Ace_angulos+0x10c>
 8002cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	d501      	bpl.n	8002cca <GY85_Ace_angulos+0x56>
 8002cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d84 <GY85_Ace_angulos+0x110>)
 8002cc8:	607b      	str	r3, [r7, #4]

    acel_pitch = atan2f(imu.ace_x, denom) * RAD_TO_DEG;
 8002cca:	4b2c      	ldr	r3, [pc, #176]	@ (8002d7c <GY85_Ace_angulos+0x108>)
 8002ccc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cd8:	edd7 0a01 	vldr	s1, [r7, #4]
 8002cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce0:	f00d ff02 	bl	8010ae8 <atan2f>
 8002ce4:	eef0 7a40 	vmov.f32	s15, s0
 8002ce8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002d88 <GY85_Ace_angulos+0x114>
 8002cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf0:	4b26      	ldr	r3, [pc, #152]	@ (8002d8c <GY85_Ace_angulos+0x118>)
 8002cf2:	edc3 7a00 	vstr	s15, [r3]

    denom = sqrtf(imu.ace_x * imu.ace_x + imu.ace_z * imu.ace_z);
 8002cf6:	4b21      	ldr	r3, [pc, #132]	@ (8002d7c <GY85_Ace_angulos+0x108>)
 8002cf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <GY85_Ace_angulos+0x108>)
 8002d00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d04:	fb03 f202 	mul.w	r2, r3, r2
 8002d08:	4b1c      	ldr	r3, [pc, #112]	@ (8002d7c <GY85_Ace_angulos+0x108>)
 8002d0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <GY85_Ace_angulos+0x108>)
 8002d12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d24:	eeb0 0a67 	vmov.f32	s0, s15
 8002d28:	f00d ff66 	bl	8010bf8 <sqrtf>
 8002d2c:	ed87 0a01 	vstr	s0, [r7, #4]
    if (denom < EPSILON) denom = EPSILON;
 8002d30:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d34:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002d80 <GY85_Ace_angulos+0x10c>
 8002d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	d501      	bpl.n	8002d46 <GY85_Ace_angulos+0xd2>
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <GY85_Ace_angulos+0x110>)
 8002d44:	607b      	str	r3, [r7, #4]

    acel_roll = atan2f(imu.ace_y, denom) * RAD_TO_DEG;
 8002d46:	4b0d      	ldr	r3, [pc, #52]	@ (8002d7c <GY85_Ace_angulos+0x108>)
 8002d48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d54:	edd7 0a01 	vldr	s1, [r7, #4]
 8002d58:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5c:	f00d fec4 	bl	8010ae8 <atan2f>
 8002d60:	eef0 7a40 	vmov.f32	s15, s0
 8002d64:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002d88 <GY85_Ace_angulos+0x114>
 8002d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d6c:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <GY85_Ace_angulos+0x11c>)
 8002d6e:	edc3 7a00 	vstr	s15, [r3]
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000c58 	.word	0x20000c58
 8002d80:	358637bd 	.word	0x358637bd
 8002d84:	358637bd 	.word	0x358637bd
 8002d88:	42652ee1 	.word	0x42652ee1
 8002d8c:	20000cac 	.word	0x20000cac
 8002d90:	20000ca8 	.word	0x20000ca8

08002d94 <GY85_Giro_angulos>:

	void GY85_Giro_angulos()
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0

	// Integración simple de giroscopio (Euler)
	giro_roll += imu.giro_x_f * muestreo;
 8002d98:	4b1a      	ldr	r3, [pc, #104]	@ (8002e04 <GY85_Giro_angulos+0x70>)
 8002d9a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <GY85_Giro_angulos+0x74>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da8:	4b18      	ldr	r3, [pc, #96]	@ (8002e0c <GY85_Giro_angulos+0x78>)
 8002daa:	edd3 7a00 	vldr	s15, [r3]
 8002dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db2:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <GY85_Giro_angulos+0x78>)
 8002db4:	edc3 7a00 	vstr	s15, [r3]
	giro_pitch += imu.giro_y_f *muestreo;
 8002db8:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <GY85_Giro_angulos+0x70>)
 8002dba:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002dbe:	4b12      	ldr	r3, [pc, #72]	@ (8002e08 <GY85_Giro_angulos+0x74>)
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc8:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <GY85_Giro_angulos+0x7c>)
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <GY85_Giro_angulos+0x7c>)
 8002dd4:	edc3 7a00 	vstr	s15, [r3]
	giro_yaw += imu.giro_z_f * muestreo;
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e04 <GY85_Giro_angulos+0x70>)
 8002dda:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <GY85_Giro_angulos+0x74>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002de8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <GY85_Giro_angulos+0x80>)
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df2:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <GY85_Giro_angulos+0x80>)
 8002df4:	edc3 7a00 	vstr	s15, [r3]

}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000c58 	.word	0x20000c58
 8002e08:	20000c94 	.word	0x20000c94
 8002e0c:	20000cb0 	.word	0x20000cb0
 8002e10:	20000cb4 	.word	0x20000cb4
 8002e14:	20000cb8 	.word	0x20000cb8

08002e18 <Filtro_Complementario>:
	     heading += 360.0f;

	}

void Filtro_Complementario()
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
	  //cosntantes del filtro  peso dado al acelelometro
	    const float alpha = 0.95;
 8002e1e:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <Filtro_Complementario+0x9c>)
 8002e20:	607b      	str	r3, [r7, #4]
	    compAngle_Roll = alpha * (compAngle_Roll + imu.giro_x_f*muestreo) +   (1-alpha) * acel_roll; // Calculate the angle using a Complimentary filter
 8002e22:	4b25      	ldr	r3, [pc, #148]	@ (8002eb8 <Filtro_Complementario+0xa0>)
 8002e24:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002e28:	4b24      	ldr	r3, [pc, #144]	@ (8002ebc <Filtro_Complementario+0xa4>)
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e32:	4b23      	ldr	r3, [pc, #140]	@ (8002ec0 <Filtro_Complementario+0xa8>)
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e48:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec4 <Filtro_Complementario+0xac>)
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5e:	4b18      	ldr	r3, [pc, #96]	@ (8002ec0 <Filtro_Complementario+0xa8>)
 8002e60:	edc3 7a00 	vstr	s15, [r3]
	    compAngle_Pitch = alpha * (compAngle_Pitch + imu.giro_y_f*muestreo) + (1-alpha) * acel_pitch;
 8002e64:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <Filtro_Complementario+0xa0>)
 8002e66:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002e6a:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <Filtro_Complementario+0xa4>)
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e74:	4b14      	ldr	r3, [pc, #80]	@ (8002ec8 <Filtro_Complementario+0xb0>)
 8002e76:	edd3 7a00 	vldr	s15, [r3]
 8002e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <Filtro_Complementario+0xb4>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea0:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <Filtro_Complementario+0xb0>)
 8002ea2:	edc3 7a00 	vstr	s15, [r3]
	}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	3f733333 	.word	0x3f733333
 8002eb8:	20000c58 	.word	0x20000c58
 8002ebc:	20000c94 	.word	0x20000c94
 8002ec0:	20000cbc 	.word	0x20000cbc
 8002ec4:	20000ca8 	.word	0x20000ca8
 8002ec8:	20000cc0 	.word	0x20000cc0
 8002ecc:	20000cac 	.word	0x20000cac

08002ed0 <filtro_kalman>:


void  filtro_kalman()
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	kalman_roll=Kalman_Update(&kalman_roll_, acel_roll, imu.giro_x_f, muestreo);
 8002ed4:	4b17      	ldr	r3, [pc, #92]	@ (8002f34 <filtro_kalman+0x64>)
 8002ed6:	edd3 7a00 	vldr	s15, [r3]
 8002eda:	4b17      	ldr	r3, [pc, #92]	@ (8002f38 <filtro_kalman+0x68>)
 8002edc:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002ee0:	4b16      	ldr	r3, [pc, #88]	@ (8002f3c <filtro_kalman+0x6c>)
 8002ee2:	edd3 6a00 	vldr	s13, [r3]
 8002ee6:	eeb0 1a66 	vmov.f32	s2, s13
 8002eea:	eef0 0a47 	vmov.f32	s1, s14
 8002eee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef2:	4813      	ldr	r0, [pc, #76]	@ (8002f40 <filtro_kalman+0x70>)
 8002ef4:	f001 fc42 	bl	800477c <Kalman_Update>
 8002ef8:	eef0 7a40 	vmov.f32	s15, s0
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <filtro_kalman+0x74>)
 8002efe:	edc3 7a00 	vstr	s15, [r3]
	kalman_pitch=Kalman_Update(&kalman_pitch_, acel_pitch, imu.giro_y_f, muestreo);
 8002f02:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <filtro_kalman+0x78>)
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <filtro_kalman+0x68>)
 8002f0a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <filtro_kalman+0x6c>)
 8002f10:	edd3 6a00 	vldr	s13, [r3]
 8002f14:	eeb0 1a66 	vmov.f32	s2, s13
 8002f18:	eef0 0a47 	vmov.f32	s1, s14
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	480a      	ldr	r0, [pc, #40]	@ (8002f4c <filtro_kalman+0x7c>)
 8002f22:	f001 fc2b 	bl	800477c <Kalman_Update>
 8002f26:	eef0 7a40 	vmov.f32	s15, s0
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <filtro_kalman+0x80>)
 8002f2c:	edc3 7a00 	vstr	s15, [r3]


}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000ca8 	.word	0x20000ca8
 8002f38:	20000c58 	.word	0x20000c58
 8002f3c:	20000c94 	.word	0x20000c94
 8002f40:	20000f54 	.word	0x20000f54
 8002f44:	20000f84 	.word	0x20000f84
 8002f48:	20000cac 	.word	0x20000cac
 8002f4c:	20000f6c 	.word	0x20000f6c
 8002f50:	20000f88 	.word	0x20000f88

08002f54 <uartRX_it_idle_dma_init>:



//se llama solo una vez para  crear el buffer trama rx del usart deseado
void uartRX_it_idle_dma_init(UARTRXS *SERIAL)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
// Asigna memoria
SERIAL->trama_rx = malloc(SERIAL->sizeT);  //reserva memoria
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	891b      	ldrh	r3, [r3, #8]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f007 fda3 	bl	800aaac <malloc>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	@ 0x24
 memset(SERIAL->trama_rx,0,SERIAL->sizeT-1);//limpia el  buffer
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	891b      	ldrh	r3, [r3, #8]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	f009 f803 	bl	800bf86 <memset>
 SERIAL->flag_rx=0;// LIMPIA LA BANDERA
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	771a      	strb	r2, [r3, #28]

 //  en STM32F
 *SERIAL->SR &= ~( UART_FLAG_RXNE | UART_FLAG_ORE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f022 0228 	bic.w	r2, r2, #40	@ 0x28
 8002f94:	601a      	str	r2, [r3, #0]
 uint8_t  dummy = *SERIAL->DR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	73fb      	strb	r3, [r7, #15]
 // en STM32G y stmH
    // uint8_t dummy = *SERIAL->RDR;
    // *SERIAL->ICR = USART_ICR_ORECF;  // Escribir 1 en ORECF para limpiar ORE


 HAL_UARTEx_ReceiveToIdle_DMA(SERIAL->huart, (uint8_t*)SERIAL->trama_rx, SERIAL->sizeT);//inica la recepcion por idle
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	891b      	ldrh	r3, [r3, #8]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f006 fc14 	bl	80097d8 <HAL_UARTEx_ReceiveToIdle_DMA>

}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <uartRX_DMA_Re_init>:
	HAL_UART_DMAStop(SERIAL->huart);  //para la recepcion temporarmente
}

//si ya se creo el buffer trama rx  usar solo este
void  uartRX_DMA_Re_init(UARTRXS *SERIAL)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

	memset(SERIAL->trama_rx,0,SERIAL->sizeT-1);//limpia el  buffer
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	891b      	ldrh	r3, [r3, #8]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2100      	movs	r1, #0
 8002fce:	f008 ffda 	bl	800bf86 <memset>

	SERIAL->flag_rx=0;// LIMPIA LA BANDERA
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
 //  en STM32F
 *SERIAL->SR &= ~( UART_FLAG_RXNE | UART_FLAG_ORE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f022 0228 	bic.w	r2, r2, #40	@ 0x28
 8002fe6:	601a      	str	r2, [r3, #0]
 uint8_t  dummy = *SERIAL->DR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	73fb      	strb	r3, [r7, #15]
 // en STM32G y stmH
     // uint8_t dummy = *SERIAL->RDR;
     // *SERIAL->ICR = USART_ICR_ORECF;  // Escribir 1 en ORECF para limpiar ORE


 HAL_UARTEx_ReceiveToIdle_DMA(SERIAL->huart, (uint8_t*)SERIAL->trama_rx, SERIAL->sizeT);//inica la recepcion por idle
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	891b      	ldrh	r3, [r3, #8]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f006 fbeb 	bl	80097d8 <HAL_UARTEx_ReceiveToIdle_DMA>

}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <uartRX_INTERRUPT>:
 void uartRX_INTERRUPT(UART_HandleTypeDef *huart,uint16_t sizex)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	807b      	strh	r3, [r7, #2]
		HAL_UART_DMAStop(UARTRX2.huart);  //para la recepcion temporarmente
	     UARTRX2.num_datos=sizex;
	     UARTRX2.flag_rx=1;
		 }
*/
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_UARTEx_RxEventCallback>:
#include "gps.h"

//incluir librerias de  interrpcines d euart usados

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	807b      	strh	r3, [r7, #2]
//llamar interrupciones de usart
	 uartRX_INTERRUPT(huart,Size);
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ffe9 	bl	800300a <uartRX_INTERRUPT>
	 GPS_Interrupt(huart, Size);
 8003038:	887b      	ldrh	r3, [r7, #2]
 800303a:	4619      	mov	r1, r3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f001 fb59 	bl	80046f4 <GPS_Interrupt>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <ADC_Read>:


uint16_t adc_codigo[ adc_canales];

uint16_t ADC_Read(ADC_HandleTypeDef  *adc_n)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adc_n);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f001 fd98 	bl	8004b88 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc_n,1000);
 8003058:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f001 fe7a 	bl	8004d56 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(adc_n);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f001 fe44 	bl	8004cf0 <HAL_ADC_Stop>
	return (HAL_ADC_GetValue(adc_n));
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f002 f80f 	bl	800508c <HAL_ADC_GetValue>
 800306e:	4603      	mov	r3, r0
 8003070:	b29b      	uxth	r3, r3
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2203      	movs	r2, #3
 8003086:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2203      	movs	r2, #3
 8003092:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2203      	movs	r2, #3
 8003098:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2203      	movs	r2, #3
 800309e:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2203      	movs	r2, #3
 80030a4:	715a      	strb	r2, [r3, #5]
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08a      	sub	sp, #40	@ 0x28
 80030b6:	af04      	add	r7, sp, #16
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	460b      	mov	r3, r1
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80030cc:	7afb      	ldrb	r3, [r7, #11]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	8af9      	ldrh	r1, [r7, #22]
 80030d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030d6:	9302      	str	r3, [sp, #8]
 80030d8:	2302      	movs	r3, #2
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	2301      	movs	r3, #1
 80030e4:	f003 fe6e 	bl	8006dc4 <HAL_I2C_Mem_Read>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <read_register16+0x56>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80030ee:	7d7b      	ldrb	r3, [r7, #21]
 80030f0:	b21b      	sxth	r3, r3
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	b21a      	sxth	r2, r3
 80030f6:	7d3b      	ldrb	r3, [r7, #20]
 80030f8:	b21b      	sxth	r3, r3
 80030fa:	4313      	orrs	r3, r2
 80030fc:	b21b      	sxth	r3, r3
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	801a      	strh	r2, [r3, #0]
		return true;
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <read_register16+0x58>
	} else
		return false;
 8003108:	2300      	movs	r3, #0

}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8003112:	b590      	push	{r4, r7, lr}
 8003114:	b08b      	sub	sp, #44	@ 0x2c
 8003116:	af04      	add	r7, sp, #16
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	461a      	mov	r2, r3
 800311e:	460b      	mov	r3, r1
 8003120:	72fb      	strb	r3, [r7, #11]
 8003122:	4613      	mov	r3, r2
 8003124:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003132:	7afb      	ldrb	r3, [r7, #11]
 8003134:	b29a      	uxth	r2, r3
 8003136:	7abb      	ldrb	r3, [r7, #10]
 8003138:	b29b      	uxth	r3, r3
 800313a:	8af9      	ldrh	r1, [r7, #22]
 800313c:	f241 3488 	movw	r4, #5000	@ 0x1388
 8003140:	9402      	str	r4, [sp, #8]
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2301      	movs	r3, #1
 800314a:	f003 fe3b 	bl	8006dc4 <HAL_I2C_Mem_Read>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <read_data+0x46>
		return 0;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <read_data+0x48>
	else
		return 1;
 8003158:	2301      	movs	r3, #1

}
 800315a:	4618      	mov	r0, r3
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd90      	pop	{r4, r7, pc}

08003162 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	461a      	mov	r2, r3
 800316e:	2188      	movs	r1, #136	@ 0x88
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff9e 	bl	80030b2 <read_register16>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d06f      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3302      	adds	r3, #2
 8003180:	461a      	mov	r2, r3
 8003182:	218a      	movs	r1, #138	@ 0x8a
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff94 	bl	80030b2 <read_register16>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d065      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	461a      	mov	r2, r3
 8003196:	218c      	movs	r1, #140	@ 0x8c
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff8a 	bl	80030b2 <read_register16>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d05b      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3306      	adds	r3, #6
 80031a8:	461a      	mov	r2, r3
 80031aa:	218e      	movs	r1, #142	@ 0x8e
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ff80 	bl	80030b2 <read_register16>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d051      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3308      	adds	r3, #8
 80031bc:	461a      	mov	r2, r3
 80031be:	2190      	movs	r1, #144	@ 0x90
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ff76 	bl	80030b2 <read_register16>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d047      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	330a      	adds	r3, #10
 80031d0:	461a      	mov	r2, r3
 80031d2:	2192      	movs	r1, #146	@ 0x92
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff6c 	bl	80030b2 <read_register16>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d03d      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	330c      	adds	r3, #12
 80031e4:	461a      	mov	r2, r3
 80031e6:	2194      	movs	r1, #148	@ 0x94
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff62 	bl	80030b2 <read_register16>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d033      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	330e      	adds	r3, #14
 80031f8:	461a      	mov	r2, r3
 80031fa:	2196      	movs	r1, #150	@ 0x96
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ff58 	bl	80030b2 <read_register16>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d029      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3310      	adds	r3, #16
 800320c:	461a      	mov	r2, r3
 800320e:	2198      	movs	r1, #152	@ 0x98
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff4e 	bl	80030b2 <read_register16>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01f      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3312      	adds	r3, #18
 8003220:	461a      	mov	r2, r3
 8003222:	219a      	movs	r1, #154	@ 0x9a
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff44 	bl	80030b2 <read_register16>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d015      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3314      	adds	r3, #20
 8003234:	461a      	mov	r2, r3
 8003236:	219c      	movs	r1, #156	@ 0x9c
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ff3a 	bl	80030b2 <read_register16>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00b      	beq.n	800325c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8003248:	461a      	mov	r2, r3
 800324a:	219e      	movs	r1, #158	@ 0x9e
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff ff30 	bl	80030b2 <read_register16>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <read_calibration_data+0xfa>

		return true;
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <read_calibration_data+0xfc>
	}

	return false;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f103 0218 	add.w	r2, r3, #24
 8003274:	2301      	movs	r3, #1
 8003276:	21a1      	movs	r1, #161	@ 0xa1
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff4a 	bl	8003112 <read_data>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d14c      	bne.n	800331e <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	331a      	adds	r3, #26
 8003288:	461a      	mov	r2, r3
 800328a:	21e1      	movs	r1, #225	@ 0xe1
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff10 	bl	80030b2 <read_register16>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d042      	beq.n	800331e <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f103 021c 	add.w	r2, r3, #28
 800329e:	2301      	movs	r3, #1
 80032a0:	21e3      	movs	r1, #227	@ 0xe3
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ff35 	bl	8003112 <read_data>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d137      	bne.n	800331e <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 80032ae:	f107 030e 	add.w	r3, r7, #14
 80032b2:	461a      	mov	r2, r3
 80032b4:	21e4      	movs	r1, #228	@ 0xe4
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff fefb 	bl	80030b2 <read_register16>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d02d      	beq.n	800331e <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	461a      	mov	r2, r3
 80032c8:	21e5      	movs	r1, #229	@ 0xe5
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff fef1 	bl	80030b2 <read_register16>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d023      	beq.n	800331e <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80032dc:	2301      	movs	r3, #1
 80032de:	21e7      	movs	r1, #231	@ 0xe7
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff16 	bl	8003112 <read_data>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d118      	bne.n	800331e <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80032ec:	89fb      	ldrh	r3, [r7, #14]
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	b21b      	sxth	r3, r3
 80032f4:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80032f8:	b21a      	sxth	r2, r3
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	121b      	asrs	r3, r3, #8
 80032fe:	b21b      	sxth	r3, r3
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	b21b      	sxth	r3, r3
 8003306:	4313      	orrs	r3, r2
 8003308:	b21a      	sxth	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800330e:	89bb      	ldrh	r3, [r7, #12]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	b29b      	uxth	r3, r3
 8003314:	b21a      	sxth	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	841a      	strh	r2, [r3, #32]

		return true;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <read_hum_calibration_data+0xba>
	}

	return false;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af04      	add	r7, sp, #16
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	70fb      	strb	r3, [r7, #3]
 8003334:	4613      	mov	r3, r2
 8003336:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	b29a      	uxth	r2, r3
 8003348:	89f9      	ldrh	r1, [r7, #14]
 800334a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	2301      	movs	r3, #1
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	1cbb      	adds	r3, r7, #2
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2301      	movs	r3, #1
 800335a:	f003 fc39 	bl	8006bd0 <HAL_I2C_Mem_Write>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <write_register8+0x40>
		return false;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <write_register8+0x42>
	else
		return true;
 8003368:	2301      	movs	r3, #1
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003380:	2b76      	cmp	r3, #118	@ 0x76
 8003382:	d005      	beq.n	8003390 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003388:	2b77      	cmp	r3, #119	@ 0x77
 800338a:	d001      	beq.n	8003390 <bmp280_init+0x1e>

		return false;
 800338c:	2300      	movs	r3, #0
 800338e:	e09d      	b.n	80034cc <bmp280_init+0x15a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003396:	2301      	movs	r3, #1
 8003398:	21d0      	movs	r1, #208	@ 0xd0
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff feb9 	bl	8003112 <read_data>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <bmp280_init+0x38>
		return false;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e090      	b.n	80034cc <bmp280_init+0x15a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80033b0:	2b58      	cmp	r3, #88	@ 0x58
 80033b2:	d006      	beq.n	80033c2 <bmp280_init+0x50>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80033ba:	2b60      	cmp	r3, #96	@ 0x60
 80033bc:	d001      	beq.n	80033c2 <bmp280_init+0x50>

		return false;
 80033be:	2300      	movs	r3, #0
 80033c0:	e084      	b.n	80034cc <bmp280_init+0x15a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80033c2:	22b6      	movs	r2, #182	@ 0xb6
 80033c4:	21e0      	movs	r1, #224	@ 0xe0
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ffae 	bl	8003328 <write_register8>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <bmp280_init+0x64>
		return false;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e07a      	b.n	80034cc <bmp280_init+0x15a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80033d6:	f107 020c 	add.w	r2, r7, #12
 80033da:	2301      	movs	r3, #1
 80033dc:	21f3      	movs	r1, #243	@ 0xf3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff fe97 	bl	8003112 <read_data>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f5      	bne.n	80033d6 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80033ea:	7b3b      	ldrb	r3, [r7, #12]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff feb4 	bl	8003162 <read_calibration_data>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f083 0301 	eor.w	r3, r3, #1
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d100      	bne.n	8003408 <bmp280_init+0x96>
 8003406:	e001      	b.n	800340c <bmp280_init+0x9a>
		return false;
 8003408:	2300      	movs	r3, #0
 800340a:	e05f      	b.n	80034cc <bmp280_init+0x15a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003412:	2b60      	cmp	r3, #96	@ 0x60
 8003414:	d10a      	bne.n	800342c <bmp280_init+0xba>
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ff25 	bl	8003266 <read_hum_calibration_data>
 800341c:	4603      	mov	r3, r0
 800341e:	f083 0301 	eor.w	r3, r3, #1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <bmp280_init+0xba>
		return false;
 8003428:	2300      	movs	r3, #0
 800342a:	e04f      	b.n	80034cc <bmp280_init+0x15a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	795b      	ldrb	r3, [r3, #5]
 8003430:	b25b      	sxtb	r3, r3
 8003432:	015b      	lsls	r3, r3, #5
 8003434:	b25a      	sxtb	r2, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	785b      	ldrb	r3, [r3, #1]
 800343a:	b25b      	sxtb	r3, r3
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	b25b      	sxtb	r3, r3
 8003440:	4313      	orrs	r3, r2
 8003442:	b25b      	sxtb	r3, r3
 8003444:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	461a      	mov	r2, r3
 800344a:	21f5      	movs	r1, #245	@ 0xf5
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ff6b 	bl	8003328 <write_register8>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <bmp280_init+0xea>
		return false;
 8003458:	2300      	movs	r3, #0
 800345a:	e037      	b.n	80034cc <bmp280_init+0x15a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <bmp280_init+0xf8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 800346e:	b25b      	sxtb	r3, r3
 8003470:	015b      	lsls	r3, r3, #5
 8003472:	b25a      	sxtb	r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	789b      	ldrb	r3, [r3, #2]
 8003478:	b25b      	sxtb	r3, r3
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	b25b      	sxtb	r3, r3
 800347e:	4313      	orrs	r3, r2
 8003480:	b25a      	sxtb	r2, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b25b      	sxtb	r3, r3
 8003488:	4313      	orrs	r3, r2
 800348a:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800348c:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003494:	2b60      	cmp	r3, #96	@ 0x60
 8003496:	d10d      	bne.n	80034b4 <bmp280_init+0x142>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	791b      	ldrb	r3, [r3, #4]
 800349c:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800349e:	7b7b      	ldrb	r3, [r7, #13]
 80034a0:	461a      	mov	r2, r3
 80034a2:	21f2      	movs	r1, #242	@ 0xf2
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff3f 	bl	8003328 <write_register8>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <bmp280_init+0x142>
			return false;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e00b      	b.n	80034cc <bmp280_init+0x15a>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80034b4:	7bbb      	ldrb	r3, [r7, #14]
 80034b6:	461a      	mov	r2, r3
 80034b8:	21f4      	movs	r1, #244	@ 0xf4
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ff34 	bl	8003328 <write_register8>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <bmp280_init+0x158>
		return false;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <bmp280_init+0x15a>
	}

	return true;
 80034ca:	2301      	movs	r3, #1
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	10da      	asrs	r2, r3, #3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80034f6:	12db      	asrs	r3, r3, #11
 80034f8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	111b      	asrs	r3, r3, #4
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	8812      	ldrh	r2, [r2, #0]
 8003502:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	1112      	asrs	r2, r2, #4
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	8809      	ldrh	r1, [r1, #0]
 800350c:	1a52      	subs	r2, r2, r1
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800351a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800351e:	139b      	asrs	r3, r3, #14
 8003520:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	441a      	add	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	3380      	adds	r3, #128	@ 0x80
 8003538:	121b      	asrs	r3, r3, #8
}
 800353a:	4618      	mov	r0, r3
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8003546:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800354a:	b0cc      	sub	sp, #304	@ 0x130
 800354c:	af00      	add	r7, sp, #0
 800354e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8003552:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8003556:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800355a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800355e:	17da      	asrs	r2, r3, #31
 8003560:	461c      	mov	r4, r3
 8003562:	4615      	mov	r5, r2
 8003564:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8003568:	f145 3bff 	adc.w	fp, r5, #4294967295
 800356c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003570:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8003574:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003578:	fb03 f102 	mul.w	r1, r3, r2
 800357c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8003580:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003584:	fb02 f303 	mul.w	r3, r2, r3
 8003588:	18ca      	adds	r2, r1, r3
 800358a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800358e:	fba3 8903 	umull	r8, r9, r3, r3
 8003592:	eb02 0309 	add.w	r3, r2, r9
 8003596:	4699      	mov	r9, r3
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	17da      	asrs	r2, r3, #31
 80035a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035ac:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80035b0:	4603      	mov	r3, r0
 80035b2:	fb03 f209 	mul.w	r2, r3, r9
 80035b6:	460b      	mov	r3, r1
 80035b8:	fb08 f303 	mul.w	r3, r8, r3
 80035bc:	4413      	add	r3, r2
 80035be:	4602      	mov	r2, r0
 80035c0:	fba8 1202 	umull	r1, r2, r8, r2
 80035c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035c8:	460a      	mov	r2, r1
 80035ca:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80035ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035d2:	4413      	add	r3, r2
 80035d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035d8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80035dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80035e0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	17da      	asrs	r2, r3, #31
 80035f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035f4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80035f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80035fc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003600:	462a      	mov	r2, r5
 8003602:	fb02 f203 	mul.w	r2, r2, r3
 8003606:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800360a:	4621      	mov	r1, r4
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	441a      	add	r2, r3
 8003612:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003616:	4621      	mov	r1, r4
 8003618:	fba3 1301 	umull	r1, r3, r3, r1
 800361c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003620:	460b      	mov	r3, r1
 8003622:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362a:	18d3      	adds	r3, r2, r3
 800362c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003630:	f04f 0000 	mov.w	r0, #0
 8003634:	f04f 0100 	mov.w	r1, #0
 8003638:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800363c:	462b      	mov	r3, r5
 800363e:	0459      	lsls	r1, r3, #17
 8003640:	4623      	mov	r3, r4
 8003642:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8003646:	4623      	mov	r3, r4
 8003648:	0458      	lsls	r0, r3, #17
 800364a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800364e:	1814      	adds	r4, r2, r0
 8003650:	643c      	str	r4, [r7, #64]	@ 0x40
 8003652:	414b      	adcs	r3, r1
 8003654:	647b      	str	r3, [r7, #68]	@ 0x44
 8003656:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800365a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003666:	b21b      	sxth	r3, r3
 8003668:	17da      	asrs	r2, r3, #31
 800366a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800366e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800367e:	00d9      	lsls	r1, r3, #3
 8003680:	2000      	movs	r0, #0
 8003682:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003686:	1814      	adds	r4, r2, r0
 8003688:	63bc      	str	r4, [r7, #56]	@ 0x38
 800368a:	414b      	adcs	r3, r1
 800368c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800368e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003692:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003696:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800369a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800369e:	fb03 f102 	mul.w	r1, r3, r2
 80036a2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80036a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	18ca      	adds	r2, r1, r3
 80036b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80036b4:	fba3 1303 	umull	r1, r3, r3, r3
 80036b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036bc:	460b      	mov	r3, r1
 80036be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036c6:	18d3      	adds	r3, r2, r3
 80036c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80036d4:	b21b      	sxth	r3, r3
 80036d6:	17da      	asrs	r2, r3, #31
 80036d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036dc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036e0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80036e4:	462b      	mov	r3, r5
 80036e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036ea:	4642      	mov	r2, r8
 80036ec:	fb02 f203 	mul.w	r2, r2, r3
 80036f0:	464b      	mov	r3, r9
 80036f2:	4621      	mov	r1, r4
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	4622      	mov	r2, r4
 80036fc:	4641      	mov	r1, r8
 80036fe:	fba2 1201 	umull	r1, r2, r2, r1
 8003702:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003706:	460a      	mov	r2, r1
 8003708:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800370c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8003710:	4413      	add	r3, r2
 8003712:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003716:	f04f 0000 	mov.w	r0, #0
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8003722:	4623      	mov	r3, r4
 8003724:	0a18      	lsrs	r0, r3, #8
 8003726:	462b      	mov	r3, r5
 8003728:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800372c:	462b      	mov	r3, r5
 800372e:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003734:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003738:	b21b      	sxth	r3, r3
 800373a:	17da      	asrs	r2, r3, #31
 800373c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003740:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003744:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003748:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800374c:	464a      	mov	r2, r9
 800374e:	fb02 f203 	mul.w	r2, r2, r3
 8003752:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003756:	4644      	mov	r4, r8
 8003758:	fb04 f303 	mul.w	r3, r4, r3
 800375c:	441a      	add	r2, r3
 800375e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003762:	4644      	mov	r4, r8
 8003764:	fba3 4304 	umull	r4, r3, r3, r4
 8003768:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800376c:	4623      	mov	r3, r4
 800376e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003772:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003788:	464c      	mov	r4, r9
 800378a:	0323      	lsls	r3, r4, #12
 800378c:	4644      	mov	r4, r8
 800378e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8003792:	4644      	mov	r4, r8
 8003794:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003796:	1884      	adds	r4, r0, r2
 8003798:	633c      	str	r4, [r7, #48]	@ 0x30
 800379a:	eb41 0303 	adc.w	r3, r1, r3
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
 80037a0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80037a4:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80037a8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80037ac:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80037b0:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80037b4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037bc:	88db      	ldrh	r3, [r3, #6]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037c6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037ce:	462b      	mov	r3, r5
 80037d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037d4:	4642      	mov	r2, r8
 80037d6:	fb02 f203 	mul.w	r2, r2, r3
 80037da:	464b      	mov	r3, r9
 80037dc:	4621      	mov	r1, r4
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	4622      	mov	r2, r4
 80037e6:	4641      	mov	r1, r8
 80037e8:	fba2 1201 	umull	r1, r2, r2, r1
 80037ec:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80037f0:	460a      	mov	r2, r1
 80037f2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80037f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80037fa:	4413      	add	r3, r2
 80037fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800380c:	4629      	mov	r1, r5
 800380e:	104a      	asrs	r2, r1, #1
 8003810:	4629      	mov	r1, r5
 8003812:	17cb      	asrs	r3, r1, #31
 8003814:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8003818:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800381c:	4313      	orrs	r3, r2
 800381e:	d101      	bne.n	8003824 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8003820:	2300      	movs	r3, #0
 8003822:	e148      	b.n	8003ab6 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8003824:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003828:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800382c:	17da      	asrs	r2, r3, #31
 800382e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003830:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003832:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003836:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800383a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800383e:	105b      	asrs	r3, r3, #1
 8003840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003844:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003848:	07db      	lsls	r3, r3, #31
 800384a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800384e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003852:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8003856:	4621      	mov	r1, r4
 8003858:	1a89      	subs	r1, r1, r2
 800385a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800385c:	4629      	mov	r1, r5
 800385e:	eb61 0303 	sbc.w	r3, r1, r3
 8003862:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003864:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003868:	4622      	mov	r2, r4
 800386a:	462b      	mov	r3, r5
 800386c:	1891      	adds	r1, r2, r2
 800386e:	6239      	str	r1, [r7, #32]
 8003870:	415b      	adcs	r3, r3
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
 8003874:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003878:	4621      	mov	r1, r4
 800387a:	1851      	adds	r1, r2, r1
 800387c:	61b9      	str	r1, [r7, #24]
 800387e:	4629      	mov	r1, r5
 8003880:	414b      	adcs	r3, r1
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003890:	4649      	mov	r1, r9
 8003892:	018b      	lsls	r3, r1, #6
 8003894:	4641      	mov	r1, r8
 8003896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800389a:	4641      	mov	r1, r8
 800389c:	018a      	lsls	r2, r1, #6
 800389e:	4641      	mov	r1, r8
 80038a0:	1889      	adds	r1, r1, r2
 80038a2:	6139      	str	r1, [r7, #16]
 80038a4:	4649      	mov	r1, r9
 80038a6:	eb43 0101 	adc.w	r1, r3, r1
 80038aa:	6179      	str	r1, [r7, #20]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80038b8:	4649      	mov	r1, r9
 80038ba:	008b      	lsls	r3, r1, #2
 80038bc:	4641      	mov	r1, r8
 80038be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c2:	4641      	mov	r1, r8
 80038c4:	008a      	lsls	r2, r1, #2
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	4622      	mov	r2, r4
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	460b      	mov	r3, r1
 80038d4:	462a      	mov	r2, r5
 80038d6:	eb42 0303 	adc.w	r3, r2, r3
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80038e8:	4649      	mov	r1, r9
 80038ea:	008b      	lsls	r3, r1, #2
 80038ec:	4641      	mov	r1, r8
 80038ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038f2:	4641      	mov	r1, r8
 80038f4:	008a      	lsls	r2, r1, #2
 80038f6:	4610      	mov	r0, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	4622      	mov	r2, r4
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	673b      	str	r3, [r7, #112]	@ 0x70
 8003902:	462b      	mov	r3, r5
 8003904:	460a      	mov	r2, r1
 8003906:	eb42 0303 	adc.w	r3, r2, r3
 800390a:	677b      	str	r3, [r7, #116]	@ 0x74
 800390c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003910:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003914:	f7fd f9c0 	bl	8000c98 <__aeabi_ldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003924:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003928:	b21b      	sxth	r3, r3
 800392a:	17da      	asrs	r2, r3, #31
 800392c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800392e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003930:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003934:	f04f 0000 	mov.w	r0, #0
 8003938:	f04f 0100 	mov.w	r1, #0
 800393c:	0b50      	lsrs	r0, r2, #13
 800393e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003942:	1359      	asrs	r1, r3, #13
 8003944:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8003948:	462b      	mov	r3, r5
 800394a:	fb00 f203 	mul.w	r2, r0, r3
 800394e:	4623      	mov	r3, r4
 8003950:	fb03 f301 	mul.w	r3, r3, r1
 8003954:	4413      	add	r3, r2
 8003956:	4622      	mov	r2, r4
 8003958:	fba2 1200 	umull	r1, r2, r2, r0
 800395c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003960:	460a      	mov	r2, r1
 8003962:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8003966:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800396a:	4413      	add	r3, r2
 800396c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003970:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	0b50      	lsrs	r0, r2, #13
 800397e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003982:	1359      	asrs	r1, r3, #13
 8003984:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003988:	462b      	mov	r3, r5
 800398a:	fb00 f203 	mul.w	r2, r0, r3
 800398e:	4623      	mov	r3, r4
 8003990:	fb03 f301 	mul.w	r3, r3, r1
 8003994:	4413      	add	r3, r2
 8003996:	4622      	mov	r2, r4
 8003998:	fba2 1200 	umull	r1, r2, r2, r0
 800399c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039a0:	460a      	mov	r2, r1
 80039a2:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80039a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80039aa:	4413      	add	r3, r2
 80039ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80039bc:	4621      	mov	r1, r4
 80039be:	0e4a      	lsrs	r2, r1, #25
 80039c0:	4629      	mov	r1, r5
 80039c2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80039c6:	4629      	mov	r1, r5
 80039c8:	164b      	asrs	r3, r1, #25
 80039ca:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80039d6:	b21b      	sxth	r3, r3
 80039d8:	17da      	asrs	r2, r3, #31
 80039da:	663b      	str	r3, [r7, #96]	@ 0x60
 80039dc:	667a      	str	r2, [r7, #100]	@ 0x64
 80039de:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80039e2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039e6:	462a      	mov	r2, r5
 80039e8:	fb02 f203 	mul.w	r2, r2, r3
 80039ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039f0:	4621      	mov	r1, r4
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80039fc:	4621      	mov	r1, r4
 80039fe:	fba2 1201 	umull	r1, r2, r2, r1
 8003a02:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003a06:	460a      	mov	r2, r1
 8003a08:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8003a0c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003a10:	4413      	add	r3, r2
 8003a12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8003a22:	4621      	mov	r1, r4
 8003a24:	0cca      	lsrs	r2, r1, #19
 8003a26:	4629      	mov	r1, r5
 8003a28:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	14cb      	asrs	r3, r1, #19
 8003a30:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8003a34:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8003a38:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003a3c:	1884      	adds	r4, r0, r2
 8003a3e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003a40:	eb41 0303 	adc.w	r3, r1, r3
 8003a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a46:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003a4a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003a4e:	4621      	mov	r1, r4
 8003a50:	1889      	adds	r1, r1, r2
 8003a52:	6539      	str	r1, [r7, #80]	@ 0x50
 8003a54:	4629      	mov	r1, r5
 8003a56:	eb43 0101 	adc.w	r1, r3, r1
 8003a5a:	6579      	str	r1, [r7, #84]	@ 0x54
 8003a5c:	f04f 0000 	mov.w	r0, #0
 8003a60:	f04f 0100 	mov.w	r1, #0
 8003a64:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003a68:	4623      	mov	r3, r4
 8003a6a:	0a18      	lsrs	r0, r3, #8
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003a72:	462b      	mov	r3, r5
 8003a74:	1219      	asrs	r1, r3, #8
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003a7e:	b21b      	sxth	r3, r3
 8003a80:	17da      	asrs	r2, r3, #31
 8003a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a84:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8003a92:	464c      	mov	r4, r9
 8003a94:	0123      	lsls	r3, r4, #4
 8003a96:	4644      	mov	r4, r8
 8003a98:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003a9c:	4644      	mov	r4, r8
 8003a9e:	0122      	lsls	r2, r4, #4
 8003aa0:	1884      	adds	r4, r0, r2
 8003aa2:	603c      	str	r4, [r7, #0]
 8003aa4:	eb41 0303 	adc.w	r3, r1, r3
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003aae:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8003ab2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ac2 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8003ac2:	b480      	push	{r7}
 8003ac4:	b087      	sub	sp, #28
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8003ad4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	039a      	lsls	r2, r3, #14
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003ae0:	051b      	lsls	r3, r3, #20
 8003ae2:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003aea:	4619      	mov	r1, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003af8:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8003b00:	4611      	mov	r1, r2
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	fb01 f202 	mul.w	r2, r1, r2
 8003b08:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8003b0a:	68f9      	ldr	r1, [r7, #12]
 8003b0c:	7f09      	ldrb	r1, [r1, #28]
 8003b0e:	4608      	mov	r0, r1
 8003b10:	6979      	ldr	r1, [r7, #20]
 8003b12:	fb00 f101 	mul.w	r1, r0, r1
 8003b16:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8003b18:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8003b1c:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8003b20:	1292      	asrs	r2, r2, #10
 8003b22:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8003b2c:	fb01 f202 	mul.w	r2, r1, r2
 8003b30:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003b34:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	13db      	asrs	r3, r3, #15
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	13d2      	asrs	r2, r2, #15
 8003b44:	fb02 f303 	mul.w	r3, r2, r3
 8003b48:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	7e12      	ldrb	r2, [r2, #24]
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003b60:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8003b68:	bfa8      	it	ge
 8003b6a:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8003b6e:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	131b      	asrs	r3, r3, #12
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	@ 0x30
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003b94:	2b60      	cmp	r3, #96	@ 0x60
 8003b96:	d007      	beq.n	8003ba8 <bmp280_read_fixed+0x28>
		if (humidity)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <bmp280_read_fixed+0x32>
 8003bae:	2308      	movs	r3, #8
 8003bb0:	e000      	b.n	8003bb4 <bmp280_read_fixed+0x34>
 8003bb2:	2306      	movs	r3, #6
 8003bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8003bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f107 0218 	add.w	r2, r7, #24
 8003bbe:	21f7      	movs	r1, #247	@ 0xf7
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff faa6 	bl	8003112 <read_data>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <bmp280_read_fixed+0x50>
		return false;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e038      	b.n	8003c42 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003bd0:	7e3b      	ldrb	r3, [r7, #24]
 8003bd2:	031a      	lsls	r2, r3, #12
 8003bd4:	7e7b      	ldrb	r3, [r7, #25]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	7eba      	ldrb	r2, [r7, #26]
 8003bdc:	0912      	lsrs	r2, r2, #4
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	4313      	orrs	r3, r2
 8003be2:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8003be4:	7efb      	ldrb	r3, [r7, #27]
 8003be6:	031a      	lsls	r2, r3, #12
 8003be8:	7f3b      	ldrb	r3, [r7, #28]
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	4313      	orrs	r3, r2
 8003bee:	7f7a      	ldrb	r2, [r7, #29]
 8003bf0:	0912      	lsrs	r2, r2, #4
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8003bf8:	f107 0314 	add.w	r3, r7, #20
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff fc67 	bl	80034d4 <compensate_temperature>
 8003c06:	4602      	mov	r2, r0
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fc97 	bl	8003546 <compensate_pressure>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8003c24:	7fbb      	ldrb	r3, [r7, #30]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	7ffa      	ldrb	r2, [r7, #31]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	461a      	mov	r2, r3
 8003c32:	6a39      	ldr	r1, [r7, #32]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff ff44 	bl	8003ac2 <compensate_humidity>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	601a      	str	r2, [r3, #0]
	}

	return true;
 8003c40:	2301      	movs	r3, #1
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3730      	adds	r7, #48	@ 0x30
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <bmp280_read_float+0x1a>
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	e000      	b.n	8003c68 <bmp280_read_float+0x1c>
 8003c66:	2300      	movs	r3, #0
 8003c68:	f107 0218 	add.w	r2, r7, #24
 8003c6c:	f107 011c 	add.w	r1, r7, #28
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff ff85 	bl	8003b80 <bmp280_read_fixed>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d028      	beq.n	8003cce <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c86:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8003cd8 <bmp280_read_float+0x8c>
 8003c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c9e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003cdc <bmp280_read_float+0x90>
 8003ca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cbc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8003ce0 <bmp280_read_float+0x94>
 8003cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <bmp280_read_float+0x84>
	}

	return false;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	42c80000 	.word	0x42c80000
 8003cdc:	43800000 	.word	0x43800000
 8003ce0:	44800000 	.word	0x44800000
 8003ce4:	00000000 	.word	0x00000000

08003ce8 <GPS_RMC>:
float gps_hor_dilu,gps_altura;



uint8_t GPS_RMC()
{
 8003ce8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cec:	b0a4      	sub	sp, #144	@ 0x90
 8003cee:	af00      	add	r7, sp, #0
	uint8_t info[20];
	float grados,minutos;
	//punteros para detectar inicia y fin d ela trama RMC
	const char *start;
    const char *end;
	int8_t diamas=0;// ajusta el dia al UTC
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
//             limpia buffer
         	 memset(GPS_buffer,0,sizeof(GPS_buffer));
 8003cf6:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4850      	ldr	r0, [pc, #320]	@ (8003e40 <GPS_RMC+0x158>)
 8003cfe:	f008 f942 	bl	800bf86 <memset>

		        size_t length;
		       //   uartx_write_text(&huart2, trama_gps.trama_rx);

		        // Encontrar el primer "$GPRMC"
		           start = strstr(trama_gps.trama_rx, "$GPRMC");
 8003d02:	4b50      	ldr	r3, [pc, #320]	@ (8003e44 <GPS_RMC+0x15c>)
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	4950      	ldr	r1, [pc, #320]	@ (8003e48 <GPS_RMC+0x160>)
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f008 f9a7 	bl	800c05c <strstr>
 8003d0e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		           if (start != NULL)
 8003d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01e      	beq.n	8003d58 <GPS_RMC+0x70>
		           {
		               // el enter o final d ela trama RMC
		               end = strstr(start, "\r");
 8003d1a:	210d      	movs	r1, #13
 8003d1c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003d20:	f008 f939 	bl	800bf96 <strchr>
 8003d24:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
						   if (end != NULL)
 8003d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d013      	beq.n	8003d58 <GPS_RMC+0x70>
						   {
							   // Calcular la longitud de la sentencia
							   length = end - start;
 8003d30:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
							   // Copiar la sentencia completa al buffer de salida
							   strncpy(GPS_buffer, start, length);
 8003d3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003d42:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8003d46:	483e      	ldr	r0, [pc, #248]	@ (8003e40 <GPS_RMC+0x158>)
 8003d48:	f008 f944 	bl	800bfd4 <strncpy>
							   GPS_buffer[length] = '\0'; // Añadir  cero al final
 8003d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e40 <GPS_RMC+0x158>)
 8003d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d52:	4413      	add	r3, r2
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
				           }
		           }
		        //busca primero si es valido el dato
		           strcpy(captura, strtok(GPS_buffer, ","));  //inicia captura de tokens
 8003d58:	493c      	ldr	r1, [pc, #240]	@ (8003e4c <GPS_RMC+0x164>)
 8003d5a:	4839      	ldr	r0, [pc, #228]	@ (8003e40 <GPS_RMC+0x158>)
 8003d5c:	f008 f94e 	bl	800bffc <strtok>
 8003d60:	4602      	mov	r2, r0
 8003d62:	f107 0314 	add.w	r3, r7, #20
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f008 fa1d 	bl	800c1a8 <strcpy>
		           strcpy(captura, strtok(0, ","));  //captura
 8003d6e:	4937      	ldr	r1, [pc, #220]	@ (8003e4c <GPS_RMC+0x164>)
 8003d70:	2000      	movs	r0, #0
 8003d72:	f008 f943 	bl	800bffc <strtok>
 8003d76:	4602      	mov	r2, r0
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f008 fa12 	bl	800c1a8 <strcpy>
		           strcpy(captura, strtok(0, ","));  //captura
 8003d84:	4931      	ldr	r1, [pc, #196]	@ (8003e4c <GPS_RMC+0x164>)
 8003d86:	2000      	movs	r0, #0
 8003d88:	f008 f938 	bl	800bffc <strtok>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	f107 0314 	add.w	r3, r7, #20
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f008 fa07 	bl	800c1a8 <strcpy>
		           if (captura[0]!=65) return(0);//  si el dato no es valido sale
 8003d9a:	7d3b      	ldrb	r3, [r7, #20]
 8003d9c:	2b41      	cmp	r3, #65	@ 0x41
 8003d9e:	d001      	beq.n	8003da4 <GPS_RMC+0xbc>
 8003da0:	2300      	movs	r3, #0
 8003da2:	e231      	b.n	8004208 <GPS_RMC+0x520>

		       		//si es valido vuelve a capurar
		          //arma el buffer de nuevo
		          strncpy(GPS_buffer, start, length);
 8003da4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003da8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8003dac:	4824      	ldr	r0, [pc, #144]	@ (8003e40 <GPS_RMC+0x158>)
 8003dae:	f008 f911 	bl	800bfd4 <strncpy>
        		   GPS_buffer[length] = '\0'; // Añadir  cero al final
 8003db2:	4a23      	ldr	r2, [pc, #140]	@ (8003e40 <GPS_RMC+0x158>)
 8003db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003db8:	4413      	add	r3, r2
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]

        		   strcpy(captura, strtok(GPS_buffer, ","));  //inicia captura de tokens
 8003dbe:	4923      	ldr	r1, [pc, #140]	@ (8003e4c <GPS_RMC+0x164>)
 8003dc0:	481f      	ldr	r0, [pc, #124]	@ (8003e40 <GPS_RMC+0x158>)
 8003dc2:	f008 f91b 	bl	800bffc <strtok>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f008 f9ea 	bl	800c1a8 <strcpy>
	     		 strcpy(captura, strtok(0, ","));  //captura
 8003dd4:	491d      	ldr	r1, [pc, #116]	@ (8003e4c <GPS_RMC+0x164>)
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f008 f910 	bl	800bffc <strtok>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	f107 0314 	add.w	r3, r7, #20
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f008 f9df 	bl	800c1a8 <strcpy>

		     		 //comienza la decodificacion
		       		strncpy(info,captura,2);//captura la hora
 8003dea:	f107 0114 	add.w	r1, r7, #20
 8003dee:	463b      	mov	r3, r7
 8003df0:	2202      	movs	r2, #2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f008 f8ee 	bl	800bfd4 <strncpy>
 	                 hor_gps=atoi(info);
 8003df8:	463b      	mov	r3, r7
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f006 fe52 	bl	800aaa4 <atoi>
 8003e00:	4603      	mov	r3, r0
 8003e02:	b25a      	sxtb	r2, r3
 8003e04:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <GPS_RMC+0x168>)
 8003e06:	701a      	strb	r2, [r3, #0]
		                hor_gps = hor_gps + hor_utc;
 8003e08:	4b11      	ldr	r3, [pc, #68]	@ (8003e50 <GPS_RMC+0x168>)
 8003e0a:	f993 3000 	ldrsb.w	r3, [r3]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	3b05      	subs	r3, #5
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	b25a      	sxtb	r2, r3
 8003e16:	4b0e      	ldr	r3, [pc, #56]	@ (8003e50 <GPS_RMC+0x168>)
 8003e18:	701a      	strb	r2, [r3, #0]

		               if (hor_gps < 0) {
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <GPS_RMC+0x168>)
 8003e1c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da17      	bge.n	8003e54 <GPS_RMC+0x16c>
		            	   diamas=-1;  //  es un dia antes al UTC
 8003e24:	23ff      	movs	r3, #255	@ 0xff
 8003e26:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		            	   hor_gps += 24;// si es negatriva sumo 24
 8003e2a:	4b09      	ldr	r3, [pc, #36]	@ (8003e50 <GPS_RMC+0x168>)
 8003e2c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	3318      	adds	r3, #24
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	b25a      	sxtb	r2, r3
 8003e38:	4b05      	ldr	r3, [pc, #20]	@ (8003e50 <GPS_RMC+0x168>)
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e01b      	b.n	8003e76 <GPS_RMC+0x18e>
 8003e3e:	bf00      	nop
 8003e40:	20000cc4 	.word	0x20000cc4
 8003e44:	20000004 	.word	0x20000004
 8003e48:	08011a44 	.word	0x08011a44
 8003e4c:	08011a4c 	.word	0x08011a4c
 8003e50:	20000f35 	.word	0x20000f35
		               } else if (hor_gps >= 24) // si pasa de 24 le retso 24
 8003e54:	4bd6      	ldr	r3, [pc, #856]	@ (80041b0 <GPS_RMC+0x4c8>)
 8003e56:	f993 3000 	ldrsb.w	r3, [r3]
 8003e5a:	2b17      	cmp	r3, #23
 8003e5c:	dd0b      	ble.n	8003e76 <GPS_RMC+0x18e>
		               {
		            	   diamas=+1;//  es el dia siguiente
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		            	   hor_gps -= 24;
 8003e64:	4bd2      	ldr	r3, [pc, #840]	@ (80041b0 <GPS_RMC+0x4c8>)
 8003e66:	f993 3000 	ldrsb.w	r3, [r3]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3b18      	subs	r3, #24
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	b25a      	sxtb	r2, r3
 8003e72:	4bcf      	ldr	r3, [pc, #828]	@ (80041b0 <GPS_RMC+0x4c8>)
 8003e74:	701a      	strb	r2, [r3, #0]
		               }

		            strncpy(info,&captura[2],2);//captura min
 8003e76:	f107 0314 	add.w	r3, r7, #20
 8003e7a:	1c99      	adds	r1, r3, #2
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	2202      	movs	r2, #2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f008 f8a7 	bl	800bfd4 <strncpy>
    		        min_gps=atoi(info);
 8003e86:	463b      	mov	r3, r7
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f006 fe0b 	bl	800aaa4 <atoi>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4bc8      	ldr	r3, [pc, #800]	@ (80041b4 <GPS_RMC+0x4cc>)
 8003e94:	701a      	strb	r2, [r3, #0]
    		        strncpy(info,&captura[4],2);//captura seg
 8003e96:	f107 0314 	add.w	r3, r7, #20
 8003e9a:	1d19      	adds	r1, r3, #4
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f008 f897 	bl	800bfd4 <strncpy>
    		        seg_gps=atoi(info);
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f006 fdfb 	bl	800aaa4 <atoi>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4bc1      	ldr	r3, [pc, #772]	@ (80041b8 <GPS_RMC+0x4d0>)
 8003eb4:	701a      	strb	r2, [r3, #0]

    		        // ya se sabe que es valido solo  que toca capturar de nuevo
    		        strcpy(captura, strtok(0, ","));  //captura hasta 3 coma
 8003eb6:	49c1      	ldr	r1, [pc, #772]	@ (80041bc <GPS_RMC+0x4d4>)
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f008 f89f 	bl	800bffc <strtok>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	f107 0314 	add.w	r3, r7, #20
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f008 f96e 	bl	800c1a8 <strcpy>

    		        //      captura la latitud
    		            strcpy(captura, strtok(0, ","));  //captura hasta 4 coma
 8003ecc:	49bb      	ldr	r1, [pc, #748]	@ (80041bc <GPS_RMC+0x4d4>)
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f008 f894 	bl	800bffc <strtok>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	f107 0314 	add.w	r3, r7, #20
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f008 f963 	bl	800c1a8 <strcpy>
		     		    memset(info,0,sizeof(info));//limpía los grados
 8003ee2:	463b      	mov	r3, r7
 8003ee4:	2214      	movs	r2, #20
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f008 f84c 	bl	800bf86 <memset>
    		               strncpy(info,captura,2);//captura los grados
 8003eee:	f107 0114 	add.w	r1, r7, #20
 8003ef2:	463b      	mov	r3, r7
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f008 f86c 	bl	800bfd4 <strncpy>

    		               grados=atof(info);      // pasa de alfanumerico o cadena a flotante
 8003efc:	463b      	mov	r3, r7
 8003efe:	4618      	mov	r0, r3
 8003f00:	f006 fdca 	bl	800aa98 <atof>
 8003f04:	ec53 2b10 	vmov	r2, r3, d0
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f7fc fe74 	bl	8000bf8 <__aeabi_d2f>
 8003f10:	4603      	mov	r3, r0
 8003f12:	67fb      	str	r3, [r7, #124]	@ 0x7c

    		               // apunta a los minutos
    		                 minutos=atoff(&captura[2])/60.0;  //lo pasa a grados
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	3302      	adds	r3, #2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f006 fdbf 	bl	800aa9e <atoff>
 8003f20:	ee10 3a10 	vmov	r3, s0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc fb17 	bl	8000558 <__aeabi_f2d>
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	4ba4      	ldr	r3, [pc, #656]	@ (80041c0 <GPS_RMC+0x4d8>)
 8003f30:	f7fc fc94 	bl	800085c <__aeabi_ddiv>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f7fc fe5c 	bl	8000bf8 <__aeabi_d2f>
 8003f40:	4603      	mov	r3, r0
 8003f42:	67bb      	str	r3, [r7, #120]	@ 0x78

    		                 latitud=grados+minutos;
 8003f44:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8003f48:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f50:	ee17 0a90 	vmov	r0, s15
 8003f54:	f7fc fb00 	bl	8000558 <__aeabi_f2d>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4999      	ldr	r1, [pc, #612]	@ (80041c4 <GPS_RMC+0x4dc>)
 8003f5e:	e9c1 2300 	strd	r2, r3, [r1]
    		                 strcpy(captura, strtok(0, ","));  //captura siguiente coma  //orientacion o signo de la lat
 8003f62:	4996      	ldr	r1, [pc, #600]	@ (80041bc <GPS_RMC+0x4d4>)
 8003f64:	2000      	movs	r0, #0
 8003f66:	f008 f849 	bl	800bffc <strtok>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f008 f918 	bl	800c1a8 <strcpy>
    		                 if (captura[0]=='S') latitud=-latitud;
 8003f78:	7d3b      	ldrb	r3, [r7, #20]
 8003f7a:	2b53      	cmp	r3, #83	@ 0x53
 8003f7c:	d108      	bne.n	8003f90 <GPS_RMC+0x2a8>
 8003f7e:	4b91      	ldr	r3, [pc, #580]	@ (80041c4 <GPS_RMC+0x4dc>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	4690      	mov	r8, r2
 8003f86:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8003f8a:	4b8e      	ldr	r3, [pc, #568]	@ (80041c4 <GPS_RMC+0x4dc>)
 8003f8c:	e9c3 8900 	strd	r8, r9, [r3]


    		                 //captura longitud
    		                 strcpy(captura, strtok(0, ","));  //captura siguiente coma la longitud
 8003f90:	498a      	ldr	r1, [pc, #552]	@ (80041bc <GPS_RMC+0x4d4>)
 8003f92:	2000      	movs	r0, #0
 8003f94:	f008 f832 	bl	800bffc <strtok>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	f107 0314 	add.w	r3, r7, #20
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f008 f901 	bl	800c1a8 <strcpy>
    		                  memset(info,0,sizeof(info));//limpía los grados
 8003fa6:	463b      	mov	r3, r7
 8003fa8:	2214      	movs	r2, #20
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f007 ffea 	bl	800bf86 <memset>
    		                   strncpy(info,captura,3);//captura los grados  3 posiciones
 8003fb2:	f107 0114 	add.w	r1, r7, #20
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f008 f80a 	bl	800bfd4 <strncpy>
    		                    grados=atof(info);
 8003fc0:	463b      	mov	r3, r7
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f006 fd68 	bl	800aa98 <atof>
 8003fc8:	ec53 2b10 	vmov	r2, r3, d0
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f7fc fe12 	bl	8000bf8 <__aeabi_d2f>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    		                     // apunta a los minutos
    		                      minutos=atof(&captura[3])/60.0;  //lo pasa a grados
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	3303      	adds	r3, #3
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f006 fd5a 	bl	800aa98 <atof>
 8003fe4:	ec51 0b10 	vmov	r0, r1, d0
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	4b74      	ldr	r3, [pc, #464]	@ (80041c0 <GPS_RMC+0x4d8>)
 8003fee:	f7fc fc35 	bl	800085c <__aeabi_ddiv>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7fc fdfd 	bl	8000bf8 <__aeabi_d2f>
 8003ffe:	4603      	mov	r3, r0
 8004000:	67bb      	str	r3, [r7, #120]	@ 0x78
    		                       longitud=grados+minutos;
 8004002:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8004006:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800400a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400e:	ee17 0a90 	vmov	r0, s15
 8004012:	f7fc faa1 	bl	8000558 <__aeabi_f2d>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	496b      	ldr	r1, [pc, #428]	@ (80041c8 <GPS_RMC+0x4e0>)
 800401c:	e9c1 2300 	strd	r2, r3, [r1]
    		                        strcpy(captura, strtok(0, ","));  //captura siguiente coma  //orientacion o signo de la long
 8004020:	4966      	ldr	r1, [pc, #408]	@ (80041bc <GPS_RMC+0x4d4>)
 8004022:	2000      	movs	r0, #0
 8004024:	f007 ffea 	bl	800bffc <strtok>
 8004028:	4602      	mov	r2, r0
 800402a:	f107 0314 	add.w	r3, r7, #20
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f008 f8b9 	bl	800c1a8 <strcpy>
    		                        if (captura[0]=='W') longitud=-longitud;
 8004036:	7d3b      	ldrb	r3, [r7, #20]
 8004038:	2b57      	cmp	r3, #87	@ 0x57
 800403a:	d108      	bne.n	800404e <GPS_RMC+0x366>
 800403c:	4b62      	ldr	r3, [pc, #392]	@ (80041c8 <GPS_RMC+0x4e0>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	4614      	mov	r4, r2
 8004044:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8004048:	4b5f      	ldr	r3, [pc, #380]	@ (80041c8 <GPS_RMC+0x4e0>)
 800404a:	e9c3 4500 	strd	r4, r5, [r3]

    		           //captura velocidad

    		             strcpy(captura, strtok(0, ","));  //captura siguenti coma
 800404e:	495b      	ldr	r1, [pc, #364]	@ (80041bc <GPS_RMC+0x4d4>)
 8004050:	2000      	movs	r0, #0
 8004052:	f007 ffd3 	bl	800bffc <strtok>
 8004056:	4602      	mov	r2, r0
 8004058:	f107 0314 	add.w	r3, r7, #20
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f008 f8a2 	bl	800c1a8 <strcpy>
    		             gps_vel_nudos=atof(captura);
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	4618      	mov	r0, r3
 800406a:	f006 fd15 	bl	800aa98 <atof>
 800406e:	ec53 2b10 	vmov	r2, r3, d0
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	f7fc fdbf 	bl	8000bf8 <__aeabi_d2f>
 800407a:	4603      	mov	r3, r0
 800407c:	4a53      	ldr	r2, [pc, #332]	@ (80041cc <GPS_RMC+0x4e4>)
 800407e:	6013      	str	r3, [r2, #0]
    		             gps_vel_kph = gps_vel_nudos * 1.852;
 8004080:	4b52      	ldr	r3, [pc, #328]	@ (80041cc <GPS_RMC+0x4e4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fa67 	bl	8000558 <__aeabi_f2d>
 800408a:	a347      	add	r3, pc, #284	@ (adr r3, 80041a8 <GPS_RMC+0x4c0>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc faba 	bl	8000608 <__aeabi_dmul>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
 800409c:	f7fc fdac 	bl	8000bf8 <__aeabi_d2f>
 80040a0:	4603      	mov	r3, r0
 80040a2:	4a4b      	ldr	r2, [pc, #300]	@ (80041d0 <GPS_RMC+0x4e8>)
 80040a4:	6013      	str	r3, [r2, #0]

    		             //captura rumbo
    		             strcpy(captura, strtok(0, ","));  //captura siguenti coma
 80040a6:	4945      	ldr	r1, [pc, #276]	@ (80041bc <GPS_RMC+0x4d4>)
 80040a8:	2000      	movs	r0, #0
 80040aa:	f007 ffa7 	bl	800bffc <strtok>
 80040ae:	4602      	mov	r2, r0
 80040b0:	f107 0314 	add.w	r3, r7, #20
 80040b4:	4611      	mov	r1, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f008 f876 	bl	800c1a8 <strcpy>
    		             gps_rumbo=atof(captura);
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	4618      	mov	r0, r3
 80040c2:	f006 fce9 	bl	800aa98 <atof>
 80040c6:	ec53 2b10 	vmov	r2, r3, d0
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	f7fc fd93 	bl	8000bf8 <__aeabi_d2f>
 80040d2:	4603      	mov	r3, r0
 80040d4:	4a3f      	ldr	r2, [pc, #252]	@ (80041d4 <GPS_RMC+0x4ec>)
 80040d6:	6013      	str	r3, [r2, #0]


    		           //captura dia mes año
    		            memset(info,0,sizeof(info));//limpía el  buffer
 80040d8:	463b      	mov	r3, r7
 80040da:	2214      	movs	r2, #20
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f007 ff51 	bl	800bf86 <memset>
    		            strcpy(captura, strtok(0, ","));  //
 80040e4:	4935      	ldr	r1, [pc, #212]	@ (80041bc <GPS_RMC+0x4d4>)
 80040e6:	2000      	movs	r0, #0
 80040e8:	f007 ff88 	bl	800bffc <strtok>
 80040ec:	4602      	mov	r2, r0
 80040ee:	f107 0314 	add.w	r3, r7, #20
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f008 f857 	bl	800c1a8 <strcpy>
                       strncpy(info,captura,2);//captura la dia
 80040fa:	f107 0114 	add.w	r1, r7, #20
 80040fe:	463b      	mov	r3, r7
 8004100:	2202      	movs	r2, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f007 ff66 	bl	800bfd4 <strncpy>
                      dia_gps=atoi(info)+diamas;
 8004108:	463b      	mov	r3, r7
 800410a:	4618      	mov	r0, r3
 800410c:	f006 fcca 	bl	800aaa4 <atoi>
 8004110:	4603      	mov	r3, r0
 8004112:	b2da      	uxtb	r2, r3
 8004114:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8004118:	4413      	add	r3, r2
 800411a:	b2da      	uxtb	r2, r3
 800411c:	4b2e      	ldr	r3, [pc, #184]	@ (80041d8 <GPS_RMC+0x4f0>)
 800411e:	701a      	strb	r2, [r3, #0]
                     strncpy(info,&captura[2],2);//captura mes
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	1c99      	adds	r1, r3, #2
 8004126:	463b      	mov	r3, r7
 8004128:	2202      	movs	r2, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f007 ff52 	bl	800bfd4 <strncpy>
                      mes_gps=atoi(info);
 8004130:	463b      	mov	r3, r7
 8004132:	4618      	mov	r0, r3
 8004134:	f006 fcb6 	bl	800aaa4 <atoi>
 8004138:	4603      	mov	r3, r0
 800413a:	b2da      	uxtb	r2, r3
 800413c:	4b27      	ldr	r3, [pc, #156]	@ (80041dc <GPS_RMC+0x4f4>)
 800413e:	701a      	strb	r2, [r3, #0]
                      strncpy(info,&captura[4],2);//captura año
 8004140:	f107 0314 	add.w	r3, r7, #20
 8004144:	1d19      	adds	r1, r3, #4
 8004146:	463b      	mov	r3, r7
 8004148:	2202      	movs	r2, #2
 800414a:	4618      	mov	r0, r3
 800414c:	f007 ff42 	bl	800bfd4 <strncpy>
                      an_gps=atoi(info);
 8004150:	463b      	mov	r3, r7
 8004152:	4618      	mov	r0, r3
 8004154:	f006 fca6 	bl	800aaa4 <atoi>
 8004158:	4603      	mov	r3, r0
 800415a:	b2da      	uxtb	r2, r3
 800415c:	4b20      	ldr	r3, [pc, #128]	@ (80041e0 <GPS_RMC+0x4f8>)
 800415e:	701a      	strb	r2, [r3, #0]

                      //captura deviacion magnetica
     		             strcpy(captura, strtok(0, ","));  //captura siguenti coma
 8004160:	4916      	ldr	r1, [pc, #88]	@ (80041bc <GPS_RMC+0x4d4>)
 8004162:	2000      	movs	r0, #0
 8004164:	f007 ff4a 	bl	800bffc <strtok>
 8004168:	4602      	mov	r2, r0
 800416a:	f107 0314 	add.w	r3, r7, #20
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f008 f819 	bl	800c1a8 <strcpy>
     		            gps_desv_mag=atof(captura);
 8004176:	f107 0314 	add.w	r3, r7, #20
 800417a:	4618      	mov	r0, r3
 800417c:	f006 fc8c 	bl	800aa98 <atof>
 8004180:	ec53 2b10 	vmov	r2, r3, d0
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	f7fc fd36 	bl	8000bf8 <__aeabi_d2f>
 800418c:	4603      	mov	r3, r0
 800418e:	4a15      	ldr	r2, [pc, #84]	@ (80041e4 <GPS_RMC+0x4fc>)
 8004190:	6013      	str	r3, [r2, #0]

                         strcpy(captura, strtok(0, ","));  //captura siguiente coma  //orientacion o signo de la long
 8004192:	490a      	ldr	r1, [pc, #40]	@ (80041bc <GPS_RMC+0x4d4>)
 8004194:	2000      	movs	r0, #0
 8004196:	f007 ff31 	bl	800bffc <strtok>
 800419a:	4602      	mov	r2, r0
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	e022      	b.n	80041e8 <GPS_RMC+0x500>
 80041a2:	bf00      	nop
 80041a4:	f3af 8000 	nop.w
 80041a8:	c083126f 	.word	0xc083126f
 80041ac:	3ffda1ca 	.word	0x3ffda1ca
 80041b0:	20000f35 	.word	0x20000f35
 80041b4:	20000f30 	.word	0x20000f30
 80041b8:	20000f31 	.word	0x20000f31
 80041bc:	08011a4c 	.word	0x08011a4c
 80041c0:	404e0000 	.word	0x404e0000
 80041c4:	20000f20 	.word	0x20000f20
 80041c8:	20000f28 	.word	0x20000f28
 80041cc:	20000f38 	.word	0x20000f38
 80041d0:	20000f3c 	.word	0x20000f3c
 80041d4:	20000f40 	.word	0x20000f40
 80041d8:	20000f32 	.word	0x20000f32
 80041dc:	20000f33 	.word	0x20000f33
 80041e0:	20000f34 	.word	0x20000f34
 80041e4:	20000f44 	.word	0x20000f44
 80041e8:	4611      	mov	r1, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f007 ffdc 	bl	800c1a8 <strcpy>
                        if (captura[0]=='W')  gps_desv_mag=- gps_desv_mag;
 80041f0:	7d3b      	ldrb	r3, [r7, #20]
 80041f2:	2b57      	cmp	r3, #87	@ 0x57
 80041f4:	d107      	bne.n	8004206 <GPS_RMC+0x51e>
 80041f6:	4b07      	ldr	r3, [pc, #28]	@ (8004214 <GPS_RMC+0x52c>)
 80041f8:	edd3 7a00 	vldr	s15, [r3]
 80041fc:	eef1 7a67 	vneg.f32	s15, s15
 8004200:	4b04      	ldr	r3, [pc, #16]	@ (8004214 <GPS_RMC+0x52c>)
 8004202:	edc3 7a00 	vstr	s15, [r3]




                     return(1);
 8004206:	2301      	movs	r3, #1


}
 8004208:	4618      	mov	r0, r3
 800420a:	3790      	adds	r7, #144	@ 0x90
 800420c:	46bd      	mov	sp, r7
 800420e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004212:	bf00      	nop
 8004214:	20000f44 	.word	0x20000f44

08004218 <GPS_GGA>:

uint8_t GPS_GGA()
{
 8004218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800421c:	b0a4      	sub	sp, #144	@ 0x90
 800421e:	af00      	add	r7, sp, #0
	uint8_t info[20];
	float grados,minutos;
	//punteros para detectar inicia y fin d ela trama RMC
		const char *start;
	    const char *end;
		int8_t diamas=0;// ajusta el dia al UTC
 8004220:	2300      	movs	r3, #0
 8004222:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	//             limpia buffer
	         	 memset(GPS_buffer,0,sizeof(GPS_buffer));
 8004226:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800422a:	2100      	movs	r1, #0
 800422c:	486a      	ldr	r0, [pc, #424]	@ (80043d8 <GPS_GGA+0x1c0>)
 800422e:	f007 feaa 	bl	800bf86 <memset>

			        size_t length;
			           // Encontrar el primer "$GPGGA"
			           start = strstr(trama_gps.trama_rx, "$GPGGA");
 8004232:	4b6a      	ldr	r3, [pc, #424]	@ (80043dc <GPS_GGA+0x1c4>)
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	496a      	ldr	r1, [pc, #424]	@ (80043e0 <GPS_GGA+0x1c8>)
 8004238:	4618      	mov	r0, r3
 800423a:	f007 ff0f 	bl	800c05c <strstr>
 800423e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			           if (start != NULL)
 8004242:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01e      	beq.n	8004288 <GPS_GGA+0x70>
			           {
			               // el enter o final d ela trama RMC
			               end = strstr(start, "\r");
 800424a:	210d      	movs	r1, #13
 800424c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8004250:	f007 fea1 	bl	800bf96 <strchr>
 8004254:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
							   if (end != NULL)
 8004258:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <GPS_GGA+0x70>
							   {
								   // Calcular la longitud de la sentencia
								   length = end - start;
 8004260:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
								   // Copiar la sentencia completa al buffer de salida
								   strncpy(GPS_buffer, start, length);
 800426e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004272:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8004276:	4858      	ldr	r0, [pc, #352]	@ (80043d8 <GPS_GGA+0x1c0>)
 8004278:	f007 feac 	bl	800bfd4 <strncpy>
								   GPS_buffer[length] = '\0'; // Añadir  cero al final
 800427c:	4a56      	ldr	r2, [pc, #344]	@ (80043d8 <GPS_GGA+0x1c0>)
 800427e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004282:	4413      	add	r3, r2
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
			           }

                      //PROCESA LA TRAMA GGA

			           //busca primero si es valido el dato
			          strcpy(captura, strtok(GPS_buffer, ","));  //inicia captura de tokens
 8004288:	4956      	ldr	r1, [pc, #344]	@ (80043e4 <GPS_GGA+0x1cc>)
 800428a:	4853      	ldr	r0, [pc, #332]	@ (80043d8 <GPS_GGA+0x1c0>)
 800428c:	f007 feb6 	bl	800bffc <strtok>
 8004290:	4602      	mov	r2, r0
 8004292:	f107 0314 	add.w	r3, r7, #20
 8004296:	4611      	mov	r1, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f007 ff85 	bl	800c1a8 <strcpy>
			          strcpy(captura, strtok(0, ","));  //captura
 800429e:	4951      	ldr	r1, [pc, #324]	@ (80043e4 <GPS_GGA+0x1cc>)
 80042a0:	2000      	movs	r0, #0
 80042a2:	f007 feab 	bl	800bffc <strtok>
 80042a6:	4602      	mov	r2, r0
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f007 ff7a 	bl	800c1a8 <strcpy>
			          strcpy(captura, strtok(0, ","));  //captura
 80042b4:	494b      	ldr	r1, [pc, #300]	@ (80043e4 <GPS_GGA+0x1cc>)
 80042b6:	2000      	movs	r0, #0
 80042b8:	f007 fea0 	bl	800bffc <strtok>
 80042bc:	4602      	mov	r2, r0
 80042be:	f107 0314 	add.w	r3, r7, #20
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f007 ff6f 	bl	800c1a8 <strcpy>
			          strcpy(captura, strtok(0, ","));  //captura
 80042ca:	4946      	ldr	r1, [pc, #280]	@ (80043e4 <GPS_GGA+0x1cc>)
 80042cc:	2000      	movs	r0, #0
 80042ce:	f007 fe95 	bl	800bffc <strtok>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f007 ff64 	bl	800c1a8 <strcpy>
			      	  strcpy(captura, strtok(0, ","));  //captura
 80042e0:	4940      	ldr	r1, [pc, #256]	@ (80043e4 <GPS_GGA+0x1cc>)
 80042e2:	2000      	movs	r0, #0
 80042e4:	f007 fe8a 	bl	800bffc <strtok>
 80042e8:	4602      	mov	r2, r0
 80042ea:	f107 0314 	add.w	r3, r7, #20
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f007 ff59 	bl	800c1a8 <strcpy>
			      	  strcpy(captura, strtok(0, ","));
 80042f6:	493b      	ldr	r1, [pc, #236]	@ (80043e4 <GPS_GGA+0x1cc>)
 80042f8:	2000      	movs	r0, #0
 80042fa:	f007 fe7f 	bl	800bffc <strtok>
 80042fe:	4602      	mov	r2, r0
 8004300:	f107 0314 	add.w	r3, r7, #20
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f007 ff4e 	bl	800c1a8 <strcpy>
			      	  strcpy(captura, strtok(0, ","));
 800430c:	4935      	ldr	r1, [pc, #212]	@ (80043e4 <GPS_GGA+0x1cc>)
 800430e:	2000      	movs	r0, #0
 8004310:	f007 fe74 	bl	800bffc <strtok>
 8004314:	4602      	mov	r2, r0
 8004316:	f107 0314 	add.w	r3, r7, #20
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f007 ff43 	bl	800c1a8 <strcpy>
			          if (captura[0]=='0') return(0);//  si el dato no es valido sale
 8004322:	7d3b      	ldrb	r3, [r7, #20]
 8004324:	2b30      	cmp	r3, #48	@ 0x30
 8004326:	d101      	bne.n	800432c <GPS_GGA+0x114>
 8004328:	2300      	movs	r3, #0
 800432a:	e1c6      	b.n	80046ba <GPS_GGA+0x4a2>
                       gps_modo=atoi(captura);
 800432c:	f107 0314 	add.w	r3, r7, #20
 8004330:	4618      	mov	r0, r3
 8004332:	f006 fbb7 	bl	800aaa4 <atoi>
 8004336:	4603      	mov	r3, r0
 8004338:	b25a      	sxtb	r2, r3
 800433a:	4b2b      	ldr	r3, [pc, #172]	@ (80043e8 <GPS_GGA+0x1d0>)
 800433c:	701a      	strb	r2, [r3, #0]

			          //si es valido vuelve a capurar
        		          //arma el buffer de nuevo
        		          strncpy(GPS_buffer, start, length);
 800433e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004342:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8004346:	4824      	ldr	r0, [pc, #144]	@ (80043d8 <GPS_GGA+0x1c0>)
 8004348:	f007 fe44 	bl	800bfd4 <strncpy>
                 		   GPS_buffer[length] = '\0'; // Añadir  cero al final
 800434c:	4a22      	ldr	r2, [pc, #136]	@ (80043d8 <GPS_GGA+0x1c0>)
 800434e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004352:	4413      	add	r3, r2
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]
                        //   uartx_write_text(&huart2, GPS_buffer);

                           //inica captora datos validos

                           //hora
                		   strcpy(captura, strtok(GPS_buffer, ","));  //inicia captura de tokens
 8004358:	4922      	ldr	r1, [pc, #136]	@ (80043e4 <GPS_GGA+0x1cc>)
 800435a:	481f      	ldr	r0, [pc, #124]	@ (80043d8 <GPS_GGA+0x1c0>)
 800435c:	f007 fe4e 	bl	800bffc <strtok>
 8004360:	4602      	mov	r2, r0
 8004362:	f107 0314 	add.w	r3, r7, #20
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f007 ff1d 	bl	800c1a8 <strcpy>
        	     		    strcpy(captura, strtok(0, ","));  //captura
 800436e:	491d      	ldr	r1, [pc, #116]	@ (80043e4 <GPS_GGA+0x1cc>)
 8004370:	2000      	movs	r0, #0
 8004372:	f007 fe43 	bl	800bffc <strtok>
 8004376:	4602      	mov	r2, r0
 8004378:	f107 0314 	add.w	r3, r7, #20
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f007 ff12 	bl	800c1a8 <strcpy>

        		     		 //comienza la decodificacion
        		       		strncpy(info,captura,2);//captura la hora
 8004384:	f107 0114 	add.w	r1, r7, #20
 8004388:	463b      	mov	r3, r7
 800438a:	2202      	movs	r2, #2
 800438c:	4618      	mov	r0, r3
 800438e:	f007 fe21 	bl	800bfd4 <strncpy>
         	                 hor_gps=atoi(info);
 8004392:	463b      	mov	r3, r7
 8004394:	4618      	mov	r0, r3
 8004396:	f006 fb85 	bl	800aaa4 <atoi>
 800439a:	4603      	mov	r3, r0
 800439c:	b25a      	sxtb	r2, r3
 800439e:	4b13      	ldr	r3, [pc, #76]	@ (80043ec <GPS_GGA+0x1d4>)
 80043a0:	701a      	strb	r2, [r3, #0]
        		                hor_gps = hor_gps + hor_utc;
 80043a2:	4b12      	ldr	r3, [pc, #72]	@ (80043ec <GPS_GGA+0x1d4>)
 80043a4:	f993 3000 	ldrsb.w	r3, [r3]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	3b05      	subs	r3, #5
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	b25a      	sxtb	r2, r3
 80043b0:	4b0e      	ldr	r3, [pc, #56]	@ (80043ec <GPS_GGA+0x1d4>)
 80043b2:	701a      	strb	r2, [r3, #0]

        		               if (hor_gps < 0) {
 80043b4:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <GPS_GGA+0x1d4>)
 80043b6:	f993 3000 	ldrsb.w	r3, [r3]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da18      	bge.n	80043f0 <GPS_GGA+0x1d8>
        		            	   diamas=-1;  //  es un dia antes al UTC
 80043be:	23ff      	movs	r3, #255	@ 0xff
 80043c0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
        		            	   hor_gps += 24;// si es negatriva sumo 24
 80043c4:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <GPS_GGA+0x1d4>)
 80043c6:	f993 3000 	ldrsb.w	r3, [r3]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	3318      	adds	r3, #24
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	b25a      	sxtb	r2, r3
 80043d2:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <GPS_GGA+0x1d4>)
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e01c      	b.n	8004412 <GPS_GGA+0x1fa>
 80043d8:	20000cc4 	.word	0x20000cc4
 80043dc:	20000004 	.word	0x20000004
 80043e0:	08011a50 	.word	0x08011a50
 80043e4:	08011a4c 	.word	0x08011a4c
 80043e8:	20000f48 	.word	0x20000f48
 80043ec:	20000f35 	.word	0x20000f35
        		               } else if (hor_gps >= 24) // si pasa de 24 le retso 24
 80043f0:	4bb4      	ldr	r3, [pc, #720]	@ (80046c4 <GPS_GGA+0x4ac>)
 80043f2:	f993 3000 	ldrsb.w	r3, [r3]
 80043f6:	2b17      	cmp	r3, #23
 80043f8:	dd0b      	ble.n	8004412 <GPS_GGA+0x1fa>
        		               {
        		            	   diamas=+1;//  es el dia siguiente
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
        		            	   hor_gps -= 24;
 8004400:	4bb0      	ldr	r3, [pc, #704]	@ (80046c4 <GPS_GGA+0x4ac>)
 8004402:	f993 3000 	ldrsb.w	r3, [r3]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	3b18      	subs	r3, #24
 800440a:	b2db      	uxtb	r3, r3
 800440c:	b25a      	sxtb	r2, r3
 800440e:	4bad      	ldr	r3, [pc, #692]	@ (80046c4 <GPS_GGA+0x4ac>)
 8004410:	701a      	strb	r2, [r3, #0]
        		               }

        		            strncpy(info,&captura[2],2);//captura min
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	1c99      	adds	r1, r3, #2
 8004418:	463b      	mov	r3, r7
 800441a:	2202      	movs	r2, #2
 800441c:	4618      	mov	r0, r3
 800441e:	f007 fdd9 	bl	800bfd4 <strncpy>
            		        min_gps=atoi(info);
 8004422:	463b      	mov	r3, r7
 8004424:	4618      	mov	r0, r3
 8004426:	f006 fb3d 	bl	800aaa4 <atoi>
 800442a:	4603      	mov	r3, r0
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4ba6      	ldr	r3, [pc, #664]	@ (80046c8 <GPS_GGA+0x4b0>)
 8004430:	701a      	strb	r2, [r3, #0]
            		        strncpy(info,&captura[4],2);//captura seg
 8004432:	f107 0314 	add.w	r3, r7, #20
 8004436:	1d19      	adds	r1, r3, #4
 8004438:	463b      	mov	r3, r7
 800443a:	2202      	movs	r2, #2
 800443c:	4618      	mov	r0, r3
 800443e:	f007 fdc9 	bl	800bfd4 <strncpy>
            		        seg_gps=atoi(info);
 8004442:	463b      	mov	r3, r7
 8004444:	4618      	mov	r0, r3
 8004446:	f006 fb2d 	bl	800aaa4 <atoi>
 800444a:	4603      	mov	r3, r0
 800444c:	b2da      	uxtb	r2, r3
 800444e:	4b9f      	ldr	r3, [pc, #636]	@ (80046cc <GPS_GGA+0x4b4>)
 8004450:	701a      	strb	r2, [r3, #0]

            		        //      captura la latitud
            		            strcpy(captura, strtok(0, ","));  //captura hasta 4 coma
 8004452:	499f      	ldr	r1, [pc, #636]	@ (80046d0 <GPS_GGA+0x4b8>)
 8004454:	2000      	movs	r0, #0
 8004456:	f007 fdd1 	bl	800bffc <strtok>
 800445a:	4602      	mov	r2, r0
 800445c:	f107 0314 	add.w	r3, r7, #20
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f007 fea0 	bl	800c1a8 <strcpy>
        		     		    memset(info,0,sizeof(info));//limpía los grados
 8004468:	463b      	mov	r3, r7
 800446a:	2214      	movs	r2, #20
 800446c:	2100      	movs	r1, #0
 800446e:	4618      	mov	r0, r3
 8004470:	f007 fd89 	bl	800bf86 <memset>
            		               strncpy(info,captura,2);//captura los grados
 8004474:	f107 0114 	add.w	r1, r7, #20
 8004478:	463b      	mov	r3, r7
 800447a:	2202      	movs	r2, #2
 800447c:	4618      	mov	r0, r3
 800447e:	f007 fda9 	bl	800bfd4 <strncpy>
                          //   uartx_write_text(&huart2, info);
            		               grados=atof(info);      // pasa de alfanumerico o cadena a flotante
 8004482:	463b      	mov	r3, r7
 8004484:	4618      	mov	r0, r3
 8004486:	f006 fb07 	bl	800aa98 <atof>
 800448a:	ec53 2b10 	vmov	r2, r3, d0
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
 8004492:	f7fc fbb1 	bl	8000bf8 <__aeabi_d2f>
 8004496:	4603      	mov	r3, r0
 8004498:	67fb      	str	r3, [r7, #124]	@ 0x7c

            		               // apunta a los minutos
            		                 minutos=atoff(&captura[2])/60.0;  //lo pasa a grados
 800449a:	f107 0314 	add.w	r3, r7, #20
 800449e:	3302      	adds	r3, #2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f006 fafc 	bl	800aa9e <atoff>
 80044a6:	ee10 3a10 	vmov	r3, s0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fc f854 	bl	8000558 <__aeabi_f2d>
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	4b87      	ldr	r3, [pc, #540]	@ (80046d4 <GPS_GGA+0x4bc>)
 80044b6:	f7fc f9d1 	bl	800085c <__aeabi_ddiv>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	f7fc fb99 	bl	8000bf8 <__aeabi_d2f>
 80044c6:	4603      	mov	r3, r0
 80044c8:	67bb      	str	r3, [r7, #120]	@ 0x78

            		                 latitud=grados+minutos;
 80044ca:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80044ce:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80044d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d6:	ee17 0a90 	vmov	r0, s15
 80044da:	f7fc f83d 	bl	8000558 <__aeabi_f2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	497d      	ldr	r1, [pc, #500]	@ (80046d8 <GPS_GGA+0x4c0>)
 80044e4:	e9c1 2300 	strd	r2, r3, [r1]
            		                 strcpy(captura, strtok(0, ","));  //captura siguiente coma  //orientacion o signo de la lat
 80044e8:	4979      	ldr	r1, [pc, #484]	@ (80046d0 <GPS_GGA+0x4b8>)
 80044ea:	2000      	movs	r0, #0
 80044ec:	f007 fd86 	bl	800bffc <strtok>
 80044f0:	4602      	mov	r2, r0
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f007 fe55 	bl	800c1a8 <strcpy>
            		                 if (captura[0]=='S') latitud=-latitud;
 80044fe:	7d3b      	ldrb	r3, [r7, #20]
 8004500:	2b53      	cmp	r3, #83	@ 0x53
 8004502:	d108      	bne.n	8004516 <GPS_GGA+0x2fe>
 8004504:	4b74      	ldr	r3, [pc, #464]	@ (80046d8 <GPS_GGA+0x4c0>)
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	4690      	mov	r8, r2
 800450c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8004510:	4b71      	ldr	r3, [pc, #452]	@ (80046d8 <GPS_GGA+0x4c0>)
 8004512:	e9c3 8900 	strd	r8, r9, [r3]


            		                 //captura longitud
            		                 strcpy(captura, strtok(0, ","));  //captura siguiente coma la longitud
 8004516:	496e      	ldr	r1, [pc, #440]	@ (80046d0 <GPS_GGA+0x4b8>)
 8004518:	2000      	movs	r0, #0
 800451a:	f007 fd6f 	bl	800bffc <strtok>
 800451e:	4602      	mov	r2, r0
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f007 fe3e 	bl	800c1a8 <strcpy>
            		                  memset(info,0,sizeof(info));//limpía los grados
 800452c:	463b      	mov	r3, r7
 800452e:	2214      	movs	r2, #20
 8004530:	2100      	movs	r1, #0
 8004532:	4618      	mov	r0, r3
 8004534:	f007 fd27 	bl	800bf86 <memset>
            		                   strncpy(info,captura,3);//captura los grados  3 posiciones
 8004538:	f107 0114 	add.w	r1, r7, #20
 800453c:	463b      	mov	r3, r7
 800453e:	2203      	movs	r2, #3
 8004540:	4618      	mov	r0, r3
 8004542:	f007 fd47 	bl	800bfd4 <strncpy>
            		                    grados=atof(info);
 8004546:	463b      	mov	r3, r7
 8004548:	4618      	mov	r0, r3
 800454a:	f006 faa5 	bl	800aa98 <atof>
 800454e:	ec53 2b10 	vmov	r2, r3, d0
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	f7fc fb4f 	bl	8000bf8 <__aeabi_d2f>
 800455a:	4603      	mov	r3, r0
 800455c:	67fb      	str	r3, [r7, #124]	@ 0x7c
            		                     // apunta a los minutos
            		                      minutos=atof(&captura[3])/60.0;  //lo pasa a grados
 800455e:	f107 0314 	add.w	r3, r7, #20
 8004562:	3303      	adds	r3, #3
 8004564:	4618      	mov	r0, r3
 8004566:	f006 fa97 	bl	800aa98 <atof>
 800456a:	ec51 0b10 	vmov	r0, r1, d0
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	4b58      	ldr	r3, [pc, #352]	@ (80046d4 <GPS_GGA+0x4bc>)
 8004574:	f7fc f972 	bl	800085c <__aeabi_ddiv>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	f7fc fb3a 	bl	8000bf8 <__aeabi_d2f>
 8004584:	4603      	mov	r3, r0
 8004586:	67bb      	str	r3, [r7, #120]	@ 0x78
            		                       longitud=grados+minutos;
 8004588:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800458c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004594:	ee17 0a90 	vmov	r0, s15
 8004598:	f7fb ffde 	bl	8000558 <__aeabi_f2d>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	494e      	ldr	r1, [pc, #312]	@ (80046dc <GPS_GGA+0x4c4>)
 80045a2:	e9c1 2300 	strd	r2, r3, [r1]
            		                        strcpy(captura, strtok(0, ","));  //captura siguiente coma  //orientacion o signo de la long
 80045a6:	494a      	ldr	r1, [pc, #296]	@ (80046d0 <GPS_GGA+0x4b8>)
 80045a8:	2000      	movs	r0, #0
 80045aa:	f007 fd27 	bl	800bffc <strtok>
 80045ae:	4602      	mov	r2, r0
 80045b0:	f107 0314 	add.w	r3, r7, #20
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f007 fdf6 	bl	800c1a8 <strcpy>
            		                        if (captura[0]=='W') longitud=-longitud;
 80045bc:	7d3b      	ldrb	r3, [r7, #20]
 80045be:	2b57      	cmp	r3, #87	@ 0x57
 80045c0:	d108      	bne.n	80045d4 <GPS_GGA+0x3bc>
 80045c2:	4b46      	ldr	r3, [pc, #280]	@ (80046dc <GPS_GGA+0x4c4>)
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	4614      	mov	r4, r2
 80045ca:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80045ce:	4b43      	ldr	r3, [pc, #268]	@ (80046dc <GPS_GGA+0x4c4>)
 80045d0:	e9c3 4500 	strd	r4, r5, [r3]

            		                        strcpy(captura, strtok(0, ","));
 80045d4:	493e      	ldr	r1, [pc, #248]	@ (80046d0 <GPS_GGA+0x4b8>)
 80045d6:	2000      	movs	r0, #0
 80045d8:	f007 fd10 	bl	800bffc <strtok>
 80045dc:	4602      	mov	r2, r0
 80045de:	f107 0314 	add.w	r3, r7, #20
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f007 fddf 	bl	800c1a8 <strcpy>
            		                         gps_modo=atoi(captura);// calidas gps
 80045ea:	f107 0314 	add.w	r3, r7, #20
 80045ee:	4618      	mov	r0, r3
 80045f0:	f006 fa58 	bl	800aaa4 <atoi>
 80045f4:	4603      	mov	r3, r0
 80045f6:	b25a      	sxtb	r2, r3
 80045f8:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <GPS_GGA+0x4c8>)
 80045fa:	701a      	strb	r2, [r3, #0]

             		                        strcpy(captura, strtok(0, ","));
 80045fc:	4934      	ldr	r1, [pc, #208]	@ (80046d0 <GPS_GGA+0x4b8>)
 80045fe:	2000      	movs	r0, #0
 8004600:	f007 fcfc 	bl	800bffc <strtok>
 8004604:	4602      	mov	r2, r0
 8004606:	f107 0314 	add.w	r3, r7, #20
 800460a:	4611      	mov	r1, r2
 800460c:	4618      	mov	r0, r3
 800460e:	f007 fdcb 	bl	800c1a8 <strcpy>
             		                         gps_satelites=atoi(captura);// calidas gps
 8004612:	f107 0314 	add.w	r3, r7, #20
 8004616:	4618      	mov	r0, r3
 8004618:	f006 fa44 	bl	800aaa4 <atoi>
 800461c:	4603      	mov	r3, r0
 800461e:	b25a      	sxtb	r2, r3
 8004620:	4b30      	ldr	r3, [pc, #192]	@ (80046e4 <GPS_GGA+0x4cc>)
 8004622:	701a      	strb	r2, [r3, #0]

              		                        strcpy(captura, strtok(0, ","));
 8004624:	492a      	ldr	r1, [pc, #168]	@ (80046d0 <GPS_GGA+0x4b8>)
 8004626:	2000      	movs	r0, #0
 8004628:	f007 fce8 	bl	800bffc <strtok>
 800462c:	4602      	mov	r2, r0
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f007 fdb7 	bl	800c1a8 <strcpy>
              		                         gps_hor_dilu=atof(captura);// calidas gps
 800463a:	f107 0314 	add.w	r3, r7, #20
 800463e:	4618      	mov	r0, r3
 8004640:	f006 fa2a 	bl	800aa98 <atof>
 8004644:	ec53 2b10 	vmov	r2, r3, d0
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	f7fc fad4 	bl	8000bf8 <__aeabi_d2f>
 8004650:	4603      	mov	r3, r0
 8004652:	4a25      	ldr	r2, [pc, #148]	@ (80046e8 <GPS_GGA+0x4d0>)
 8004654:	6013      	str	r3, [r2, #0]

               		                        strcpy(captura, strtok(0, ","));
 8004656:	491e      	ldr	r1, [pc, #120]	@ (80046d0 <GPS_GGA+0x4b8>)
 8004658:	2000      	movs	r0, #0
 800465a:	f007 fccf 	bl	800bffc <strtok>
 800465e:	4602      	mov	r2, r0
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f007 fd9e 	bl	800c1a8 <strcpy>
               		                         gps_altura=atof(captura);// calidas gps
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	4618      	mov	r0, r3
 8004672:	f006 fa11 	bl	800aa98 <atof>
 8004676:	ec53 2b10 	vmov	r2, r3, d0
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	f7fc fabb 	bl	8000bf8 <__aeabi_d2f>
 8004682:	4603      	mov	r3, r0
 8004684:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <GPS_GGA+0x4d4>)
 8004686:	6013      	str	r3, [r2, #0]
                		                      //si la unidad es Kilometros
               		                         strcpy(captura, strtok(0, ","));  //captura siguiente coma  //orientacion o signo de la long
 8004688:	4911      	ldr	r1, [pc, #68]	@ (80046d0 <GPS_GGA+0x4b8>)
 800468a:	2000      	movs	r0, #0
 800468c:	f007 fcb6 	bl	800bffc <strtok>
 8004690:	4602      	mov	r2, r0
 8004692:	f107 0314 	add.w	r3, r7, #20
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f007 fd85 	bl	800c1a8 <strcpy>

               		                         if (captura[0]=='K')  gps_altura=1000*gps_altura;
 800469e:	7d3b      	ldrb	r3, [r7, #20]
 80046a0:	2b4b      	cmp	r3, #75	@ 0x4b
 80046a2:	d109      	bne.n	80046b8 <GPS_GGA+0x4a0>
 80046a4:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <GPS_GGA+0x4d4>)
 80046a6:	edd3 7a00 	vldr	s15, [r3]
 80046aa:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80046f0 <GPS_GGA+0x4d8>
 80046ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b2:	4b0e      	ldr	r3, [pc, #56]	@ (80046ec <GPS_GGA+0x4d4>)
 80046b4:	edc3 7a00 	vstr	s15, [r3]


                           return(1);
 80046b8:	2301      	movs	r3, #1
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3790      	adds	r7, #144	@ 0x90
 80046be:	46bd      	mov	sp, r7
 80046c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046c4:	20000f35 	.word	0x20000f35
 80046c8:	20000f30 	.word	0x20000f30
 80046cc:	20000f31 	.word	0x20000f31
 80046d0:	08011a4c 	.word	0x08011a4c
 80046d4:	404e0000 	.word	0x404e0000
 80046d8:	20000f20 	.word	0x20000f20
 80046dc:	20000f28 	.word	0x20000f28
 80046e0:	20000f48 	.word	0x20000f48
 80046e4:	20000f49 	.word	0x20000f49
 80046e8:	20000f4c 	.word	0x20000f4c
 80046ec:	20000f50 	.word	0x20000f50
 80046f0:	447a0000 	.word	0x447a0000

080046f4 <GPS_Interrupt>:

void GPS_Interrupt( UART_HandleTypeDef *huart,uint16_t sizex)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	807b      	strh	r3, [r7, #2]
	if ((GPS_UARTRX .flag_rx==0)&& (huart->Instance == GPS_UARTRX .usart_instance))//si es el uart de datos
 8004700:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <GPS_Interrupt+0x40>)
 8004702:	7f1b      	ldrb	r3, [r3, #28]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d110      	bne.n	800472a <GPS_Interrupt+0x36>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <GPS_Interrupt+0x40>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	d10a      	bne.n	800472a <GPS_Interrupt+0x36>
			{
			HAL_UART_DMAStop(GPS_UARTRX .huart);  //para la recepcion temporarmente
 8004714:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <GPS_Interrupt+0x40>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f004 ffde 	bl	80096da <HAL_UART_DMAStop>
			GPS_UARTRX .num_datos=sizex;
 800471e:	4a05      	ldr	r2, [pc, #20]	@ (8004734 <GPS_Interrupt+0x40>)
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	8413      	strh	r3, [r2, #32]
			GPS_UARTRX .flag_rx=1;
 8004724:	4b03      	ldr	r3, [pc, #12]	@ (8004734 <GPS_Interrupt+0x40>)
 8004726:	2201      	movs	r2, #1
 8004728:	771a      	strb	r2, [r3, #28]
			 }


}
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000004 	.word	0x20000004

08004738 <Kalman_Init>:
Kalman_f  kalman_pitch_;
float kalman_roll,kalman_pitch;


void Kalman_Init(Kalman_f  *kalman)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
    kalman->angle = 0.0f;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
    kalman->bias = 0.0f;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	605a      	str	r2, [r3, #4]
    kalman->P[0][0] = 1.0f;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004756:	609a      	str	r2, [r3, #8]
    kalman->P[0][1] = 0.0f;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	60da      	str	r2, [r3, #12]
    kalman->P[1][0] = 0.0f;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	611a      	str	r2, [r3, #16]
    kalman->P[1][1] = 1.0f;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800476e:	615a      	str	r2, [r3, #20]
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <Kalman_Update>:

float Kalman_Update(Kalman_f *kalman, float acc_angle, float gyro_rate, float dt) {
 800477c:	b480      	push	{r7}
 800477e:	b08f      	sub	sp, #60	@ 0x3c
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	ed87 0a02 	vstr	s0, [r7, #8]
 8004788:	edc7 0a01 	vstr	s1, [r7, #4]
 800478c:	ed87 1a00 	vstr	s2, [r7]

	// Parámetros del modelo
    //float Q_angle = 0.008f;  // Ruido del proceso (para el ángulo)
    //float Q_bias  = 0.003f;  // Ruido del proceso (para el sesgo del gyro)
    //float R_measure = 0.01f; // Ruido de la medida (del acelerómetro)
	float Q_angle = 0.008f;  // Ruido del proceso (para el ángulo)
 8004790:	4b79      	ldr	r3, [pc, #484]	@ (8004978 <Kalman_Update+0x1fc>)
 8004792:	637b      	str	r3, [r7, #52]	@ 0x34
	float Q_bias  = 0.003f;  // Ruido del proceso (para el sesgo del gyro)
 8004794:	4b79      	ldr	r3, [pc, #484]	@ (800497c <Kalman_Update+0x200>)
 8004796:	633b      	str	r3, [r7, #48]	@ 0x30
	float R_measure = 0.01f; // Ruido de la medida (del acelerómetro)
 8004798:	4b79      	ldr	r3, [pc, #484]	@ (8004980 <Kalman_Update+0x204>)
 800479a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Predicción
    float rate = gyro_rate - kalman->bias;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	edd3 7a01 	vldr	s15, [r3, #4]
 80047a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80047a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047aa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    kalman->angle += dt * rate;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	ed93 7a00 	vldr	s14, [r3]
 80047b4:	edd7 6a00 	vldr	s13, [r7]
 80047b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80047bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	edc3 7a00 	vstr	s15, [r3]

    // Actualización de matriz de error P
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + Q_angle);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	edd3 6a05 	vldr	s13, [r3, #20]
 80047d6:	edd7 7a00 	vldr	s15, [r7]
 80047da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80047e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80047ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80047f2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80047f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80047fa:	edd7 7a00 	vldr	s15, [r7]
 80047fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	edc3 7a02 	vstr	s15, [r3, #8]
    kalman->P[0][1] -= dt * kalman->P[1][1];
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	edd3 6a05 	vldr	s13, [r3, #20]
 8004818:	edd7 7a00 	vldr	s15, [r7]
 800481c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->P[1][0] -= dt * kalman->P[1][1];
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	edd3 6a05 	vldr	s13, [r3, #20]
 8004836:	edd7 7a00 	vldr	s15, [r7]
 800483a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800483e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	edc3 7a04 	vstr	s15, [r3, #16]
    kalman->P[1][1] += Q_bias * dt;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	ed93 7a05 	vldr	s14, [r3, #20]
 800484e:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8004852:	edd7 7a00 	vldr	s15, [r7]
 8004856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800485a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	edc3 7a05 	vstr	s15, [r3, #20]

    // Corrección
    float y = acc_angle - kalman->angle;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	ed97 7a02 	vldr	s14, [r7, #8]
 800486e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004872:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float S = kalman->P[0][0] + R_measure;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	edd3 7a02 	vldr	s15, [r3, #8]
 800487c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004884:	edc7 7a08 	vstr	s15, [r7, #32]
    float K0 = kalman->P[0][0] / S;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	edd3 6a02 	vldr	s13, [r3, #8]
 800488e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
    float K1 = kalman->P[1][0] / S;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	edd3 6a04 	vldr	s13, [r3, #16]
 80048a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80048a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a8:	edc7 7a06 	vstr	s15, [r7, #24]

    kalman->angle += K0 * y;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	ed93 7a00 	vldr	s14, [r3]
 80048b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80048ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	edc3 7a00 	vstr	s15, [r3]
    kalman->bias  += K1 * y;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80048ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80048d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80048d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	edc3 7a01 	vstr	s15, [r3, #4]

    float P00_temp = kalman->P[0][0];
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	617b      	str	r3, [r7, #20]
    float P01_temp = kalman->P[0][1];
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	613b      	str	r3, [r7, #16]

    kalman->P[0][0] -= K0 * P00_temp;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80048f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80048fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	edc3 7a02 	vstr	s15, [r3, #8]
    kalman->P[0][1] -= K0 * P01_temp;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004912:	edd7 6a07 	vldr	s13, [r7, #28]
 8004916:	edd7 7a04 	vldr	s15, [r7, #16]
 800491a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800491e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->P[1][0] -= K1 * P00_temp;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	ed93 7a04 	vldr	s14, [r3, #16]
 800492e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004932:	edd7 7a05 	vldr	s15, [r7, #20]
 8004936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800493a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	edc3 7a04 	vstr	s15, [r3, #16]
    kalman->P[1][1] -= K1 * P01_temp;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	ed93 7a05 	vldr	s14, [r3, #20]
 800494a:	edd7 6a06 	vldr	s13, [r7, #24]
 800494e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	edc3 7a05 	vstr	s15, [r3, #20]

    return kalman->angle;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	ee07 3a90 	vmov	s15, r3
}
 8004968:	eeb0 0a67 	vmov.f32	s0, s15
 800496c:	373c      	adds	r7, #60	@ 0x3c
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	3c03126f 	.word	0x3c03126f
 800497c:	3b449ba6 	.word	0x3b449ba6
 8004980:	3c23d70a 	.word	0x3c23d70a

08004984 <uartx_write>:
#include "uart.h"
#include "stdio.h"
#include "string.h"

void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 8004990:	1cf9      	adds	r1, r7, #3
 8004992:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004996:	2201      	movs	r2, #1
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f004 fe13 	bl	80095c4 <HAL_UART_Transmit>

}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, uint8_t *info)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 80049b0:	e007      	b.n	80049c2 <uartx_write_text+0x1c>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	603a      	str	r2, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff ffe1 	bl	8004984 <uartx_write>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f3      	bne.n	80049b2 <uartx_write_text+0xc>

}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a14 <HAL_Init+0x40>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004a14 <HAL_Init+0x40>)
 80049de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <HAL_Init+0x40>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004a14 <HAL_Init+0x40>)
 80049ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049f0:	4b08      	ldr	r3, [pc, #32]	@ (8004a14 <HAL_Init+0x40>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a07      	ldr	r2, [pc, #28]	@ (8004a14 <HAL_Init+0x40>)
 80049f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049fc:	2003      	movs	r0, #3
 80049fe:	f000 fe79 	bl	80056f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a02:	2000      	movs	r0, #0
 8004a04:	f000 f808 	bl	8004a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a08:	f7fd f9f6 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40023c00 	.word	0x40023c00

08004a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a20:	4b12      	ldr	r3, [pc, #72]	@ (8004a6c <HAL_InitTick+0x54>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b12      	ldr	r3, [pc, #72]	@ (8004a70 <HAL_InitTick+0x58>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fe91 	bl	800575e <HAL_SYSTICK_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e00e      	b.n	8004a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b0f      	cmp	r3, #15
 8004a4a:	d80a      	bhi.n	8004a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	f000 fe59 	bl	800570a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a58:	4a06      	ldr	r2, [pc, #24]	@ (8004a74 <HAL_InitTick+0x5c>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e000      	b.n	8004a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000000 	.word	0x20000000
 8004a70:	20000030 	.word	0x20000030
 8004a74:	2000002c 	.word	0x2000002c

08004a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a7c:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <HAL_IncTick+0x20>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <HAL_IncTick+0x24>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4413      	add	r3, r2
 8004a88:	4a04      	ldr	r2, [pc, #16]	@ (8004a9c <HAL_IncTick+0x24>)
 8004a8a:	6013      	str	r3, [r2, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000030 	.word	0x20000030
 8004a9c:	20000f8c 	.word	0x20000f8c

08004aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8004aa4:	4b03      	ldr	r3, [pc, #12]	@ (8004ab4 <HAL_GetTick+0x14>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000f8c 	.word	0x20000f8c

08004ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ac0:	f7ff ffee 	bl	8004aa0 <HAL_GetTick>
 8004ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d005      	beq.n	8004ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <HAL_Delay+0x44>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ade:	bf00      	nop
 8004ae0:	f7ff ffde 	bl	8004aa0 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d8f7      	bhi.n	8004ae0 <HAL_Delay+0x28>
  {
  }
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000030 	.word	0x20000030

08004b00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e033      	b.n	8004b7e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd f992 	bl	8001e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d118      	bne.n	8004b70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004b46:	f023 0302 	bic.w	r3, r3, #2
 8004b4a:	f043 0202 	orr.w	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fbf8 	bl	8005348 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	f043 0201 	orr.w	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b6e:	e001      	b.n	8004b74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_ADC_Start+0x1a>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e097      	b.n	8004cd2 <HAL_ADC_Start+0x14a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d018      	beq.n	8004bea <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004bc8:	4b45      	ldr	r3, [pc, #276]	@ (8004ce0 <HAL_ADC_Start+0x158>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a45      	ldr	r2, [pc, #276]	@ (8004ce4 <HAL_ADC_Start+0x15c>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	0c9a      	lsrs	r2, r3, #18
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	4413      	add	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004bdc:	e002      	b.n	8004be4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f9      	bne.n	8004bde <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d15f      	bne.n	8004cb8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c36:	d106      	bne.n	8004c46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3c:	f023 0206 	bic.w	r2, r3, #6
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	645a      	str	r2, [r3, #68]	@ 0x44
 8004c44:	e002      	b.n	8004c4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c54:	4b24      	ldr	r3, [pc, #144]	@ (8004ce8 <HAL_ADC_Start+0x160>)
 8004c56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004c60:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10f      	bne.n	8004c8e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d129      	bne.n	8004cd0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c8a:	609a      	str	r2, [r3, #8]
 8004c8c:	e020      	b.n	8004cd0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a16      	ldr	r2, [pc, #88]	@ (8004cec <HAL_ADC_Start+0x164>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d11b      	bne.n	8004cd0 <HAL_ADC_Start+0x148>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d114      	bne.n	8004cd0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004cb4:	609a      	str	r2, [r3, #8]
 8004cb6:	e00b      	b.n	8004cd0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbc:	f043 0210 	orr.w	r2, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc8:	f043 0201 	orr.w	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	431bde83 	.word	0x431bde83
 8004ce8:	40012300 	.word	0x40012300
 8004cec:	40012000 	.word	0x40012000

08004cf0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_ADC_Stop+0x16>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e021      	b.n	8004d4a <HAL_ADC_Stop+0x5a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	f043 0201 	orr.w	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d72:	d113      	bne.n	8004d9c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d82:	d10b      	bne.n	8004d9c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e063      	b.n	8004e64 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d9c:	f7ff fe80 	bl	8004aa0 <HAL_GetTick>
 8004da0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004da2:	e021      	b.n	8004de8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d01d      	beq.n	8004de8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_ADC_PollForConversion+0x6c>
 8004db2:	f7ff fe75 	bl	8004aa0 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d212      	bcs.n	8004de8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d00b      	beq.n	8004de8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	f043 0204 	orr.w	r2, r3, #4
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e03d      	b.n	8004e64 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d1d6      	bne.n	8004da4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f06f 0212 	mvn.w	r2, #18
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d123      	bne.n	8004e62 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11f      	bne.n	8004e62 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d006      	beq.n	8004e3e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d111      	bne.n	8004e62 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d105      	bne.n	8004e62 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d049      	beq.n	8004f36 <HAL_ADC_IRQHandler+0xca>
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d046      	beq.n	8004f36 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d12b      	bne.n	8004f26 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d127      	bne.n	8004f26 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d006      	beq.n	8004ef2 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d119      	bne.n	8004f26 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0220 	bic.w	r2, r2, #32
 8004f00:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d105      	bne.n	8004f26 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	f043 0201 	orr.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f8bd 	bl	80050a6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0212 	mvn.w	r2, #18
 8004f34:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f44:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d057      	beq.n	8004ffc <HAL_ADC_IRQHandler+0x190>
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d054      	beq.n	8004ffc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d139      	bne.n	8004fec <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d006      	beq.n	8004f94 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d12b      	bne.n	8004fec <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d124      	bne.n	8004fec <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d11d      	bne.n	8004fec <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d119      	bne.n	8004fec <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fc6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fcc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d105      	bne.n	8004fec <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	f043 0201 	orr.w	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 faa7 	bl	8005540 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f06f 020c 	mvn.w	r2, #12
 8004ffa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d017      	beq.n	8005042 <HAL_ADC_IRQHandler+0x1d6>
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d014      	beq.n	8005042 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d10d      	bne.n	8005042 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f841 	bl	80050ba <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0201 	mvn.w	r2, #1
 8005040:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005050:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d015      	beq.n	8005084 <HAL_ADC_IRQHandler+0x218>
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d012      	beq.n	8005084 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	f043 0202 	orr.w	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0220 	mvn.w	r2, #32
 8005072:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f82a 	bl	80050ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f06f 0220 	mvn.w	r2, #32
 8005082:	601a      	str	r2, [r3, #0]
  }
}
 8005084:	bf00      	nop
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x1c>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e113      	b.n	8005328 <HAL_ADC_ConfigChannel+0x244>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b09      	cmp	r3, #9
 800510e:	d925      	bls.n	800515c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68d9      	ldr	r1, [r3, #12]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	4613      	mov	r3, r2
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	4413      	add	r3, r2
 8005124:	3b1e      	subs	r3, #30
 8005126:	2207      	movs	r2, #7
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43da      	mvns	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	400a      	ands	r2, r1
 8005134:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68d9      	ldr	r1, [r3, #12]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	4618      	mov	r0, r3
 8005148:	4603      	mov	r3, r0
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4403      	add	r3, r0
 800514e:	3b1e      	subs	r3, #30
 8005150:	409a      	lsls	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	e022      	b.n	80051a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6919      	ldr	r1, [r3, #16]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	4613      	mov	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4413      	add	r3, r2
 8005170:	2207      	movs	r2, #7
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43da      	mvns	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	400a      	ands	r2, r1
 800517e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6919      	ldr	r1, [r3, #16]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	4618      	mov	r0, r3
 8005192:	4603      	mov	r3, r0
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	4403      	add	r3, r0
 8005198:	409a      	lsls	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b06      	cmp	r3, #6
 80051a8:	d824      	bhi.n	80051f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	3b05      	subs	r3, #5
 80051bc:	221f      	movs	r2, #31
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43da      	mvns	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	400a      	ands	r2, r1
 80051ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	4618      	mov	r0, r3
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	3b05      	subs	r3, #5
 80051e6:	fa00 f203 	lsl.w	r2, r0, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80051f2:	e04c      	b.n	800528e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b0c      	cmp	r3, #12
 80051fa:	d824      	bhi.n	8005246 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	3b23      	subs	r3, #35	@ 0x23
 800520e:	221f      	movs	r2, #31
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	43da      	mvns	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	400a      	ands	r2, r1
 800521c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	4618      	mov	r0, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	3b23      	subs	r3, #35	@ 0x23
 8005238:	fa00 f203 	lsl.w	r2, r0, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30
 8005244:	e023      	b.n	800528e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	3b41      	subs	r3, #65	@ 0x41
 8005258:	221f      	movs	r2, #31
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43da      	mvns	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	400a      	ands	r2, r1
 8005266:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	4618      	mov	r0, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	3b41      	subs	r3, #65	@ 0x41
 8005282:	fa00 f203 	lsl.w	r2, r0, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800528e:	4b29      	ldr	r3, [pc, #164]	@ (8005334 <HAL_ADC_ConfigChannel+0x250>)
 8005290:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a28      	ldr	r2, [pc, #160]	@ (8005338 <HAL_ADC_ConfigChannel+0x254>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d10f      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x1d8>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b12      	cmp	r3, #18
 80052a2:	d10b      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005338 <HAL_ADC_ConfigChannel+0x254>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d12b      	bne.n	800531e <HAL_ADC_ConfigChannel+0x23a>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1c      	ldr	r2, [pc, #112]	@ (800533c <HAL_ADC_ConfigChannel+0x258>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <HAL_ADC_ConfigChannel+0x1f4>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b11      	cmp	r3, #17
 80052d6:	d122      	bne.n	800531e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a11      	ldr	r2, [pc, #68]	@ (800533c <HAL_ADC_ConfigChannel+0x258>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d111      	bne.n	800531e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052fa:	4b11      	ldr	r3, [pc, #68]	@ (8005340 <HAL_ADC_ConfigChannel+0x25c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a11      	ldr	r2, [pc, #68]	@ (8005344 <HAL_ADC_ConfigChannel+0x260>)
 8005300:	fba2 2303 	umull	r2, r3, r2, r3
 8005304:	0c9a      	lsrs	r2, r3, #18
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005310:	e002      	b.n	8005318 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	3b01      	subs	r3, #1
 8005316:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f9      	bne.n	8005312 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40012300 	.word	0x40012300
 8005338:	40012000 	.word	0x40012000
 800533c:	10000012 	.word	0x10000012
 8005340:	20000000 	.word	0x20000000
 8005344:	431bde83 	.word	0x431bde83

08005348 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005350:	4b79      	ldr	r3, [pc, #484]	@ (8005538 <ADC_Init+0x1f0>)
 8005352:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	431a      	orrs	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800537c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	021a      	lsls	r2, r3, #8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80053a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6859      	ldr	r1, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6899      	ldr	r1, [r3, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053da:	4a58      	ldr	r2, [pc, #352]	@ (800553c <ADC_Init+0x1f4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d022      	beq.n	8005426 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6899      	ldr	r1, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6899      	ldr	r1, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	e00f      	b.n	8005446 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005444:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0202 	bic.w	r2, r2, #2
 8005454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6899      	ldr	r1, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	7e1b      	ldrb	r3, [r3, #24]
 8005460:	005a      	lsls	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01b      	beq.n	80054ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005482:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005492:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6859      	ldr	r1, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549e:	3b01      	subs	r3, #1
 80054a0:	035a      	lsls	r2, r3, #13
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	e007      	b.n	80054bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80054ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	051a      	lsls	r2, r3, #20
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80054f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6899      	ldr	r1, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80054fe:	025a      	lsls	r2, r3, #9
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6899      	ldr	r1, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	029a      	lsls	r2, r3, #10
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	609a      	str	r2, [r3, #8]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	40012300 	.word	0x40012300
 800553c:	0f000001 	.word	0x0f000001

08005540 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005564:	4b0c      	ldr	r3, [pc, #48]	@ (8005598 <__NVIC_SetPriorityGrouping+0x44>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005570:	4013      	ands	r3, r2
 8005572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800557c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005586:	4a04      	ldr	r2, [pc, #16]	@ (8005598 <__NVIC_SetPriorityGrouping+0x44>)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	60d3      	str	r3, [r2, #12]
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	e000ed00 	.word	0xe000ed00

0800559c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055a0:	4b04      	ldr	r3, [pc, #16]	@ (80055b4 <__NVIC_GetPriorityGrouping+0x18>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	0a1b      	lsrs	r3, r3, #8
 80055a6:	f003 0307 	and.w	r3, r3, #7
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	e000ed00 	.word	0xe000ed00

080055b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	db0b      	blt.n	80055e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	f003 021f 	and.w	r2, r3, #31
 80055d0:	4907      	ldr	r1, [pc, #28]	@ (80055f0 <__NVIC_EnableIRQ+0x38>)
 80055d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	2001      	movs	r0, #1
 80055da:	fa00 f202 	lsl.w	r2, r0, r2
 80055de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	e000e100 	.word	0xe000e100

080055f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	6039      	str	r1, [r7, #0]
 80055fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005604:	2b00      	cmp	r3, #0
 8005606:	db0a      	blt.n	800561e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	490c      	ldr	r1, [pc, #48]	@ (8005640 <__NVIC_SetPriority+0x4c>)
 800560e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005612:	0112      	lsls	r2, r2, #4
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	440b      	add	r3, r1
 8005618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800561c:	e00a      	b.n	8005634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	4908      	ldr	r1, [pc, #32]	@ (8005644 <__NVIC_SetPriority+0x50>)
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	3b04      	subs	r3, #4
 800562c:	0112      	lsls	r2, r2, #4
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	440b      	add	r3, r1
 8005632:	761a      	strb	r2, [r3, #24]
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	e000e100 	.word	0xe000e100
 8005644:	e000ed00 	.word	0xe000ed00

08005648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005648:	b480      	push	{r7}
 800564a:	b089      	sub	sp, #36	@ 0x24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f1c3 0307 	rsb	r3, r3, #7
 8005662:	2b04      	cmp	r3, #4
 8005664:	bf28      	it	cs
 8005666:	2304      	movcs	r3, #4
 8005668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	3304      	adds	r3, #4
 800566e:	2b06      	cmp	r3, #6
 8005670:	d902      	bls.n	8005678 <NVIC_EncodePriority+0x30>
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3b03      	subs	r3, #3
 8005676:	e000      	b.n	800567a <NVIC_EncodePriority+0x32>
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800567c:	f04f 32ff 	mov.w	r2, #4294967295
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43da      	mvns	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	401a      	ands	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005690:	f04f 31ff 	mov.w	r1, #4294967295
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	fa01 f303 	lsl.w	r3, r1, r3
 800569a:	43d9      	mvns	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a0:	4313      	orrs	r3, r2
         );
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3724      	adds	r7, #36	@ 0x24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056c0:	d301      	bcc.n	80056c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056c2:	2301      	movs	r3, #1
 80056c4:	e00f      	b.n	80056e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056c6:	4a0a      	ldr	r2, [pc, #40]	@ (80056f0 <SysTick_Config+0x40>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056ce:	210f      	movs	r1, #15
 80056d0:	f04f 30ff 	mov.w	r0, #4294967295
 80056d4:	f7ff ff8e 	bl	80055f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <SysTick_Config+0x40>)
 80056da:	2200      	movs	r2, #0
 80056dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056de:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <SysTick_Config+0x40>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	e000e010 	.word	0xe000e010

080056f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ff29 	bl	8005554 <__NVIC_SetPriorityGrouping>
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800570a:	b580      	push	{r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af00      	add	r7, sp, #0
 8005710:	4603      	mov	r3, r0
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	607a      	str	r2, [r7, #4]
 8005716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800571c:	f7ff ff3e 	bl	800559c <__NVIC_GetPriorityGrouping>
 8005720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	6978      	ldr	r0, [r7, #20]
 8005728:	f7ff ff8e 	bl	8005648 <NVIC_EncodePriority>
 800572c:	4602      	mov	r2, r0
 800572e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005732:	4611      	mov	r1, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff ff5d 	bl	80055f4 <__NVIC_SetPriority>
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	4603      	mov	r3, r0
 800574a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800574c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff31 	bl	80055b8 <__NVIC_EnableIRQ>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff ffa2 	bl	80056b0 <SysTick_Config>
 800576c:	4603      	mov	r3, r0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005784:	f7ff f98c 	bl	8004aa0 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e099      	b.n	80058c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057b4:	e00f      	b.n	80057d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057b6:	f7ff f973 	bl	8004aa0 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d908      	bls.n	80057d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2203      	movs	r2, #3
 80057ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e078      	b.n	80058c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e8      	bne.n	80057b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4b38      	ldr	r3, [pc, #224]	@ (80058d0 <HAL_DMA_Init+0x158>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800580e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800581a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	2b04      	cmp	r3, #4
 800582e:	d107      	bne.n	8005840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005838:	4313      	orrs	r3, r2
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0307 	bic.w	r3, r3, #7
 8005856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005866:	2b04      	cmp	r3, #4
 8005868:	d117      	bne.n	800589a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00e      	beq.n	800589a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fb01 	bl	8005e84 <DMA_CheckFifoParam>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2240      	movs	r2, #64	@ 0x40
 800588c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005896:	2301      	movs	r3, #1
 8005898:	e016      	b.n	80058c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fab8 	bl	8005e18 <DMA_CalcBaseAndBitshift>
 80058a8:	4603      	mov	r3, r0
 80058aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b0:	223f      	movs	r2, #63	@ 0x3f
 80058b2:	409a      	lsls	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	f010803f 	.word	0xf010803f

080058d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_DMA_Start_IT+0x26>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e040      	b.n	800597c <HAL_DMA_Start_IT+0xa8>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b01      	cmp	r3, #1
 800590c:	d12f      	bne.n	800596e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fa4a 	bl	8005dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592c:	223f      	movs	r2, #63	@ 0x3f
 800592e:	409a      	lsls	r2, r3
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0216 	orr.w	r2, r2, #22
 8005942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0208 	orr.w	r2, r2, #8
 800595a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e005      	b.n	800597a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005976:	2302      	movs	r3, #2
 8005978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005992:	f7ff f885 	bl	8004aa0 <HAL_GetTick>
 8005996:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d008      	beq.n	80059b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2280      	movs	r2, #128	@ 0x80
 80059a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e052      	b.n	8005a5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0216 	bic.w	r2, r2, #22
 80059c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695a      	ldr	r2, [r3, #20]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d103      	bne.n	80059e6 <HAL_DMA_Abort+0x62>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0208 	bic.w	r2, r2, #8
 80059f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a06:	e013      	b.n	8005a30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a08:	f7ff f84a 	bl	8004aa0 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d90c      	bls.n	8005a30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2203      	movs	r2, #3
 8005a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e015      	b.n	8005a5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e4      	bne.n	8005a08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a42:	223f      	movs	r2, #63	@ 0x3f
 8005a44:	409a      	lsls	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d004      	beq.n	8005a82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2280      	movs	r2, #128	@ 0x80
 8005a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e00c      	b.n	8005a9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2205      	movs	r2, #5
 8005a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0201 	bic.w	r2, r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8005cf0 <HAL_DMA_IRQHandler+0x248>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a8e      	ldr	r2, [pc, #568]	@ (8005cf4 <HAL_DMA_IRQHandler+0x24c>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	0a9b      	lsrs	r3, r3, #10
 8005ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	409a      	lsls	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01a      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d013      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0204 	bic.w	r2, r2, #4
 8005afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b00:	2208      	movs	r2, #8
 8005b02:	409a      	lsls	r2, r3
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0c:	f043 0201 	orr.w	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b18:	2201      	movs	r2, #1
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d012      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b36:	2201      	movs	r2, #1
 8005b38:	409a      	lsls	r2, r3
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b42:	f043 0202 	orr.w	r2, r3, #2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b4e:	2204      	movs	r2, #4
 8005b50:	409a      	lsls	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d012      	beq.n	8005b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	409a      	lsls	r2, r3
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b78:	f043 0204 	orr.w	r2, r3, #4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b84:	2210      	movs	r2, #16
 8005b86:	409a      	lsls	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d043      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d03c      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	409a      	lsls	r2, r3
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d018      	beq.n	8005bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d108      	bne.n	8005bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d024      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4798      	blx	r3
 8005bd6:	e01f      	b.n	8005c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01b      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	4798      	blx	r3
 8005be8:	e016      	b.n	8005c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d107      	bne.n	8005c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0208 	bic.w	r2, r2, #8
 8005c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 808f 	beq.w	8005d48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8087 	beq.w	8005d48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3e:	2220      	movs	r2, #32
 8005c40:	409a      	lsls	r2, r3
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d136      	bne.n	8005cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0216 	bic.w	r2, r2, #22
 8005c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695a      	ldr	r2, [r3, #20]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <HAL_DMA_IRQHandler+0x1da>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0208 	bic.w	r2, r2, #8
 8005c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c96:	223f      	movs	r2, #63	@ 0x3f
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d07e      	beq.n	8005db4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4798      	blx	r3
        }
        return;
 8005cbe:	e079      	b.n	8005db4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01d      	beq.n	8005d0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10d      	bne.n	8005cf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d031      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
 8005cec:	e02c      	b.n	8005d48 <HAL_DMA_IRQHandler+0x2a0>
 8005cee:	bf00      	nop
 8005cf0:	20000000 	.word	0x20000000
 8005cf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d023      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4798      	blx	r3
 8005d08:	e01e      	b.n	8005d48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10f      	bne.n	8005d38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0210 	bic.w	r2, r2, #16
 8005d26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d032      	beq.n	8005db6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d022      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2205      	movs	r2, #5
 8005d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d307      	bcc.n	8005d90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f2      	bne.n	8005d74 <HAL_DMA_IRQHandler+0x2cc>
 8005d8e:	e000      	b.n	8005d92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005d90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
 8005db2:	e000      	b.n	8005db6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005db4:	bf00      	nop
    }
  }
}
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b40      	cmp	r3, #64	@ 0x40
 8005de8:	d108      	bne.n	8005dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005dfa:	e007      	b.n	8005e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	60da      	str	r2, [r3, #12]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	3b10      	subs	r3, #16
 8005e28:	4a14      	ldr	r2, [pc, #80]	@ (8005e7c <DMA_CalcBaseAndBitshift+0x64>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e32:	4a13      	ldr	r2, [pc, #76]	@ (8005e80 <DMA_CalcBaseAndBitshift+0x68>)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d909      	bls.n	8005e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e58:	e007      	b.n	8005e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	aaaaaaab 	.word	0xaaaaaaab
 8005e80:	08011a70 	.word	0x08011a70

08005e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11f      	bne.n	8005ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d856      	bhi.n	8005f52 <DMA_CheckFifoParam+0xce>
 8005ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8005eac <DMA_CheckFifoParam+0x28>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ebd 	.word	0x08005ebd
 8005eb0:	08005ecf 	.word	0x08005ecf
 8005eb4:	08005ebd 	.word	0x08005ebd
 8005eb8:	08005f53 	.word	0x08005f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d046      	beq.n	8005f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ecc:	e043      	b.n	8005f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ed6:	d140      	bne.n	8005f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005edc:	e03d      	b.n	8005f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ee6:	d121      	bne.n	8005f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d837      	bhi.n	8005f5e <DMA_CheckFifoParam+0xda>
 8005eee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <DMA_CheckFifoParam+0x70>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f05 	.word	0x08005f05
 8005ef8:	08005f0b 	.word	0x08005f0b
 8005efc:	08005f05 	.word	0x08005f05
 8005f00:	08005f1d 	.word	0x08005f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
      break;
 8005f08:	e030      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d025      	beq.n	8005f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f1a:	e022      	b.n	8005f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005f24:	d11f      	bne.n	8005f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f2a:	e01c      	b.n	8005f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d903      	bls.n	8005f3a <DMA_CheckFifoParam+0xb6>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d003      	beq.n	8005f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f38:	e018      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f3e:	e015      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00e      	beq.n	8005f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f50:	e00b      	b.n	8005f6a <DMA_CheckFifoParam+0xe6>
      break;
 8005f52:	bf00      	nop
 8005f54:	e00a      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f56:	bf00      	nop
 8005f58:	e008      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e006      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f5e:	bf00      	nop
 8005f60:	e004      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f62:	bf00      	nop
 8005f64:	e002      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8005f66:	bf00      	nop
 8005f68:	e000      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop

08005f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b089      	sub	sp, #36	@ 0x24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	e159      	b.n	800624c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f98:	2201      	movs	r2, #1
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	f040 8148 	bne.w	8006246 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d005      	beq.n	8005fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d130      	bne.n	8006030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	2203      	movs	r2, #3
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006004:	2201      	movs	r2, #1
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	43db      	mvns	r3, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4013      	ands	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 0201 	and.w	r2, r3, #1
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4313      	orrs	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	2b03      	cmp	r3, #3
 800603a:	d017      	beq.n	800606c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	2203      	movs	r2, #3
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	43db      	mvns	r3, r3
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	4013      	ands	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4313      	orrs	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d123      	bne.n	80060c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	08da      	lsrs	r2, r3, #3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3208      	adds	r2, #8
 8006080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	220f      	movs	r2, #15
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	43db      	mvns	r3, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	4013      	ands	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	08da      	lsrs	r2, r3, #3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3208      	adds	r2, #8
 80060ba:	69b9      	ldr	r1, [r7, #24]
 80060bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	2203      	movs	r2, #3
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	43db      	mvns	r3, r3
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4013      	ands	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 0203 	and.w	r2, r3, #3
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80a2 	beq.w	8006246 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	4b57      	ldr	r3, [pc, #348]	@ (8006264 <HAL_GPIO_Init+0x2e8>)
 8006108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610a:	4a56      	ldr	r2, [pc, #344]	@ (8006264 <HAL_GPIO_Init+0x2e8>)
 800610c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006110:	6453      	str	r3, [r2, #68]	@ 0x44
 8006112:	4b54      	ldr	r3, [pc, #336]	@ (8006264 <HAL_GPIO_Init+0x2e8>)
 8006114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800611e:	4a52      	ldr	r2, [pc, #328]	@ (8006268 <HAL_GPIO_Init+0x2ec>)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	089b      	lsrs	r3, r3, #2
 8006124:	3302      	adds	r3, #2
 8006126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	220f      	movs	r2, #15
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	43db      	mvns	r3, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4013      	ands	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a49      	ldr	r2, [pc, #292]	@ (800626c <HAL_GPIO_Init+0x2f0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d019      	beq.n	800617e <HAL_GPIO_Init+0x202>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a48      	ldr	r2, [pc, #288]	@ (8006270 <HAL_GPIO_Init+0x2f4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_GPIO_Init+0x1fe>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a47      	ldr	r2, [pc, #284]	@ (8006274 <HAL_GPIO_Init+0x2f8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00d      	beq.n	8006176 <HAL_GPIO_Init+0x1fa>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a46      	ldr	r2, [pc, #280]	@ (8006278 <HAL_GPIO_Init+0x2fc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d007      	beq.n	8006172 <HAL_GPIO_Init+0x1f6>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a45      	ldr	r2, [pc, #276]	@ (800627c <HAL_GPIO_Init+0x300>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d101      	bne.n	800616e <HAL_GPIO_Init+0x1f2>
 800616a:	2304      	movs	r3, #4
 800616c:	e008      	b.n	8006180 <HAL_GPIO_Init+0x204>
 800616e:	2307      	movs	r3, #7
 8006170:	e006      	b.n	8006180 <HAL_GPIO_Init+0x204>
 8006172:	2303      	movs	r3, #3
 8006174:	e004      	b.n	8006180 <HAL_GPIO_Init+0x204>
 8006176:	2302      	movs	r3, #2
 8006178:	e002      	b.n	8006180 <HAL_GPIO_Init+0x204>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <HAL_GPIO_Init+0x204>
 800617e:	2300      	movs	r3, #0
 8006180:	69fa      	ldr	r2, [r7, #28]
 8006182:	f002 0203 	and.w	r2, r2, #3
 8006186:	0092      	lsls	r2, r2, #2
 8006188:	4093      	lsls	r3, r2
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4313      	orrs	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006190:	4935      	ldr	r1, [pc, #212]	@ (8006268 <HAL_GPIO_Init+0x2ec>)
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	089b      	lsrs	r3, r3, #2
 8006196:	3302      	adds	r3, #2
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800619e:	4b38      	ldr	r3, [pc, #224]	@ (8006280 <HAL_GPIO_Init+0x304>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	43db      	mvns	r3, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	4013      	ands	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006280 <HAL_GPIO_Init+0x304>)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006280 <HAL_GPIO_Init+0x304>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4013      	ands	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061ec:	4a24      	ldr	r2, [pc, #144]	@ (8006280 <HAL_GPIO_Init+0x304>)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061f2:	4b23      	ldr	r3, [pc, #140]	@ (8006280 <HAL_GPIO_Init+0x304>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	43db      	mvns	r3, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4013      	ands	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006216:	4a1a      	ldr	r2, [pc, #104]	@ (8006280 <HAL_GPIO_Init+0x304>)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800621c:	4b18      	ldr	r3, [pc, #96]	@ (8006280 <HAL_GPIO_Init+0x304>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	43db      	mvns	r3, r3
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	4013      	ands	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006240:	4a0f      	ldr	r2, [pc, #60]	@ (8006280 <HAL_GPIO_Init+0x304>)
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3301      	adds	r3, #1
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	2b0f      	cmp	r3, #15
 8006250:	f67f aea2 	bls.w	8005f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	3724      	adds	r7, #36	@ 0x24
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40023800 	.word	0x40023800
 8006268:	40013800 	.word	0x40013800
 800626c:	40020000 	.word	0x40020000
 8006270:	40020400 	.word	0x40020400
 8006274:	40020800 	.word	0x40020800
 8006278:	40020c00 	.word	0x40020c00
 800627c:	40021000 	.word	0x40021000
 8006280:	40013c00 	.word	0x40013c00

08006284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	887b      	ldrh	r3, [r7, #2]
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	e001      	b.n	80062a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062a2:	2300      	movs	r3, #0
 80062a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	807b      	strh	r3, [r7, #2]
 80062c0:	4613      	mov	r3, r2
 80062c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062c4:	787b      	ldrb	r3, [r7, #1]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ca:	887a      	ldrh	r2, [r7, #2]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062d0:	e003      	b.n	80062da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062d2:	887b      	ldrh	r3, [r7, #2]
 80062d4:	041a      	lsls	r2, r3, #16
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	619a      	str	r2, [r3, #24]
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
	...

080062e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e12b      	b.n	8006552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fb fe1a 	bl	8001f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	@ 0x24
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800633a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800634a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800634c:	f002 f8e0 	bl	8008510 <HAL_RCC_GetPCLK1Freq>
 8006350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	4a81      	ldr	r2, [pc, #516]	@ (800655c <HAL_I2C_Init+0x274>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d807      	bhi.n	800636c <HAL_I2C_Init+0x84>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a80      	ldr	r2, [pc, #512]	@ (8006560 <HAL_I2C_Init+0x278>)
 8006360:	4293      	cmp	r3, r2
 8006362:	bf94      	ite	ls
 8006364:	2301      	movls	r3, #1
 8006366:	2300      	movhi	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e006      	b.n	800637a <HAL_I2C_Init+0x92>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a7d      	ldr	r2, [pc, #500]	@ (8006564 <HAL_I2C_Init+0x27c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	bf94      	ite	ls
 8006374:	2301      	movls	r3, #1
 8006376:	2300      	movhi	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e0e7      	b.n	8006552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a78      	ldr	r2, [pc, #480]	@ (8006568 <HAL_I2C_Init+0x280>)
 8006386:	fba2 2303 	umull	r2, r3, r2, r3
 800638a:	0c9b      	lsrs	r3, r3, #18
 800638c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	4a6a      	ldr	r2, [pc, #424]	@ (800655c <HAL_I2C_Init+0x274>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d802      	bhi.n	80063bc <HAL_I2C_Init+0xd4>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	3301      	adds	r3, #1
 80063ba:	e009      	b.n	80063d0 <HAL_I2C_Init+0xe8>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80063c2:	fb02 f303 	mul.w	r3, r2, r3
 80063c6:	4a69      	ldr	r2, [pc, #420]	@ (800656c <HAL_I2C_Init+0x284>)
 80063c8:	fba2 2303 	umull	r2, r3, r2, r3
 80063cc:	099b      	lsrs	r3, r3, #6
 80063ce:	3301      	adds	r3, #1
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80063e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	495c      	ldr	r1, [pc, #368]	@ (800655c <HAL_I2C_Init+0x274>)
 80063ec:	428b      	cmp	r3, r1
 80063ee:	d819      	bhi.n	8006424 <HAL_I2C_Init+0x13c>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1e59      	subs	r1, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80063fe:	1c59      	adds	r1, r3, #1
 8006400:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006404:	400b      	ands	r3, r1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <HAL_I2C_Init+0x138>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	1e59      	subs	r1, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	fbb1 f3f3 	udiv	r3, r1, r3
 8006418:	3301      	adds	r3, #1
 800641a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800641e:	e051      	b.n	80064c4 <HAL_I2C_Init+0x1dc>
 8006420:	2304      	movs	r3, #4
 8006422:	e04f      	b.n	80064c4 <HAL_I2C_Init+0x1dc>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d111      	bne.n	8006450 <HAL_I2C_Init+0x168>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	1e58      	subs	r0, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6859      	ldr	r1, [r3, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	440b      	add	r3, r1
 800643a:	fbb0 f3f3 	udiv	r3, r0, r3
 800643e:	3301      	adds	r3, #1
 8006440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006444:	2b00      	cmp	r3, #0
 8006446:	bf0c      	ite	eq
 8006448:	2301      	moveq	r3, #1
 800644a:	2300      	movne	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	e012      	b.n	8006476 <HAL_I2C_Init+0x18e>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1e58      	subs	r0, r3, #1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6859      	ldr	r1, [r3, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	0099      	lsls	r1, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	fbb0 f3f3 	udiv	r3, r0, r3
 8006466:	3301      	adds	r3, #1
 8006468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf0c      	ite	eq
 8006470:	2301      	moveq	r3, #1
 8006472:	2300      	movne	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <HAL_I2C_Init+0x196>
 800647a:	2301      	movs	r3, #1
 800647c:	e022      	b.n	80064c4 <HAL_I2C_Init+0x1dc>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10e      	bne.n	80064a4 <HAL_I2C_Init+0x1bc>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	1e58      	subs	r0, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	440b      	add	r3, r1
 8006494:	fbb0 f3f3 	udiv	r3, r0, r3
 8006498:	3301      	adds	r3, #1
 800649a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800649e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064a2:	e00f      	b.n	80064c4 <HAL_I2C_Init+0x1dc>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	1e58      	subs	r0, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6859      	ldr	r1, [r3, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	0099      	lsls	r1, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ba:	3301      	adds	r3, #1
 80064bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	6809      	ldr	r1, [r1, #0]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	69da      	ldr	r2, [r3, #28]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80064f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6911      	ldr	r1, [r2, #16]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68d2      	ldr	r2, [r2, #12]
 80064fe:	4311      	orrs	r1, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	430b      	orrs	r3, r1
 8006506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695a      	ldr	r2, [r3, #20]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	000186a0 	.word	0x000186a0
 8006560:	001e847f 	.word	0x001e847f
 8006564:	003d08ff 	.word	0x003d08ff
 8006568:	431bde83 	.word	0x431bde83
 800656c:	10624dd3 	.word	0x10624dd3

08006570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b088      	sub	sp, #32
 8006574:	af02      	add	r7, sp, #8
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	461a      	mov	r2, r3
 800657c:	460b      	mov	r3, r1
 800657e:	817b      	strh	r3, [r7, #10]
 8006580:	4613      	mov	r3, r2
 8006582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006584:	f7fe fa8c 	bl	8004aa0 <HAL_GetTick>
 8006588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b20      	cmp	r3, #32
 8006594:	f040 80e0 	bne.w	8006758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	2319      	movs	r3, #25
 800659e:	2201      	movs	r2, #1
 80065a0:	4970      	ldr	r1, [pc, #448]	@ (8006764 <HAL_I2C_Master_Transmit+0x1f4>)
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f001 f90e 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065ae:	2302      	movs	r3, #2
 80065b0:	e0d3      	b.n	800675a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_I2C_Master_Transmit+0x50>
 80065bc:	2302      	movs	r3, #2
 80065be:	e0cc      	b.n	800675a <HAL_I2C_Master_Transmit+0x1ea>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d007      	beq.n	80065e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2221      	movs	r2, #33	@ 0x21
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2210      	movs	r2, #16
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	893a      	ldrh	r2, [r7, #8]
 8006616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800661c:	b29a      	uxth	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4a50      	ldr	r2, [pc, #320]	@ (8006768 <HAL_I2C_Master_Transmit+0x1f8>)
 8006626:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006628:	8979      	ldrh	r1, [r7, #10]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 fdfa 	bl	8007228 <I2C_MasterRequestWrite>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e08d      	b.n	800675a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006654:	e066      	b.n	8006724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	6a39      	ldr	r1, [r7, #32]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f001 f9cc 	bl	80079f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	2b04      	cmp	r3, #4
 800666c:	d107      	bne.n	800667e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800667c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e06b      	b.n	800675a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006686:	781a      	ldrb	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d11b      	bne.n	80066f8 <HAL_I2C_Master_Transmit+0x188>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d017      	beq.n	80066f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	6a39      	ldr	r1, [r7, #32]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f001 f9c3 	bl	8007a88 <I2C_WaitOnBTFFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00d      	beq.n	8006724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670c:	2b04      	cmp	r3, #4
 800670e:	d107      	bne.n	8006720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800671e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e01a      	b.n	800675a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006728:	2b00      	cmp	r3, #0
 800672a:	d194      	bne.n	8006656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800673a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	e000      	b.n	800675a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006758:	2302      	movs	r3, #2
  }
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	00100002 	.word	0x00100002
 8006768:	ffff0000 	.word	0xffff0000

0800676c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08c      	sub	sp, #48	@ 0x30
 8006770:	af02      	add	r7, sp, #8
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	607a      	str	r2, [r7, #4]
 8006776:	461a      	mov	r2, r3
 8006778:	460b      	mov	r3, r1
 800677a:	817b      	strh	r3, [r7, #10]
 800677c:	4613      	mov	r3, r2
 800677e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006780:	f7fe f98e 	bl	8004aa0 <HAL_GetTick>
 8006784:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b20      	cmp	r3, #32
 8006790:	f040 8217 	bne.w	8006bc2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	2319      	movs	r3, #25
 800679a:	2201      	movs	r2, #1
 800679c:	497c      	ldr	r1, [pc, #496]	@ (8006990 <HAL_I2C_Master_Receive+0x224>)
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f001 f810 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80067aa:	2302      	movs	r3, #2
 80067ac:	e20a      	b.n	8006bc4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_I2C_Master_Receive+0x50>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e203      	b.n	8006bc4 <HAL_I2C_Master_Receive+0x458>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d007      	beq.n	80067e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2222      	movs	r2, #34	@ 0x22
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2210      	movs	r2, #16
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	893a      	ldrh	r2, [r7, #8]
 8006812:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a5c      	ldr	r2, [pc, #368]	@ (8006994 <HAL_I2C_Master_Receive+0x228>)
 8006822:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006824:	8979      	ldrh	r1, [r7, #10]
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fd7e 	bl	800732c <I2C_MasterRequestRead>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e1c4      	b.n	8006bc4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	d113      	bne.n	800686a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006842:	2300      	movs	r3, #0
 8006844:	623b      	str	r3, [r7, #32]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	623b      	str	r3, [r7, #32]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	623b      	str	r3, [r7, #32]
 8006856:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	e198      	b.n	8006b9c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800686e:	2b01      	cmp	r3, #1
 8006870:	d11b      	bne.n	80068aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006882:	2300      	movs	r3, #0
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	e178      	b.n	8006b9c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d11b      	bne.n	80068ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d2:	2300      	movs	r3, #0
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	e158      	b.n	8006b9c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068fa:	2300      	movs	r3, #0
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006910:	e144      	b.n	8006b9c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006916:	2b03      	cmp	r3, #3
 8006918:	f200 80f1 	bhi.w	8006afe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006920:	2b01      	cmp	r3, #1
 8006922:	d123      	bne.n	800696c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006926:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f001 f8f5 	bl	8007b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e145      	b.n	8006bc4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691a      	ldr	r2, [r3, #16]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800696a:	e117      	b.n	8006b9c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006970:	2b02      	cmp	r3, #2
 8006972:	d14e      	bne.n	8006a12 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	2200      	movs	r2, #0
 800697c:	4906      	ldr	r1, [pc, #24]	@ (8006998 <HAL_I2C_Master_Receive+0x22c>)
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 ff20 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e11a      	b.n	8006bc4 <HAL_I2C_Master_Receive+0x458>
 800698e:	bf00      	nop
 8006990:	00100002 	.word	0x00100002
 8006994:	ffff0000 	.word	0xffff0000
 8006998:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069fa:	3b01      	subs	r3, #1
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a10:	e0c4      	b.n	8006b9c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	2200      	movs	r2, #0
 8006a1a:	496c      	ldr	r1, [pc, #432]	@ (8006bcc <HAL_I2C_Master_Receive+0x460>)
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 fed1 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0cb      	b.n	8006bc4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	4955      	ldr	r1, [pc, #340]	@ (8006bcc <HAL_I2C_Master_Receive+0x460>)
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fea3 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e09d      	b.n	8006bc4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006afc:	e04e      	b.n	8006b9c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f001 f808 	bl	8007b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e058      	b.n	8006bc4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d124      	bne.n	8006b9c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d107      	bne.n	8006b6a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b68:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b74:	b2d2      	uxtb	r2, r2
 8006b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b86:	3b01      	subs	r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f47f aeb6 	bne.w	8006912 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e000      	b.n	8006bc4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006bc2:	2302      	movs	r3, #2
  }
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3728      	adds	r7, #40	@ 0x28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	00010004 	.word	0x00010004

08006bd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	4608      	mov	r0, r1
 8006bda:	4611      	mov	r1, r2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4603      	mov	r3, r0
 8006be0:	817b      	strh	r3, [r7, #10]
 8006be2:	460b      	mov	r3, r1
 8006be4:	813b      	strh	r3, [r7, #8]
 8006be6:	4613      	mov	r3, r2
 8006be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bea:	f7fd ff59 	bl	8004aa0 <HAL_GetTick>
 8006bee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	f040 80d9 	bne.w	8006db0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	2319      	movs	r3, #25
 8006c04:	2201      	movs	r2, #1
 8006c06:	496d      	ldr	r1, [pc, #436]	@ (8006dbc <HAL_I2C_Mem_Write+0x1ec>)
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 fddb 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006c14:	2302      	movs	r3, #2
 8006c16:	e0cc      	b.n	8006db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <HAL_I2C_Mem_Write+0x56>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e0c5      	b.n	8006db2 <HAL_I2C_Mem_Write+0x1e2>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d007      	beq.n	8006c4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2221      	movs	r2, #33	@ 0x21
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2240      	movs	r2, #64	@ 0x40
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a3a      	ldr	r2, [r7, #32]
 8006c76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4a4d      	ldr	r2, [pc, #308]	@ (8006dc0 <HAL_I2C_Mem_Write+0x1f0>)
 8006c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c8e:	88f8      	ldrh	r0, [r7, #6]
 8006c90:	893a      	ldrh	r2, [r7, #8]
 8006c92:	8979      	ldrh	r1, [r7, #10]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fc12 	bl	80074c8 <I2C_RequestMemoryWrite>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d052      	beq.n	8006d50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e081      	b.n	8006db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 fea0 	bl	80079f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00d      	beq.n	8006cda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d107      	bne.n	8006cd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e06b      	b.n	8006db2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cde:	781a      	ldrb	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d11b      	bne.n	8006d50 <HAL_I2C_Mem_Write+0x180>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d017      	beq.n	8006d50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d24:	781a      	ldrb	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1aa      	bne.n	8006cae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fe93 	bl	8007a88 <I2C_WaitOnBTFFlagUntilTimeout>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00d      	beq.n	8006d84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d107      	bne.n	8006d80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e016      	b.n	8006db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	e000      	b.n	8006db2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006db0:	2302      	movs	r3, #2
  }
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	00100002 	.word	0x00100002
 8006dc0:	ffff0000 	.word	0xffff0000

08006dc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b08c      	sub	sp, #48	@ 0x30
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	4608      	mov	r0, r1
 8006dce:	4611      	mov	r1, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	817b      	strh	r3, [r7, #10]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	813b      	strh	r3, [r7, #8]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dde:	f7fd fe5f 	bl	8004aa0 <HAL_GetTick>
 8006de2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	f040 8214 	bne.w	800721a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	2319      	movs	r3, #25
 8006df8:	2201      	movs	r2, #1
 8006dfa:	497b      	ldr	r1, [pc, #492]	@ (8006fe8 <HAL_I2C_Mem_Read+0x224>)
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 fce1 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e207      	b.n	800721c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_I2C_Mem_Read+0x56>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e200      	b.n	800721c <HAL_I2C_Mem_Read+0x458>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d007      	beq.n	8006e40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2222      	movs	r2, #34	@ 0x22
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2240      	movs	r2, #64	@ 0x40
 8006e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8006fec <HAL_I2C_Mem_Read+0x228>)
 8006e80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e82:	88f8      	ldrh	r0, [r7, #6]
 8006e84:	893a      	ldrh	r2, [r7, #8]
 8006e86:	8979      	ldrh	r1, [r7, #10]
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	4603      	mov	r3, r0
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fbae 	bl	80075f4 <I2C_RequestMemoryRead>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e1bc      	b.n	800721c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d113      	bne.n	8006ed2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eaa:	2300      	movs	r3, #0
 8006eac:	623b      	str	r3, [r7, #32]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	623b      	str	r3, [r7, #32]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	623b      	str	r3, [r7, #32]
 8006ebe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	e190      	b.n	80071f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d11b      	bne.n	8006f12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eea:	2300      	movs	r3, #0
 8006eec:	61fb      	str	r3, [r7, #28]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	61fb      	str	r3, [r7, #28]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e170      	b.n	80071f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d11b      	bne.n	8006f52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	61bb      	str	r3, [r7, #24]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	e150      	b.n	80071f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f68:	e144      	b.n	80071f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	f200 80f1 	bhi.w	8007156 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d123      	bne.n	8006fc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 fdc9 	bl	8007b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e145      	b.n	800721c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fac:	3b01      	subs	r3, #1
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fc2:	e117      	b.n	80071f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d14e      	bne.n	800706a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	4906      	ldr	r1, [pc, #24]	@ (8006ff0 <HAL_I2C_Mem_Read+0x22c>)
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fbf4 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d008      	beq.n	8006ff4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e11a      	b.n	800721c <HAL_I2C_Mem_Read+0x458>
 8006fe6:	bf00      	nop
 8006fe8:	00100002 	.word	0x00100002
 8006fec:	ffff0000 	.word	0xffff0000
 8006ff0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007068:	e0c4      	b.n	80071f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007070:	2200      	movs	r2, #0
 8007072:	496c      	ldr	r1, [pc, #432]	@ (8007224 <HAL_I2C_Mem_Read+0x460>)
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fba5 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e0cb      	b.n	800721c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070cc:	2200      	movs	r2, #0
 80070ce:	4955      	ldr	r1, [pc, #340]	@ (8007224 <HAL_I2C_Mem_Read+0x460>)
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 fb77 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e09d      	b.n	800721c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691a      	ldr	r2, [r3, #16]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691a      	ldr	r2, [r3, #16]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800713e:	3b01      	subs	r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800714a:	b29b      	uxth	r3, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007154:	e04e      	b.n	80071f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007158:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fcdc 	bl	8007b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e058      	b.n	800721c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007186:	3b01      	subs	r3, #1
 8007188:	b29a      	uxth	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b01      	subs	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d124      	bne.n	80071f4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d107      	bne.n	80071c2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	3b01      	subs	r3, #1
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f47f aeb6 	bne.w	8006f6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	e000      	b.n	800721c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800721a:	2302      	movs	r3, #2
  }
}
 800721c:	4618      	mov	r0, r3
 800721e:	3728      	adds	r7, #40	@ 0x28
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	00010004 	.word	0x00010004

08007228 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	607a      	str	r2, [r7, #4]
 8007232:	603b      	str	r3, [r7, #0]
 8007234:	460b      	mov	r3, r1
 8007236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b08      	cmp	r3, #8
 8007242:	d006      	beq.n	8007252 <I2C_MasterRequestWrite+0x2a>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d003      	beq.n	8007252 <I2C_MasterRequestWrite+0x2a>
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007250:	d108      	bne.n	8007264 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	e00b      	b.n	800727c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007268:	2b12      	cmp	r3, #18
 800726a:	d107      	bne.n	800727c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800727a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fa9b 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00d      	beq.n	80072b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072a2:	d103      	bne.n	80072ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e035      	b.n	800731c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072b8:	d108      	bne.n	80072cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072ba:	897b      	ldrh	r3, [r7, #10]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	461a      	mov	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80072c8:	611a      	str	r2, [r3, #16]
 80072ca:	e01b      	b.n	8007304 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80072cc:	897b      	ldrh	r3, [r7, #10]
 80072ce:	11db      	asrs	r3, r3, #7
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 0306 	and.w	r3, r3, #6
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f063 030f 	orn	r3, r3, #15
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	490e      	ldr	r1, [pc, #56]	@ (8007324 <I2C_MasterRequestWrite+0xfc>)
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fae4 	bl	80078b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e010      	b.n	800731c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80072fa:	897b      	ldrh	r3, [r7, #10]
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	4907      	ldr	r1, [pc, #28]	@ (8007328 <I2C_MasterRequestWrite+0x100>)
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 fad4 	bl	80078b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	00010008 	.word	0x00010008
 8007328:	00010002 	.word	0x00010002

0800732c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	607a      	str	r2, [r7, #4]
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	460b      	mov	r3, r1
 800733a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007350:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d006      	beq.n	8007366 <I2C_MasterRequestRead+0x3a>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d003      	beq.n	8007366 <I2C_MasterRequestRead+0x3a>
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007364:	d108      	bne.n	8007378 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e00b      	b.n	8007390 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737c:	2b11      	cmp	r3, #17
 800737e:	d107      	bne.n	8007390 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800738e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 fa11 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00d      	beq.n	80073c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073b6:	d103      	bne.n	80073c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e079      	b.n	80074b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073cc:	d108      	bne.n	80073e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073ce:	897b      	ldrh	r3, [r7, #10]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	f043 0301 	orr.w	r3, r3, #1
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	611a      	str	r2, [r3, #16]
 80073de:	e05f      	b.n	80074a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80073e0:	897b      	ldrh	r3, [r7, #10]
 80073e2:	11db      	asrs	r3, r3, #7
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	f003 0306 	and.w	r3, r3, #6
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	f063 030f 	orn	r3, r3, #15
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	4930      	ldr	r1, [pc, #192]	@ (80074c0 <I2C_MasterRequestRead+0x194>)
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fa5a 	bl	80078b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e054      	b.n	80074b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800740e:	897b      	ldrh	r3, [r7, #10]
 8007410:	b2da      	uxtb	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	4929      	ldr	r1, [pc, #164]	@ (80074c4 <I2C_MasterRequestRead+0x198>)
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fa4a 	bl	80078b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e044      	b.n	80074b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800742e:	2300      	movs	r3, #0
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007452:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f9af 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800747a:	d103      	bne.n	8007484 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007482:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e017      	b.n	80074b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007488:	897b      	ldrh	r3, [r7, #10]
 800748a:	11db      	asrs	r3, r3, #7
 800748c:	b2db      	uxtb	r3, r3
 800748e:	f003 0306 	and.w	r3, r3, #6
 8007492:	b2db      	uxtb	r3, r3
 8007494:	f063 030e 	orn	r3, r3, #14
 8007498:	b2da      	uxtb	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4907      	ldr	r1, [pc, #28]	@ (80074c4 <I2C_MasterRequestRead+0x198>)
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 fa06 	bl	80078b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	00010008 	.word	0x00010008
 80074c4:	00010002 	.word	0x00010002

080074c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	4608      	mov	r0, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	461a      	mov	r2, r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	817b      	strh	r3, [r7, #10]
 80074da:	460b      	mov	r3, r1
 80074dc:	813b      	strh	r3, [r7, #8]
 80074de:	4613      	mov	r3, r2
 80074e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 f960 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00d      	beq.n	8007526 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007518:	d103      	bne.n	8007522 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007520:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e05f      	b.n	80075e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007526:	897b      	ldrh	r3, [r7, #10]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	6a3a      	ldr	r2, [r7, #32]
 800753a:	492d      	ldr	r1, [pc, #180]	@ (80075f0 <I2C_RequestMemoryWrite+0x128>)
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 f9bb 	bl	80078b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e04c      	b.n	80075e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007564:	6a39      	ldr	r1, [r7, #32]
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fa46 	bl	80079f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00d      	beq.n	800758e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007576:	2b04      	cmp	r3, #4
 8007578:	d107      	bne.n	800758a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e02b      	b.n	80075e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d105      	bne.n	80075a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007594:	893b      	ldrh	r3, [r7, #8]
 8007596:	b2da      	uxtb	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	611a      	str	r2, [r3, #16]
 800759e:	e021      	b.n	80075e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075a0:	893b      	ldrh	r3, [r7, #8]
 80075a2:	0a1b      	lsrs	r3, r3, #8
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b0:	6a39      	ldr	r1, [r7, #32]
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 fa20 	bl	80079f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00d      	beq.n	80075da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d107      	bne.n	80075d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e005      	b.n	80075e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075da:	893b      	ldrh	r3, [r7, #8]
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	00010002 	.word	0x00010002

080075f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	4608      	mov	r0, r1
 80075fe:	4611      	mov	r1, r2
 8007600:	461a      	mov	r2, r3
 8007602:	4603      	mov	r3, r0
 8007604:	817b      	strh	r3, [r7, #10]
 8007606:	460b      	mov	r3, r1
 8007608:	813b      	strh	r3, [r7, #8]
 800760a:	4613      	mov	r3, r2
 800760c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800761c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800762c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	2200      	movs	r2, #0
 8007636:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f8c2 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00d      	beq.n	8007662 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007654:	d103      	bne.n	800765e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800765c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e0aa      	b.n	80077b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007662:	897b      	ldrh	r3, [r7, #10]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007670:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	6a3a      	ldr	r2, [r7, #32]
 8007676:	4952      	ldr	r1, [pc, #328]	@ (80077c0 <I2C_RequestMemoryRead+0x1cc>)
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f91d 	bl	80078b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e097      	b.n	80077b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007688:	2300      	movs	r3, #0
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800769e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076a0:	6a39      	ldr	r1, [r7, #32]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f9a8 	bl	80079f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00d      	beq.n	80076ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d107      	bne.n	80076c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e076      	b.n	80077b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d105      	bne.n	80076dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076d0:	893b      	ldrh	r3, [r7, #8]
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	611a      	str	r2, [r3, #16]
 80076da:	e021      	b.n	8007720 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076dc:	893b      	ldrh	r3, [r7, #8]
 80076de:	0a1b      	lsrs	r3, r3, #8
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ec:	6a39      	ldr	r1, [r7, #32]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 f982 	bl	80079f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00d      	beq.n	8007716 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d107      	bne.n	8007712 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007710:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e050      	b.n	80077b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007716:	893b      	ldrh	r3, [r7, #8]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007722:	6a39      	ldr	r1, [r7, #32]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f967 	bl	80079f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00d      	beq.n	800774c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007734:	2b04      	cmp	r3, #4
 8007736:	d107      	bne.n	8007748 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007746:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e035      	b.n	80077b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800775a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	2200      	movs	r2, #0
 8007764:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f82b 	bl	80077c4 <I2C_WaitOnFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00d      	beq.n	8007790 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800777e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007782:	d103      	bne.n	800778c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800778a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e013      	b.n	80077b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007790:	897b      	ldrh	r3, [r7, #10]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	b2da      	uxtb	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	4906      	ldr	r1, [pc, #24]	@ (80077c0 <I2C_RequestMemoryRead+0x1cc>)
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f886 	bl	80078b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	00010002 	.word	0x00010002

080077c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	4613      	mov	r3, r2
 80077d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077d4:	e048      	b.n	8007868 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d044      	beq.n	8007868 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077de:	f7fd f95f 	bl	8004aa0 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d139      	bne.n	8007868 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	0c1b      	lsrs	r3, r3, #16
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d10d      	bne.n	800781a <I2C_WaitOnFlagUntilTimeout+0x56>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	43da      	mvns	r2, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	4013      	ands	r3, r2
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	bf0c      	ite	eq
 8007810:	2301      	moveq	r3, #1
 8007812:	2300      	movne	r3, #0
 8007814:	b2db      	uxtb	r3, r3
 8007816:	461a      	mov	r2, r3
 8007818:	e00c      	b.n	8007834 <I2C_WaitOnFlagUntilTimeout+0x70>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	43da      	mvns	r2, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	4013      	ands	r3, r2
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	bf0c      	ite	eq
 800782c:	2301      	moveq	r3, #1
 800782e:	2300      	movne	r3, #0
 8007830:	b2db      	uxtb	r3, r3
 8007832:	461a      	mov	r2, r3
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	429a      	cmp	r2, r3
 8007838:	d116      	bne.n	8007868 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2220      	movs	r2, #32
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007854:	f043 0220 	orr.w	r2, r3, #32
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e023      	b.n	80078b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	0c1b      	lsrs	r3, r3, #16
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b01      	cmp	r3, #1
 8007870:	d10d      	bne.n	800788e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	43da      	mvns	r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4013      	ands	r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	bf0c      	ite	eq
 8007884:	2301      	moveq	r3, #1
 8007886:	2300      	movne	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	e00c      	b.n	80078a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	43da      	mvns	r2, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4013      	ands	r3, r2
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	bf0c      	ite	eq
 80078a0:	2301      	moveq	r3, #1
 80078a2:	2300      	movne	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	461a      	mov	r2, r3
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d093      	beq.n	80077d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078c6:	e071      	b.n	80079ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078d6:	d123      	bne.n	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790c:	f043 0204 	orr.w	r2, r3, #4
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e067      	b.n	80079f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007926:	d041      	beq.n	80079ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007928:	f7fd f8ba 	bl	8004aa0 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d302      	bcc.n	800793e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d136      	bne.n	80079ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	0c1b      	lsrs	r3, r3, #16
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b01      	cmp	r3, #1
 8007946:	d10c      	bne.n	8007962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	43da      	mvns	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4013      	ands	r3, r2
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	bf14      	ite	ne
 800795a:	2301      	movne	r3, #1
 800795c:	2300      	moveq	r3, #0
 800795e:	b2db      	uxtb	r3, r3
 8007960:	e00b      	b.n	800797a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	43da      	mvns	r2, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	4013      	ands	r3, r2
 800796e:	b29b      	uxth	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	bf14      	ite	ne
 8007974:	2301      	movne	r3, #1
 8007976:	2300      	moveq	r3, #0
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d016      	beq.n	80079ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007998:	f043 0220 	orr.w	r2, r3, #32
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e021      	b.n	80079f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	0c1b      	lsrs	r3, r3, #16
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d10c      	bne.n	80079d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	43da      	mvns	r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4013      	ands	r3, r2
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bf14      	ite	ne
 80079c8:	2301      	movne	r3, #1
 80079ca:	2300      	moveq	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	e00b      	b.n	80079e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	43da      	mvns	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4013      	ands	r3, r2
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bf14      	ite	ne
 80079e2:	2301      	movne	r3, #1
 80079e4:	2300      	moveq	r3, #0
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f47f af6d 	bne.w	80078c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a04:	e034      	b.n	8007a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f8e3 	bl	8007bd2 <I2C_IsAcknowledgeFailed>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e034      	b.n	8007a80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1c:	d028      	beq.n	8007a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a1e:	f7fd f83f 	bl	8004aa0 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d302      	bcc.n	8007a34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d11d      	bne.n	8007a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a3e:	2b80      	cmp	r3, #128	@ 0x80
 8007a40:	d016      	beq.n	8007a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5c:	f043 0220 	orr.w	r2, r3, #32
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e007      	b.n	8007a80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a7a:	2b80      	cmp	r3, #128	@ 0x80
 8007a7c:	d1c3      	bne.n	8007a06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a94:	e034      	b.n	8007b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f89b 	bl	8007bd2 <I2C_IsAcknowledgeFailed>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e034      	b.n	8007b10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d028      	beq.n	8007b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aae:	f7fc fff7 	bl	8004aa0 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d302      	bcc.n	8007ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d11d      	bne.n	8007b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d016      	beq.n	8007b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2220      	movs	r2, #32
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aec:	f043 0220 	orr.w	r2, r3, #32
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e007      	b.n	8007b10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d1c3      	bne.n	8007a96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b24:	e049      	b.n	8007bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	d119      	bne.n	8007b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0210 	mvn.w	r2, #16
 8007b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e030      	b.n	8007bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b68:	f7fc ff9a 	bl	8004aa0 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d302      	bcc.n	8007b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d11d      	bne.n	8007bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b88:	2b40      	cmp	r3, #64	@ 0x40
 8007b8a:	d016      	beq.n	8007bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba6:	f043 0220 	orr.w	r2, r3, #32
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e007      	b.n	8007bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc4:	2b40      	cmp	r3, #64	@ 0x40
 8007bc6:	d1ae      	bne.n	8007b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007be8:	d11b      	bne.n	8007c22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007bf2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0e:	f043 0204 	orr.w	r2, r3, #4
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e000      	b.n	8007c24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e267      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d075      	beq.n	8007d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007c4e:	4b88      	ldr	r3, [pc, #544]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f003 030c 	and.w	r3, r3, #12
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d00c      	beq.n	8007c74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c5a:	4b85      	ldr	r3, [pc, #532]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007c62:	2b08      	cmp	r3, #8
 8007c64:	d112      	bne.n	8007c8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c66:	4b82      	ldr	r3, [pc, #520]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c72:	d10b      	bne.n	8007c8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c74:	4b7e      	ldr	r3, [pc, #504]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d05b      	beq.n	8007d38 <HAL_RCC_OscConfig+0x108>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d157      	bne.n	8007d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e242      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c94:	d106      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x74>
 8007c96:	4b76      	ldr	r3, [pc, #472]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a75      	ldr	r2, [pc, #468]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	e01d      	b.n	8007ce0 <HAL_RCC_OscConfig+0xb0>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cac:	d10c      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x98>
 8007cae:	4b70      	ldr	r3, [pc, #448]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a6f      	ldr	r2, [pc, #444]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	4b6d      	ldr	r3, [pc, #436]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a6c      	ldr	r2, [pc, #432]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	e00b      	b.n	8007ce0 <HAL_RCC_OscConfig+0xb0>
 8007cc8:	4b69      	ldr	r3, [pc, #420]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a68      	ldr	r2, [pc, #416]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	4b66      	ldr	r3, [pc, #408]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a65      	ldr	r2, [pc, #404]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d013      	beq.n	8007d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ce8:	f7fc feda 	bl	8004aa0 <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cf0:	f7fc fed6 	bl	8004aa0 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b64      	cmp	r3, #100	@ 0x64
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e207      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d02:	4b5b      	ldr	r3, [pc, #364]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0f0      	beq.n	8007cf0 <HAL_RCC_OscConfig+0xc0>
 8007d0e:	e014      	b.n	8007d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d10:	f7fc fec6 	bl	8004aa0 <HAL_GetTick>
 8007d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d16:	e008      	b.n	8007d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d18:	f7fc fec2 	bl	8004aa0 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b64      	cmp	r3, #100	@ 0x64
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e1f3      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d2a:	4b51      	ldr	r3, [pc, #324]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1f0      	bne.n	8007d18 <HAL_RCC_OscConfig+0xe8>
 8007d36:	e000      	b.n	8007d3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d063      	beq.n	8007e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007d46:	4b4a      	ldr	r3, [pc, #296]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 030c 	and.w	r3, r3, #12
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d52:	4b47      	ldr	r3, [pc, #284]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d11c      	bne.n	8007d98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d5e:	4b44      	ldr	r3, [pc, #272]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d116      	bne.n	8007d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d6a:	4b41      	ldr	r3, [pc, #260]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <HAL_RCC_OscConfig+0x152>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d001      	beq.n	8007d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e1c7      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d82:	4b3b      	ldr	r3, [pc, #236]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	00db      	lsls	r3, r3, #3
 8007d90:	4937      	ldr	r1, [pc, #220]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d96:	e03a      	b.n	8007e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d020      	beq.n	8007de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007da0:	4b34      	ldr	r3, [pc, #208]	@ (8007e74 <HAL_RCC_OscConfig+0x244>)
 8007da2:	2201      	movs	r2, #1
 8007da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da6:	f7fc fe7b 	bl	8004aa0 <HAL_GetTick>
 8007daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dac:	e008      	b.n	8007dc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dae:	f7fc fe77 	bl	8004aa0 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e1a8      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0f0      	beq.n	8007dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dcc:	4b28      	ldr	r3, [pc, #160]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	00db      	lsls	r3, r3, #3
 8007dda:	4925      	ldr	r1, [pc, #148]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	600b      	str	r3, [r1, #0]
 8007de0:	e015      	b.n	8007e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007de2:	4b24      	ldr	r3, [pc, #144]	@ (8007e74 <HAL_RCC_OscConfig+0x244>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de8:	f7fc fe5a 	bl	8004aa0 <HAL_GetTick>
 8007dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dee:	e008      	b.n	8007e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007df0:	f7fc fe56 	bl	8004aa0 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e187      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e02:	4b1b      	ldr	r3, [pc, #108]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f0      	bne.n	8007df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d036      	beq.n	8007e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d016      	beq.n	8007e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e22:	4b15      	ldr	r3, [pc, #84]	@ (8007e78 <HAL_RCC_OscConfig+0x248>)
 8007e24:	2201      	movs	r2, #1
 8007e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e28:	f7fc fe3a 	bl	8004aa0 <HAL_GetTick>
 8007e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e2e:	e008      	b.n	8007e42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e30:	f7fc fe36 	bl	8004aa0 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e167      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e42:	4b0b      	ldr	r3, [pc, #44]	@ (8007e70 <HAL_RCC_OscConfig+0x240>)
 8007e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f0      	beq.n	8007e30 <HAL_RCC_OscConfig+0x200>
 8007e4e:	e01b      	b.n	8007e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e50:	4b09      	ldr	r3, [pc, #36]	@ (8007e78 <HAL_RCC_OscConfig+0x248>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e56:	f7fc fe23 	bl	8004aa0 <HAL_GetTick>
 8007e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e5c:	e00e      	b.n	8007e7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e5e:	f7fc fe1f 	bl	8004aa0 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d907      	bls.n	8007e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e150      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
 8007e70:	40023800 	.word	0x40023800
 8007e74:	42470000 	.word	0x42470000
 8007e78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e7c:	4b88      	ldr	r3, [pc, #544]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1ea      	bne.n	8007e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 8097 	beq.w	8007fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e96:	2300      	movs	r3, #0
 8007e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e9a:	4b81      	ldr	r3, [pc, #516]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10f      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60bb      	str	r3, [r7, #8]
 8007eaa:	4b7d      	ldr	r3, [pc, #500]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eae:	4a7c      	ldr	r2, [pc, #496]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ec6:	4b77      	ldr	r3, [pc, #476]	@ (80080a4 <HAL_RCC_OscConfig+0x474>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d118      	bne.n	8007f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ed2:	4b74      	ldr	r3, [pc, #464]	@ (80080a4 <HAL_RCC_OscConfig+0x474>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a73      	ldr	r2, [pc, #460]	@ (80080a4 <HAL_RCC_OscConfig+0x474>)
 8007ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ede:	f7fc fddf 	bl	8004aa0 <HAL_GetTick>
 8007ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ee4:	e008      	b.n	8007ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ee6:	f7fc fddb 	bl	8004aa0 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d901      	bls.n	8007ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e10c      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80080a4 <HAL_RCC_OscConfig+0x474>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0f0      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d106      	bne.n	8007f1a <HAL_RCC_OscConfig+0x2ea>
 8007f0c:	4b64      	ldr	r3, [pc, #400]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f10:	4a63      	ldr	r2, [pc, #396]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f12:	f043 0301 	orr.w	r3, r3, #1
 8007f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f18:	e01c      	b.n	8007f54 <HAL_RCC_OscConfig+0x324>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	2b05      	cmp	r3, #5
 8007f20:	d10c      	bne.n	8007f3c <HAL_RCC_OscConfig+0x30c>
 8007f22:	4b5f      	ldr	r3, [pc, #380]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f26:	4a5e      	ldr	r2, [pc, #376]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f28:	f043 0304 	orr.w	r3, r3, #4
 8007f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f32:	4a5b      	ldr	r2, [pc, #364]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f3a:	e00b      	b.n	8007f54 <HAL_RCC_OscConfig+0x324>
 8007f3c:	4b58      	ldr	r3, [pc, #352]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f40:	4a57      	ldr	r2, [pc, #348]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f42:	f023 0301 	bic.w	r3, r3, #1
 8007f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f48:	4b55      	ldr	r3, [pc, #340]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f4c:	4a54      	ldr	r2, [pc, #336]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f4e:	f023 0304 	bic.w	r3, r3, #4
 8007f52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d015      	beq.n	8007f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f5c:	f7fc fda0 	bl	8004aa0 <HAL_GetTick>
 8007f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f62:	e00a      	b.n	8007f7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f64:	f7fc fd9c 	bl	8004aa0 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e0cb      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f7a:	4b49      	ldr	r3, [pc, #292]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0ee      	beq.n	8007f64 <HAL_RCC_OscConfig+0x334>
 8007f86:	e014      	b.n	8007fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f88:	f7fc fd8a 	bl	8004aa0 <HAL_GetTick>
 8007f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f8e:	e00a      	b.n	8007fa6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f90:	f7fc fd86 	bl	8004aa0 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e0b5      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1ee      	bne.n	8007f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d105      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fb8:	4b39      	ldr	r3, [pc, #228]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbc:	4a38      	ldr	r2, [pc, #224]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 80a1 	beq.w	8008110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fce:	4b34      	ldr	r3, [pc, #208]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 030c 	and.w	r3, r3, #12
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d05c      	beq.n	8008094 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d141      	bne.n	8008066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fe2:	4b31      	ldr	r3, [pc, #196]	@ (80080a8 <HAL_RCC_OscConfig+0x478>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fe8:	f7fc fd5a 	bl	8004aa0 <HAL_GetTick>
 8007fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fee:	e008      	b.n	8008002 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ff0:	f7fc fd56 	bl	8004aa0 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e087      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008002:	4b27      	ldr	r3, [pc, #156]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1f0      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	69da      	ldr	r2, [r3, #28]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	431a      	orrs	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801c:	019b      	lsls	r3, r3, #6
 800801e:	431a      	orrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008024:	085b      	lsrs	r3, r3, #1
 8008026:	3b01      	subs	r3, #1
 8008028:	041b      	lsls	r3, r3, #16
 800802a:	431a      	orrs	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008030:	061b      	lsls	r3, r3, #24
 8008032:	491b      	ldr	r1, [pc, #108]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8008034:	4313      	orrs	r3, r2
 8008036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008038:	4b1b      	ldr	r3, [pc, #108]	@ (80080a8 <HAL_RCC_OscConfig+0x478>)
 800803a:	2201      	movs	r2, #1
 800803c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800803e:	f7fc fd2f 	bl	8004aa0 <HAL_GetTick>
 8008042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008044:	e008      	b.n	8008058 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008046:	f7fc fd2b 	bl	8004aa0 <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	2b02      	cmp	r3, #2
 8008052:	d901      	bls.n	8008058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e05c      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008058:	4b11      	ldr	r3, [pc, #68]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0f0      	beq.n	8008046 <HAL_RCC_OscConfig+0x416>
 8008064:	e054      	b.n	8008110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008066:	4b10      	ldr	r3, [pc, #64]	@ (80080a8 <HAL_RCC_OscConfig+0x478>)
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800806c:	f7fc fd18 	bl	8004aa0 <HAL_GetTick>
 8008070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008072:	e008      	b.n	8008086 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008074:	f7fc fd14 	bl	8004aa0 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e045      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008086:	4b06      	ldr	r3, [pc, #24]	@ (80080a0 <HAL_RCC_OscConfig+0x470>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1f0      	bne.n	8008074 <HAL_RCC_OscConfig+0x444>
 8008092:	e03d      	b.n	8008110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d107      	bne.n	80080ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e038      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
 80080a0:	40023800 	.word	0x40023800
 80080a4:	40007000 	.word	0x40007000
 80080a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080ac:	4b1b      	ldr	r3, [pc, #108]	@ (800811c <HAL_RCC_OscConfig+0x4ec>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d028      	beq.n	800810c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d121      	bne.n	800810c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d11a      	bne.n	800810c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80080dc:	4013      	ands	r3, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80080e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d111      	bne.n	800810c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f2:	085b      	lsrs	r3, r3, #1
 80080f4:	3b01      	subs	r3, #1
 80080f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d107      	bne.n	800810c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008108:	429a      	cmp	r2, r3
 800810a:	d001      	beq.n	8008110 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e000      	b.n	8008112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	40023800 	.word	0x40023800

08008120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e0cc      	b.n	80082ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008134:	4b68      	ldr	r3, [pc, #416]	@ (80082d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d90c      	bls.n	800815c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008142:	4b65      	ldr	r3, [pc, #404]	@ (80082d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	b2d2      	uxtb	r2, r2
 8008148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800814a:	4b63      	ldr	r3, [pc, #396]	@ (80082d8 <HAL_RCC_ClockConfig+0x1b8>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d001      	beq.n	800815c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e0b8      	b.n	80082ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d020      	beq.n	80081aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008174:	4b59      	ldr	r3, [pc, #356]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	4a58      	ldr	r2, [pc, #352]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 800817a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800817e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0308 	and.w	r3, r3, #8
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800818c:	4b53      	ldr	r3, [pc, #332]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	4a52      	ldr	r2, [pc, #328]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 8008192:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008198:	4b50      	ldr	r3, [pc, #320]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	494d      	ldr	r1, [pc, #308]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d044      	beq.n	8008240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d107      	bne.n	80081ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081be:	4b47      	ldr	r3, [pc, #284]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d119      	bne.n	80081fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e07f      	b.n	80082ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d003      	beq.n	80081de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d107      	bne.n	80081ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081de:	4b3f      	ldr	r3, [pc, #252]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d109      	bne.n	80081fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e06f      	b.n	80082ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081ee:	4b3b      	ldr	r3, [pc, #236]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e067      	b.n	80082ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081fe:	4b37      	ldr	r3, [pc, #220]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f023 0203 	bic.w	r2, r3, #3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	4934      	ldr	r1, [pc, #208]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 800820c:	4313      	orrs	r3, r2
 800820e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008210:	f7fc fc46 	bl	8004aa0 <HAL_GetTick>
 8008214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008216:	e00a      	b.n	800822e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008218:	f7fc fc42 	bl	8004aa0 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008226:	4293      	cmp	r3, r2
 8008228:	d901      	bls.n	800822e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e04f      	b.n	80082ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800822e:	4b2b      	ldr	r3, [pc, #172]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 020c 	and.w	r2, r3, #12
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	429a      	cmp	r2, r3
 800823e:	d1eb      	bne.n	8008218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008240:	4b25      	ldr	r3, [pc, #148]	@ (80082d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	429a      	cmp	r2, r3
 800824c:	d20c      	bcs.n	8008268 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800824e:	4b22      	ldr	r3, [pc, #136]	@ (80082d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008256:	4b20      	ldr	r3, [pc, #128]	@ (80082d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d001      	beq.n	8008268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e032      	b.n	80082ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d008      	beq.n	8008286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008274:	4b19      	ldr	r3, [pc, #100]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4916      	ldr	r1, [pc, #88]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 8008282:	4313      	orrs	r3, r2
 8008284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0308 	and.w	r3, r3, #8
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008292:	4b12      	ldr	r3, [pc, #72]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	490e      	ldr	r1, [pc, #56]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80082a6:	f000 f821 	bl	80082ec <HAL_RCC_GetSysClockFreq>
 80082aa:	4602      	mov	r2, r0
 80082ac:	4b0b      	ldr	r3, [pc, #44]	@ (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	091b      	lsrs	r3, r3, #4
 80082b2:	f003 030f 	and.w	r3, r3, #15
 80082b6:	490a      	ldr	r1, [pc, #40]	@ (80082e0 <HAL_RCC_ClockConfig+0x1c0>)
 80082b8:	5ccb      	ldrb	r3, [r1, r3]
 80082ba:	fa22 f303 	lsr.w	r3, r2, r3
 80082be:	4a09      	ldr	r2, [pc, #36]	@ (80082e4 <HAL_RCC_ClockConfig+0x1c4>)
 80082c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80082c2:	4b09      	ldr	r3, [pc, #36]	@ (80082e8 <HAL_RCC_ClockConfig+0x1c8>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fc fba6 	bl	8004a18 <HAL_InitTick>

  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	40023c00 	.word	0x40023c00
 80082dc:	40023800 	.word	0x40023800
 80082e0:	08011a58 	.word	0x08011a58
 80082e4:	20000000 	.word	0x20000000
 80082e8:	2000002c 	.word	0x2000002c

080082ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082f0:	b094      	sub	sp, #80	@ 0x50
 80082f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008304:	4b79      	ldr	r3, [pc, #484]	@ (80084ec <HAL_RCC_GetSysClockFreq+0x200>)
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f003 030c 	and.w	r3, r3, #12
 800830c:	2b08      	cmp	r3, #8
 800830e:	d00d      	beq.n	800832c <HAL_RCC_GetSysClockFreq+0x40>
 8008310:	2b08      	cmp	r3, #8
 8008312:	f200 80e1 	bhi.w	80084d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <HAL_RCC_GetSysClockFreq+0x34>
 800831a:	2b04      	cmp	r3, #4
 800831c:	d003      	beq.n	8008326 <HAL_RCC_GetSysClockFreq+0x3a>
 800831e:	e0db      	b.n	80084d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008320:	4b73      	ldr	r3, [pc, #460]	@ (80084f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008322:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008324:	e0db      	b.n	80084de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008326:	4b73      	ldr	r3, [pc, #460]	@ (80084f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008328:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800832a:	e0d8      	b.n	80084de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800832c:	4b6f      	ldr	r3, [pc, #444]	@ (80084ec <HAL_RCC_GetSysClockFreq+0x200>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008334:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008336:	4b6d      	ldr	r3, [pc, #436]	@ (80084ec <HAL_RCC_GetSysClockFreq+0x200>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d063      	beq.n	800840a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008342:	4b6a      	ldr	r3, [pc, #424]	@ (80084ec <HAL_RCC_GetSysClockFreq+0x200>)
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	099b      	lsrs	r3, r3, #6
 8008348:	2200      	movs	r2, #0
 800834a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800834c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008354:	633b      	str	r3, [r7, #48]	@ 0x30
 8008356:	2300      	movs	r3, #0
 8008358:	637b      	str	r3, [r7, #52]	@ 0x34
 800835a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800835e:	4622      	mov	r2, r4
 8008360:	462b      	mov	r3, r5
 8008362:	f04f 0000 	mov.w	r0, #0
 8008366:	f04f 0100 	mov.w	r1, #0
 800836a:	0159      	lsls	r1, r3, #5
 800836c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008370:	0150      	lsls	r0, r2, #5
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4621      	mov	r1, r4
 8008378:	1a51      	subs	r1, r2, r1
 800837a:	6139      	str	r1, [r7, #16]
 800837c:	4629      	mov	r1, r5
 800837e:	eb63 0301 	sbc.w	r3, r3, r1
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	f04f 0200 	mov.w	r2, #0
 8008388:	f04f 0300 	mov.w	r3, #0
 800838c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008390:	4659      	mov	r1, fp
 8008392:	018b      	lsls	r3, r1, #6
 8008394:	4651      	mov	r1, sl
 8008396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800839a:	4651      	mov	r1, sl
 800839c:	018a      	lsls	r2, r1, #6
 800839e:	4651      	mov	r1, sl
 80083a0:	ebb2 0801 	subs.w	r8, r2, r1
 80083a4:	4659      	mov	r1, fp
 80083a6:	eb63 0901 	sbc.w	r9, r3, r1
 80083aa:	f04f 0200 	mov.w	r2, #0
 80083ae:	f04f 0300 	mov.w	r3, #0
 80083b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083be:	4690      	mov	r8, r2
 80083c0:	4699      	mov	r9, r3
 80083c2:	4623      	mov	r3, r4
 80083c4:	eb18 0303 	adds.w	r3, r8, r3
 80083c8:	60bb      	str	r3, [r7, #8]
 80083ca:	462b      	mov	r3, r5
 80083cc:	eb49 0303 	adc.w	r3, r9, r3
 80083d0:	60fb      	str	r3, [r7, #12]
 80083d2:	f04f 0200 	mov.w	r2, #0
 80083d6:	f04f 0300 	mov.w	r3, #0
 80083da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80083de:	4629      	mov	r1, r5
 80083e0:	024b      	lsls	r3, r1, #9
 80083e2:	4621      	mov	r1, r4
 80083e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80083e8:	4621      	mov	r1, r4
 80083ea:	024a      	lsls	r2, r1, #9
 80083ec:	4610      	mov	r0, r2
 80083ee:	4619      	mov	r1, r3
 80083f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f2:	2200      	movs	r2, #0
 80083f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80083fc:	f7f8 fc9c 	bl	8000d38 <__aeabi_uldivmod>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4613      	mov	r3, r2
 8008406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008408:	e058      	b.n	80084bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800840a:	4b38      	ldr	r3, [pc, #224]	@ (80084ec <HAL_RCC_GetSysClockFreq+0x200>)
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	099b      	lsrs	r3, r3, #6
 8008410:	2200      	movs	r2, #0
 8008412:	4618      	mov	r0, r3
 8008414:	4611      	mov	r1, r2
 8008416:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800841a:	623b      	str	r3, [r7, #32]
 800841c:	2300      	movs	r3, #0
 800841e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008424:	4642      	mov	r2, r8
 8008426:	464b      	mov	r3, r9
 8008428:	f04f 0000 	mov.w	r0, #0
 800842c:	f04f 0100 	mov.w	r1, #0
 8008430:	0159      	lsls	r1, r3, #5
 8008432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008436:	0150      	lsls	r0, r2, #5
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4641      	mov	r1, r8
 800843e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008442:	4649      	mov	r1, r9
 8008444:	eb63 0b01 	sbc.w	fp, r3, r1
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	f04f 0300 	mov.w	r3, #0
 8008450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800845c:	ebb2 040a 	subs.w	r4, r2, sl
 8008460:	eb63 050b 	sbc.w	r5, r3, fp
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	f04f 0300 	mov.w	r3, #0
 800846c:	00eb      	lsls	r3, r5, #3
 800846e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008472:	00e2      	lsls	r2, r4, #3
 8008474:	4614      	mov	r4, r2
 8008476:	461d      	mov	r5, r3
 8008478:	4643      	mov	r3, r8
 800847a:	18e3      	adds	r3, r4, r3
 800847c:	603b      	str	r3, [r7, #0]
 800847e:	464b      	mov	r3, r9
 8008480:	eb45 0303 	adc.w	r3, r5, r3
 8008484:	607b      	str	r3, [r7, #4]
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008492:	4629      	mov	r1, r5
 8008494:	028b      	lsls	r3, r1, #10
 8008496:	4621      	mov	r1, r4
 8008498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800849c:	4621      	mov	r1, r4
 800849e:	028a      	lsls	r2, r1, #10
 80084a0:	4610      	mov	r0, r2
 80084a2:	4619      	mov	r1, r3
 80084a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084a6:	2200      	movs	r2, #0
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	61fa      	str	r2, [r7, #28]
 80084ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084b0:	f7f8 fc42 	bl	8000d38 <__aeabi_uldivmod>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4613      	mov	r3, r2
 80084ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80084bc:	4b0b      	ldr	r3, [pc, #44]	@ (80084ec <HAL_RCC_GetSysClockFreq+0x200>)
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	0c1b      	lsrs	r3, r3, #16
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	3301      	adds	r3, #1
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80084cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80084d6:	e002      	b.n	80084de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084d8:	4b05      	ldr	r3, [pc, #20]	@ (80084f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80084da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80084dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3750      	adds	r7, #80	@ 0x50
 80084e4:	46bd      	mov	sp, r7
 80084e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084ea:	bf00      	nop
 80084ec:	40023800 	.word	0x40023800
 80084f0:	00f42400 	.word	0x00f42400
 80084f4:	007a1200 	.word	0x007a1200

080084f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084f8:	b480      	push	{r7}
 80084fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084fc:	4b03      	ldr	r3, [pc, #12]	@ (800850c <HAL_RCC_GetHCLKFreq+0x14>)
 80084fe:	681b      	ldr	r3, [r3, #0]
}
 8008500:	4618      	mov	r0, r3
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	20000000 	.word	0x20000000

08008510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008514:	f7ff fff0 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 8008518:	4602      	mov	r2, r0
 800851a:	4b05      	ldr	r3, [pc, #20]	@ (8008530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	0a9b      	lsrs	r3, r3, #10
 8008520:	f003 0307 	and.w	r3, r3, #7
 8008524:	4903      	ldr	r1, [pc, #12]	@ (8008534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008526:	5ccb      	ldrb	r3, [r1, r3]
 8008528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800852c:	4618      	mov	r0, r3
 800852e:	bd80      	pop	{r7, pc}
 8008530:	40023800 	.word	0x40023800
 8008534:	08011a68 	.word	0x08011a68

08008538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800853c:	f7ff ffdc 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 8008540:	4602      	mov	r2, r0
 8008542:	4b05      	ldr	r3, [pc, #20]	@ (8008558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	0b5b      	lsrs	r3, r3, #13
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	4903      	ldr	r1, [pc, #12]	@ (800855c <HAL_RCC_GetPCLK2Freq+0x24>)
 800854e:	5ccb      	ldrb	r3, [r1, r3]
 8008550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008554:	4618      	mov	r0, r3
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40023800 	.word	0x40023800
 800855c:	08011a68 	.word	0x08011a68

08008560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e041      	b.n	80085f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d106      	bne.n	800858c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7f9 fd6c 	bl	8002064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3304      	adds	r3, #4
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f000 fc40 	bl	8008e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b01      	cmp	r3, #1
 8008612:	d001      	beq.n	8008618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e044      	b.n	80086a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68da      	ldr	r2, [r3, #12]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0201 	orr.w	r2, r2, #1
 800862e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1e      	ldr	r2, [pc, #120]	@ (80086b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d018      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x6c>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008642:	d013      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x6c>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1a      	ldr	r2, [pc, #104]	@ (80086b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00e      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x6c>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a19      	ldr	r2, [pc, #100]	@ (80086b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d009      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x6c>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a17      	ldr	r2, [pc, #92]	@ (80086bc <HAL_TIM_Base_Start_IT+0xbc>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d004      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x6c>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a16      	ldr	r2, [pc, #88]	@ (80086c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d111      	bne.n	8008690 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b06      	cmp	r3, #6
 800867c:	d010      	beq.n	80086a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f042 0201 	orr.w	r2, r2, #1
 800868c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868e:	e007      	b.n	80086a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40010000 	.word	0x40010000
 80086b4:	40000400 	.word	0x40000400
 80086b8:	40000800 	.word	0x40000800
 80086bc:	40000c00 	.word	0x40000c00
 80086c0:	40014000 	.word	0x40014000

080086c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e041      	b.n	800875a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f839 	bl	8008762 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3304      	adds	r3, #4
 8008700:	4619      	mov	r1, r3
 8008702:	4610      	mov	r0, r2
 8008704:	f000 fb8e 	bl	8008e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e041      	b.n	800880c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d106      	bne.n	80087a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f839 	bl	8008814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3304      	adds	r3, #4
 80087b2:	4619      	mov	r1, r3
 80087b4:	4610      	mov	r0, r2
 80087b6:	f000 fb35 	bl	8008e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d020      	beq.n	800888c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01b      	beq.n	800888c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f06f 0202 	mvn.w	r2, #2
 800885c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f003 0303 	and.w	r3, r3, #3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fab7 	bl	8008de6 <HAL_TIM_IC_CaptureCallback>
 8008878:	e005      	b.n	8008886 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 faa9 	bl	8008dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 faba 	bl	8008dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b00      	cmp	r3, #0
 8008894:	d020      	beq.n	80088d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b00      	cmp	r3, #0
 800889e:	d01b      	beq.n	80088d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0204 	mvn.w	r2, #4
 80088a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2202      	movs	r2, #2
 80088ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa91 	bl	8008de6 <HAL_TIM_IC_CaptureCallback>
 80088c4:	e005      	b.n	80088d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa83 	bl	8008dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fa94 	bl	8008dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f003 0308 	and.w	r3, r3, #8
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d020      	beq.n	8008924 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01b      	beq.n	8008924 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f06f 0208 	mvn.w	r2, #8
 80088f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2204      	movs	r2, #4
 80088fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa6b 	bl	8008de6 <HAL_TIM_IC_CaptureCallback>
 8008910:	e005      	b.n	800891e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa5d 	bl	8008dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fa6e 	bl	8008dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0310 	and.w	r3, r3, #16
 800892a:	2b00      	cmp	r3, #0
 800892c:	d020      	beq.n	8008970 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01b      	beq.n	8008970 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0210 	mvn.w	r2, #16
 8008940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2208      	movs	r2, #8
 8008946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69db      	ldr	r3, [r3, #28]
 800894e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fa45 	bl	8008de6 <HAL_TIM_IC_CaptureCallback>
 800895c:	e005      	b.n	800896a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa37 	bl	8008dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fa48 	bl	8008dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00c      	beq.n	8008994 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	2b00      	cmp	r3, #0
 8008982:	d007      	beq.n	8008994 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f06f 0201 	mvn.w	r2, #1
 800898c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7f8 fb9e 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00c      	beq.n	80089b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d007      	beq.n	80089b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80089b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fdac 	bl	8009510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00c      	beq.n	80089dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d007      	beq.n	80089dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80089d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fa19 	bl	8008e0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00c      	beq.n	8008a00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f003 0320 	and.w	r3, r3, #32
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d007      	beq.n	8008a00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f06f 0220 	mvn.w	r2, #32
 80089f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fd7e 	bl	80094fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a00:	bf00      	nop
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d101      	bne.n	8008a26 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008a22:	2302      	movs	r3, #2
 8008a24:	e048      	b.n	8008ab8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b0c      	cmp	r3, #12
 8008a32:	d839      	bhi.n	8008aa8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008a34:	a201      	add	r2, pc, #4	@ (adr r2, 8008a3c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008a71 	.word	0x08008a71
 8008a40:	08008aa9 	.word	0x08008aa9
 8008a44:	08008aa9 	.word	0x08008aa9
 8008a48:	08008aa9 	.word	0x08008aa9
 8008a4c:	08008a7f 	.word	0x08008a7f
 8008a50:	08008aa9 	.word	0x08008aa9
 8008a54:	08008aa9 	.word	0x08008aa9
 8008a58:	08008aa9 	.word	0x08008aa9
 8008a5c:	08008a8d 	.word	0x08008a8d
 8008a60:	08008aa9 	.word	0x08008aa9
 8008a64:	08008aa9 	.word	0x08008aa9
 8008a68:	08008aa9 	.word	0x08008aa9
 8008a6c:	08008a9b 	.word	0x08008a9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 fa5a 	bl	8008f30 <TIM_OC1_SetConfig>
      break;
 8008a7c:	e017      	b.n	8008aae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fab9 	bl	8008ffc <TIM_OC2_SetConfig>
      break;
 8008a8a:	e010      	b.n	8008aae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fb1e 	bl	80090d4 <TIM_OC3_SetConfig>
      break;
 8008a98:	e009      	b.n	8008aae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fb81 	bl	80091a8 <TIM_OC4_SetConfig>
      break;
 8008aa6:	e002      	b.n	8008aae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8008aac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d101      	bne.n	8008ade <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ada:	2302      	movs	r3, #2
 8008adc:	e0ae      	b.n	8008c3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b0c      	cmp	r3, #12
 8008aea:	f200 809f 	bhi.w	8008c2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008aee:	a201      	add	r2, pc, #4	@ (adr r2, 8008af4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b29 	.word	0x08008b29
 8008af8:	08008c2d 	.word	0x08008c2d
 8008afc:	08008c2d 	.word	0x08008c2d
 8008b00:	08008c2d 	.word	0x08008c2d
 8008b04:	08008b69 	.word	0x08008b69
 8008b08:	08008c2d 	.word	0x08008c2d
 8008b0c:	08008c2d 	.word	0x08008c2d
 8008b10:	08008c2d 	.word	0x08008c2d
 8008b14:	08008bab 	.word	0x08008bab
 8008b18:	08008c2d 	.word	0x08008c2d
 8008b1c:	08008c2d 	.word	0x08008c2d
 8008b20:	08008c2d 	.word	0x08008c2d
 8008b24:	08008beb 	.word	0x08008beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68b9      	ldr	r1, [r7, #8]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f9fe 	bl	8008f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	699a      	ldr	r2, [r3, #24]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0208 	orr.w	r2, r2, #8
 8008b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699a      	ldr	r2, [r3, #24]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0204 	bic.w	r2, r2, #4
 8008b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6999      	ldr	r1, [r3, #24]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	691a      	ldr	r2, [r3, #16]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	619a      	str	r2, [r3, #24]
      break;
 8008b66:	e064      	b.n	8008c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68b9      	ldr	r1, [r7, #8]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fa44 	bl	8008ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	699a      	ldr	r2, [r3, #24]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	699a      	ldr	r2, [r3, #24]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6999      	ldr	r1, [r3, #24]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	021a      	lsls	r2, r3, #8
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	619a      	str	r2, [r3, #24]
      break;
 8008ba8:	e043      	b.n	8008c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fa8f 	bl	80090d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	69da      	ldr	r2, [r3, #28]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f042 0208 	orr.w	r2, r2, #8
 8008bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69da      	ldr	r2, [r3, #28]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 0204 	bic.w	r2, r2, #4
 8008bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	69d9      	ldr	r1, [r3, #28]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	691a      	ldr	r2, [r3, #16]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	430a      	orrs	r2, r1
 8008be6:	61da      	str	r2, [r3, #28]
      break;
 8008be8:	e023      	b.n	8008c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fad9 	bl	80091a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	69da      	ldr	r2, [r3, #28]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	69da      	ldr	r2, [r3, #28]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69d9      	ldr	r1, [r3, #28]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	021a      	lsls	r2, r3, #8
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	61da      	str	r2, [r3, #28]
      break;
 8008c2a:	e002      	b.n	8008c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_TIM_ConfigClockSource+0x1c>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e0b4      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x186>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c98:	d03e      	beq.n	8008d18 <HAL_TIM_ConfigClockSource+0xd4>
 8008c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c9e:	f200 8087 	bhi.w	8008db0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ca6:	f000 8086 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x172>
 8008caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cae:	d87f      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x16c>
 8008cb0:	2b70      	cmp	r3, #112	@ 0x70
 8008cb2:	d01a      	beq.n	8008cea <HAL_TIM_ConfigClockSource+0xa6>
 8008cb4:	2b70      	cmp	r3, #112	@ 0x70
 8008cb6:	d87b      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x16c>
 8008cb8:	2b60      	cmp	r3, #96	@ 0x60
 8008cba:	d050      	beq.n	8008d5e <HAL_TIM_ConfigClockSource+0x11a>
 8008cbc:	2b60      	cmp	r3, #96	@ 0x60
 8008cbe:	d877      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x16c>
 8008cc0:	2b50      	cmp	r3, #80	@ 0x50
 8008cc2:	d03c      	beq.n	8008d3e <HAL_TIM_ConfigClockSource+0xfa>
 8008cc4:	2b50      	cmp	r3, #80	@ 0x50
 8008cc6:	d873      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x16c>
 8008cc8:	2b40      	cmp	r3, #64	@ 0x40
 8008cca:	d058      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x13a>
 8008ccc:	2b40      	cmp	r3, #64	@ 0x40
 8008cce:	d86f      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x16c>
 8008cd0:	2b30      	cmp	r3, #48	@ 0x30
 8008cd2:	d064      	beq.n	8008d9e <HAL_TIM_ConfigClockSource+0x15a>
 8008cd4:	2b30      	cmp	r3, #48	@ 0x30
 8008cd6:	d86b      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x16c>
 8008cd8:	2b20      	cmp	r3, #32
 8008cda:	d060      	beq.n	8008d9e <HAL_TIM_ConfigClockSource+0x15a>
 8008cdc:	2b20      	cmp	r3, #32
 8008cde:	d867      	bhi.n	8008db0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d05c      	beq.n	8008d9e <HAL_TIM_ConfigClockSource+0x15a>
 8008ce4:	2b10      	cmp	r3, #16
 8008ce6:	d05a      	beq.n	8008d9e <HAL_TIM_ConfigClockSource+0x15a>
 8008ce8:	e062      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cfa:	f000 fb1f 	bl	800933c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	609a      	str	r2, [r3, #8]
      break;
 8008d16:	e04f      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d28:	f000 fb08 	bl	800933c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689a      	ldr	r2, [r3, #8]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d3a:	609a      	str	r2, [r3, #8]
      break;
 8008d3c:	e03c      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f000 fa7c 	bl	8009248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2150      	movs	r1, #80	@ 0x50
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 fad5 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 8008d5c:	e02c      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f000 fa9b 	bl	80092a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2160      	movs	r1, #96	@ 0x60
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fac5 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 8008d7c:	e01c      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f000 fa5c 	bl	8009248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2140      	movs	r1, #64	@ 0x40
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fab5 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 8008d9c:	e00c      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4619      	mov	r1, r3
 8008da8:	4610      	mov	r0, r2
 8008daa:	f000 faac 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 8008dae:	e003      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]
      break;
 8008db4:	e000      	b.n	8008db8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dda:	bf00      	nop
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a37      	ldr	r2, [pc, #220]	@ (8008f14 <TIM_Base_SetConfig+0xf0>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00f      	beq.n	8008e5c <TIM_Base_SetConfig+0x38>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e42:	d00b      	beq.n	8008e5c <TIM_Base_SetConfig+0x38>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a34      	ldr	r2, [pc, #208]	@ (8008f18 <TIM_Base_SetConfig+0xf4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d007      	beq.n	8008e5c <TIM_Base_SetConfig+0x38>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a33      	ldr	r2, [pc, #204]	@ (8008f1c <TIM_Base_SetConfig+0xf8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d003      	beq.n	8008e5c <TIM_Base_SetConfig+0x38>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a32      	ldr	r2, [pc, #200]	@ (8008f20 <TIM_Base_SetConfig+0xfc>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d108      	bne.n	8008e6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a28      	ldr	r2, [pc, #160]	@ (8008f14 <TIM_Base_SetConfig+0xf0>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d01b      	beq.n	8008eae <TIM_Base_SetConfig+0x8a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e7c:	d017      	beq.n	8008eae <TIM_Base_SetConfig+0x8a>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a25      	ldr	r2, [pc, #148]	@ (8008f18 <TIM_Base_SetConfig+0xf4>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d013      	beq.n	8008eae <TIM_Base_SetConfig+0x8a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a24      	ldr	r2, [pc, #144]	@ (8008f1c <TIM_Base_SetConfig+0xf8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d00f      	beq.n	8008eae <TIM_Base_SetConfig+0x8a>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a23      	ldr	r2, [pc, #140]	@ (8008f20 <TIM_Base_SetConfig+0xfc>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00b      	beq.n	8008eae <TIM_Base_SetConfig+0x8a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a22      	ldr	r2, [pc, #136]	@ (8008f24 <TIM_Base_SetConfig+0x100>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d007      	beq.n	8008eae <TIM_Base_SetConfig+0x8a>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a21      	ldr	r2, [pc, #132]	@ (8008f28 <TIM_Base_SetConfig+0x104>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d003      	beq.n	8008eae <TIM_Base_SetConfig+0x8a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a20      	ldr	r2, [pc, #128]	@ (8008f2c <TIM_Base_SetConfig+0x108>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d108      	bne.n	8008ec0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	695b      	ldr	r3, [r3, #20]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	689a      	ldr	r2, [r3, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8008f14 <TIM_Base_SetConfig+0xf0>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d103      	bne.n	8008eee <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	691a      	ldr	r2, [r3, #16]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f043 0204 	orr.w	r2, r3, #4
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	601a      	str	r2, [r3, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40000800 	.word	0x40000800
 8008f20:	40000c00 	.word	0x40000c00
 8008f24:	40014000 	.word	0x40014000
 8008f28:	40014400 	.word	0x40014400
 8008f2c:	40014800 	.word	0x40014800

08008f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a1b      	ldr	r3, [r3, #32]
 8008f44:	f023 0201 	bic.w	r2, r3, #1
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0303 	bic.w	r3, r3, #3
 8008f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f023 0302 	bic.w	r3, r3, #2
 8008f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a1c      	ldr	r2, [pc, #112]	@ (8008ff8 <TIM_OC1_SetConfig+0xc8>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d10c      	bne.n	8008fa6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f023 0308 	bic.w	r3, r3, #8
 8008f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f023 0304 	bic.w	r3, r3, #4
 8008fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a13      	ldr	r2, [pc, #76]	@ (8008ff8 <TIM_OC1_SetConfig+0xc8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d111      	bne.n	8008fd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	621a      	str	r2, [r3, #32]
}
 8008fec:	bf00      	nop
 8008fee:	371c      	adds	r7, #28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	40010000 	.word	0x40010000

08008ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	f023 0210 	bic.w	r2, r3, #16
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800902a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4313      	orrs	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f023 0320 	bic.w	r3, r3, #32
 8009046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	4313      	orrs	r3, r2
 8009052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a1e      	ldr	r2, [pc, #120]	@ (80090d0 <TIM_OC2_SetConfig+0xd4>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d10d      	bne.n	8009078 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4313      	orrs	r3, r2
 800906e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a15      	ldr	r2, [pc, #84]	@ (80090d0 <TIM_OC2_SetConfig+0xd4>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d113      	bne.n	80090a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800908e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	4313      	orrs	r3, r2
 800909a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	621a      	str	r2, [r3, #32]
}
 80090c2:	bf00      	nop
 80090c4:	371c      	adds	r7, #28
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	40010000 	.word	0x40010000

080090d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 0303 	bic.w	r3, r3, #3
 800910a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4313      	orrs	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800911c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	4313      	orrs	r3, r2
 8009128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a1d      	ldr	r2, [pc, #116]	@ (80091a4 <TIM_OC3_SetConfig+0xd0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d10d      	bne.n	800914e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	021b      	lsls	r3, r3, #8
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	4313      	orrs	r3, r2
 8009144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800914c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a14      	ldr	r2, [pc, #80]	@ (80091a4 <TIM_OC3_SetConfig+0xd0>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d113      	bne.n	800917e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800915c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	011b      	lsls	r3, r3, #4
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	4313      	orrs	r3, r2
 8009170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	011b      	lsls	r3, r3, #4
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	4313      	orrs	r3, r2
 800917c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	621a      	str	r2, [r3, #32]
}
 8009198:	bf00      	nop
 800919a:	371c      	adds	r7, #28
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	40010000 	.word	0x40010000

080091a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	031b      	lsls	r3, r3, #12
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a10      	ldr	r2, [pc, #64]	@ (8009244 <TIM_OC4_SetConfig+0x9c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d109      	bne.n	800921c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800920e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	019b      	lsls	r3, r3, #6
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	4313      	orrs	r3, r2
 800921a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	621a      	str	r2, [r3, #32]
}
 8009236:	bf00      	nop
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	40010000 	.word	0x40010000

08009248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	f023 0201 	bic.w	r2, r3, #1
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	4313      	orrs	r3, r2
 800927c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f023 030a 	bic.w	r3, r3, #10
 8009284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4313      	orrs	r3, r2
 800928c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	621a      	str	r2, [r3, #32]
}
 800929a:	bf00      	nop
 800929c:	371c      	adds	r7, #28
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b087      	sub	sp, #28
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	f023 0210 	bic.w	r2, r3, #16
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	031b      	lsls	r3, r3, #12
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	4313      	orrs	r3, r2
 80092da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	011b      	lsls	r3, r3, #4
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	621a      	str	r2, [r3, #32]
}
 80092fa:	bf00      	nop
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009306:	b480      	push	{r7}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800931c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4313      	orrs	r3, r2
 8009324:	f043 0307 	orr.w	r3, r3, #7
 8009328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	609a      	str	r2, [r3, #8]
}
 8009330:	bf00      	nop
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	021a      	lsls	r2, r3, #8
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	431a      	orrs	r2, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	4313      	orrs	r3, r2
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4313      	orrs	r3, r2
 8009368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	609a      	str	r2, [r3, #8]
}
 8009370:	bf00      	nop
 8009372:	371c      	adds	r7, #28
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d101      	bne.n	8009394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009390:	2302      	movs	r3, #2
 8009392:	e050      	b.n	8009436 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d018      	beq.n	800940a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093e0:	d013      	beq.n	800940a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a18      	ldr	r2, [pc, #96]	@ (8009448 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d00e      	beq.n	800940a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a16      	ldr	r2, [pc, #88]	@ (800944c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d009      	beq.n	800940a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a15      	ldr	r2, [pc, #84]	@ (8009450 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d004      	beq.n	800940a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a13      	ldr	r2, [pc, #76]	@ (8009454 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d10c      	bne.n	8009424 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4313      	orrs	r3, r2
 800941a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	40010000 	.word	0x40010000
 8009448:	40000400 	.word	0x40000400
 800944c:	40000800 	.word	0x40000800
 8009450:	40000c00 	.word	0x40000c00
 8009454:	40014000 	.word	0x40014000

08009458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800946c:	2b01      	cmp	r3, #1
 800946e:	d101      	bne.n	8009474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009470:	2302      	movs	r3, #2
 8009472:	e03d      	b.n	80094f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	4313      	orrs	r3, r2
 8009496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	4313      	orrs	r3, r2
 80094dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e042      	b.n	80095bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7f8 fe52 	bl	80021f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2224      	movs	r2, #36	@ 0x24
 8009554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 f821 	bl	800a5b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	691a      	ldr	r2, [r3, #16]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800957c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	695a      	ldr	r2, [r3, #20]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800958c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68da      	ldr	r2, [r3, #12]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800959c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2220      	movs	r2, #32
 80095b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08a      	sub	sp, #40	@ 0x28
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	4613      	mov	r3, r2
 80095d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095d4:	2300      	movs	r3, #0
 80095d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d175      	bne.n	80096d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <HAL_UART_Transmit+0x2c>
 80095ea:	88fb      	ldrh	r3, [r7, #6]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e06e      	b.n	80096d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2221      	movs	r2, #33	@ 0x21
 80095fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009602:	f7fb fa4d 	bl	8004aa0 <HAL_GetTick>
 8009606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	88fa      	ldrh	r2, [r7, #6]
 800960c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	88fa      	ldrh	r2, [r7, #6]
 8009612:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800961c:	d108      	bne.n	8009630 <HAL_UART_Transmit+0x6c>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	e003      	b.n	8009638 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009634:	2300      	movs	r3, #0
 8009636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009638:	e02e      	b.n	8009698 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2200      	movs	r2, #0
 8009642:	2180      	movs	r1, #128	@ 0x80
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 fcf1 	bl	800a02c <UART_WaitOnFlagUntilTimeout>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d005      	beq.n	800965c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2220      	movs	r2, #32
 8009654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e03a      	b.n	80096d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10b      	bne.n	800967a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	3302      	adds	r3, #2
 8009676:	61bb      	str	r3, [r7, #24]
 8009678:	e007      	b.n	800968a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	781a      	ldrb	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	3301      	adds	r3, #1
 8009688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800968e:	b29b      	uxth	r3, r3
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1cb      	bne.n	800963a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2200      	movs	r2, #0
 80096aa:	2140      	movs	r1, #64	@ 0x40
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 fcbd 	bl	800a02c <UART_WaitOnFlagUntilTimeout>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2220      	movs	r2, #32
 80096bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e006      	b.n	80096d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2220      	movs	r2, #32
 80096c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	e000      	b.n	80096d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80096d0:	2302      	movs	r3, #2
  }
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3720      	adds	r7, #32
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b090      	sub	sp, #64	@ 0x40
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f0:	2b80      	cmp	r3, #128	@ 0x80
 80096f2:	bf0c      	ite	eq
 80096f4:	2301      	moveq	r3, #1
 80096f6:	2300      	movne	r3, #0
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b21      	cmp	r3, #33	@ 0x21
 8009706:	d128      	bne.n	800975a <HAL_UART_DMAStop+0x80>
 8009708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800970a:	2b00      	cmp	r3, #0
 800970c:	d025      	beq.n	800975a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3314      	adds	r3, #20
 8009714:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	623b      	str	r3, [r7, #32]
   return(result);
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009724:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3314      	adds	r3, #20
 800972c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800972e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009730:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009736:	e841 2300 	strex	r3, r2, [r1]
 800973a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800973c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1e5      	bne.n	800970e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974e:	4618      	mov	r0, r3
 8009750:	f7fc f918 	bl	8005984 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fd69 	bl	800a22c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009764:	2b40      	cmp	r3, #64	@ 0x40
 8009766:	bf0c      	ite	eq
 8009768:	2301      	moveq	r3, #1
 800976a:	2300      	movne	r3, #0
 800976c:	b2db      	uxtb	r3, r3
 800976e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b22      	cmp	r3, #34	@ 0x22
 800977a:	d128      	bne.n	80097ce <HAL_UART_DMAStop+0xf4>
 800977c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d025      	beq.n	80097ce <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3314      	adds	r3, #20
 8009788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	60fb      	str	r3, [r7, #12]
   return(result);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009798:	637b      	str	r3, [r7, #52]	@ 0x34
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3314      	adds	r3, #20
 80097a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097a2:	61fa      	str	r2, [r7, #28]
 80097a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	69b9      	ldr	r1, [r7, #24]
 80097a8:	69fa      	ldr	r2, [r7, #28]
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	617b      	str	r3, [r7, #20]
   return(result);
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e5      	bne.n	8009782 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d004      	beq.n	80097c8 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fc f8de 	bl	8005984 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fd57 	bl	800a27c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3740      	adds	r7, #64	@ 0x40
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b08c      	sub	sp, #48	@ 0x30
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	4613      	mov	r3, r2
 80097e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b20      	cmp	r3, #32
 80097f0:	d146      	bne.n	8009880 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80097f8:	88fb      	ldrh	r3, [r7, #6]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e03f      	b.n	8009882 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800980e:	88fb      	ldrh	r3, [r7, #6]
 8009810:	461a      	mov	r2, r3
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 fc63 	bl	800a0e0 <UART_Start_Receive_DMA>
 800981a:	4603      	mov	r3, r0
 800981c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009824:	2b01      	cmp	r3, #1
 8009826:	d125      	bne.n	8009874 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009828:	2300      	movs	r3, #0
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	613b      	str	r3, [r7, #16]
 800983c:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	330c      	adds	r3, #12
 8009844:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	617b      	str	r3, [r7, #20]
   return(result);
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f043 0310 	orr.w	r3, r3, #16
 8009854:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	330c      	adds	r3, #12
 800985c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800985e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	6a39      	ldr	r1, [r7, #32]
 8009864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	61fb      	str	r3, [r7, #28]
   return(result);
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e5      	bne.n	800983e <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8009872:	e002      	b.n	800987a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800987a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800987e:	e000      	b.n	8009882 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8009880:	2302      	movs	r3, #2
  }
}
 8009882:	4618      	mov	r0, r3
 8009884:	3730      	adds	r7, #48	@ 0x30
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
	...

0800988c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b0ba      	sub	sp, #232	@ 0xe8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80098b2:	2300      	movs	r3, #0
 80098b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80098be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098c2:	f003 030f 	and.w	r3, r3, #15
 80098c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80098ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10f      	bne.n	80098f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d6:	f003 0320 	and.w	r3, r3, #32
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d009      	beq.n	80098f2 <HAL_UART_IRQHandler+0x66>
 80098de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fda2 	bl	800a434 <UART_Receive_IT>
      return;
 80098f0:	e273      	b.n	8009dda <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80098f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 80de 	beq.w	8009ab8 <HAL_UART_IRQHandler+0x22c>
 80098fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800990c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 80d1 	beq.w	8009ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00b      	beq.n	800993a <HAL_UART_IRQHandler+0xae>
 8009922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800992a:	2b00      	cmp	r3, #0
 800992c:	d005      	beq.n	800993a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009932:	f043 0201 	orr.w	r2, r3, #1
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800993a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00b      	beq.n	800995e <HAL_UART_IRQHandler+0xd2>
 8009946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d005      	beq.n	800995e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009956:	f043 0202 	orr.w	r2, r3, #2
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800995e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00b      	beq.n	8009982 <HAL_UART_IRQHandler+0xf6>
 800996a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	d005      	beq.n	8009982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800997a:	f043 0204 	orr.w	r2, r3, #4
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009986:	f003 0308 	and.w	r3, r3, #8
 800998a:	2b00      	cmp	r3, #0
 800998c:	d011      	beq.n	80099b2 <HAL_UART_IRQHandler+0x126>
 800998e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009992:	f003 0320 	and.w	r3, r3, #32
 8009996:	2b00      	cmp	r3, #0
 8009998:	d105      	bne.n	80099a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800999a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099aa:	f043 0208 	orr.w	r2, r3, #8
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 820a 	beq.w	8009dd0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099c0:	f003 0320 	and.w	r3, r3, #32
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <HAL_UART_IRQHandler+0x14e>
 80099c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fd2d 	bl	800a434 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e4:	2b40      	cmp	r3, #64	@ 0x40
 80099e6:	bf0c      	ite	eq
 80099e8:	2301      	moveq	r3, #1
 80099ea:	2300      	movne	r3, #0
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099f6:	f003 0308 	and.w	r3, r3, #8
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d103      	bne.n	8009a06 <HAL_UART_IRQHandler+0x17a>
 80099fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d04f      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fc38 	bl	800a27c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a16:	2b40      	cmp	r3, #64	@ 0x40
 8009a18:	d141      	bne.n	8009a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3314      	adds	r3, #20
 8009a20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3314      	adds	r3, #20
 8009a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1d9      	bne.n	8009a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d013      	beq.n	8009a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a72:	4a8a      	ldr	r2, [pc, #552]	@ (8009c9c <HAL_UART_IRQHandler+0x410>)
 8009a74:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fb fff2 	bl	8005a64 <HAL_DMA_Abort_IT>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d016      	beq.n	8009ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009a90:	4610      	mov	r0, r2
 8009a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a94:	e00e      	b.n	8009ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f9c0 	bl	8009e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a9c:	e00a      	b.n	8009ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f9bc 	bl	8009e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aa4:	e006      	b.n	8009ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f9b8 	bl	8009e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009ab2:	e18d      	b.n	8009dd0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab4:	bf00      	nop
    return;
 8009ab6:	e18b      	b.n	8009dd0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	f040 8167 	bne.w	8009d90 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ac6:	f003 0310 	and.w	r3, r3, #16
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f000 8160 	beq.w	8009d90 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ad4:	f003 0310 	and.w	r3, r3, #16
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 8159 	beq.w	8009d90 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60bb      	str	r3, [r7, #8]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	60bb      	str	r3, [r7, #8]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	60bb      	str	r3, [r7, #8]
 8009af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009afe:	2b40      	cmp	r3, #64	@ 0x40
 8009b00:	f040 80ce 	bne.w	8009ca0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 80a9 	beq.w	8009c6c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b22:	429a      	cmp	r2, r3
 8009b24:	f080 80a2 	bcs.w	8009c6c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b3a:	f000 8088 	beq.w	8009c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	330c      	adds	r3, #12
 8009b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	330c      	adds	r3, #12
 8009b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009b6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b7a:	e841 2300 	strex	r3, r2, [r1]
 8009b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1d9      	bne.n	8009b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3314      	adds	r3, #20
 8009b90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b9c:	f023 0301 	bic.w	r3, r3, #1
 8009ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3314      	adds	r3, #20
 8009baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009bae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009bba:	e841 2300 	strex	r3, r2, [r1]
 8009bbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1e1      	bne.n	8009b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3314      	adds	r3, #20
 8009bcc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3314      	adds	r3, #20
 8009be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009bea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009bec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bf0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bf2:	e841 2300 	strex	r3, r2, [r1]
 8009bf6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1e3      	bne.n	8009bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2220      	movs	r2, #32
 8009c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	330c      	adds	r3, #12
 8009c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c16:	e853 3f00 	ldrex	r3, [r3]
 8009c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c1e:	f023 0310 	bic.w	r3, r3, #16
 8009c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	330c      	adds	r3, #12
 8009c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009c30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009c32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c38:	e841 2300 	strex	r3, r2, [r1]
 8009c3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e3      	bne.n	8009c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fb fe9b 	bl	8005984 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2202      	movs	r2, #2
 8009c52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7f9 f9dc 	bl	8003022 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009c6a:	e0b3      	b.n	8009dd4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c74:	429a      	cmp	r2, r3
 8009c76:	f040 80ad 	bne.w	8009dd4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c84:	f040 80a6 	bne.w	8009dd4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7f9 f9c4 	bl	8003022 <HAL_UARTEx_RxEventCallback>
      return;
 8009c9a:	e09b      	b.n	8009dd4 <HAL_UART_IRQHandler+0x548>
 8009c9c:	0800a343 	.word	0x0800a343
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 808e 	beq.w	8009dd8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8089 	beq.w	8009dd8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	330c      	adds	r3, #12
 8009ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd0:	e853 3f00 	ldrex	r3, [r3]
 8009cd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	330c      	adds	r3, #12
 8009ce6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009cea:	647a      	str	r2, [r7, #68]	@ 0x44
 8009cec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cf2:	e841 2300 	strex	r3, r2, [r1]
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1e3      	bne.n	8009cc6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3314      	adds	r3, #20
 8009d04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d08:	e853 3f00 	ldrex	r3, [r3]
 8009d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	f023 0301 	bic.w	r3, r3, #1
 8009d14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3314      	adds	r3, #20
 8009d1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d22:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1e3      	bne.n	8009cfe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2220      	movs	r2, #32
 8009d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	330c      	adds	r3, #12
 8009d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	e853 3f00 	ldrex	r3, [r3]
 8009d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0310 	bic.w	r3, r3, #16
 8009d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	330c      	adds	r3, #12
 8009d64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009d68:	61fa      	str	r2, [r7, #28]
 8009d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6c:	69b9      	ldr	r1, [r7, #24]
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	e841 2300 	strex	r3, r2, [r1]
 8009d74:	617b      	str	r3, [r7, #20]
   return(result);
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1e3      	bne.n	8009d44 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7f9 f94a 	bl	8003022 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d8e:	e023      	b.n	8009dd8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <HAL_UART_IRQHandler+0x524>
 8009d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d003      	beq.n	8009db0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fadb 	bl	800a364 <UART_Transmit_IT>
    return;
 8009dae:	e014      	b.n	8009dda <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00e      	beq.n	8009dda <HAL_UART_IRQHandler+0x54e>
 8009dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d008      	beq.n	8009dda <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fb1b 	bl	800a404 <UART_EndTransmit_IT>
    return;
 8009dce:	e004      	b.n	8009dda <HAL_UART_IRQHandler+0x54e>
    return;
 8009dd0:	bf00      	nop
 8009dd2:	e002      	b.n	8009dda <HAL_UART_IRQHandler+0x54e>
      return;
 8009dd4:	bf00      	nop
 8009dd6:	e000      	b.n	8009dda <HAL_UART_IRQHandler+0x54e>
      return;
 8009dd8:	bf00      	nop
  }
}
 8009dda:	37e8      	adds	r7, #232	@ 0xe8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b09c      	sub	sp, #112	@ 0x70
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d172      	bne.n	8009f32 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e4e:	2200      	movs	r2, #0
 8009e50:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	330c      	adds	r3, #12
 8009e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	330c      	adds	r3, #12
 8009e70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009e72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009e74:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e5      	bne.n	8009e52 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3314      	adds	r3, #20
 8009e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e98:	f023 0301 	bic.w	r3, r3, #1
 8009e9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3314      	adds	r3, #20
 8009ea4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009ea6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ea8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009eac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009eae:	e841 2300 	strex	r3, r2, [r1]
 8009eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1e5      	bne.n	8009e86 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3314      	adds	r3, #20
 8009ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ed0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3314      	adds	r3, #20
 8009ed8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009eda:	633a      	str	r2, [r7, #48]	@ 0x30
 8009edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ee2:	e841 2300 	strex	r3, r2, [r1]
 8009ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1e5      	bne.n	8009eba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ef0:	2220      	movs	r2, #32
 8009ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d119      	bne.n	8009f32 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	330c      	adds	r3, #12
 8009f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	e853 3f00 	ldrex	r3, [r3]
 8009f0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f023 0310 	bic.w	r3, r3, #16
 8009f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	330c      	adds	r3, #12
 8009f1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009f1e:	61fa      	str	r2, [r7, #28]
 8009f20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f22:	69b9      	ldr	r1, [r7, #24]
 8009f24:	69fa      	ldr	r2, [r7, #28]
 8009f26:	e841 2300 	strex	r3, r2, [r1]
 8009f2a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1e5      	bne.n	8009efe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f34:	2200      	movs	r2, #0
 8009f36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d106      	bne.n	8009f4e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f44:	4619      	mov	r1, r3
 8009f46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f48:	f7f9 f86b 	bl	8003022 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f4c:	e002      	b.n	8009f54 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009f4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f50:	f7ff ff50 	bl	8009df4 <HAL_UART_RxCpltCallback>
}
 8009f54:	bf00      	nop
 8009f56:	3770      	adds	r7, #112	@ 0x70
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f68:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d108      	bne.n	8009f8a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f7c:	085b      	lsrs	r3, r3, #1
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	4619      	mov	r1, r3
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f7f9 f84d 	bl	8003022 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f88:	e002      	b.n	8009f90 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f7ff ff3c 	bl	8009e08 <HAL_UART_RxHalfCpltCallback>
}
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fb4:	2b80      	cmp	r3, #128	@ 0x80
 8009fb6:	bf0c      	ite	eq
 8009fb8:	2301      	moveq	r3, #1
 8009fba:	2300      	movne	r3, #0
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b21      	cmp	r3, #33	@ 0x21
 8009fca:	d108      	bne.n	8009fde <UART_DMAError+0x46>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d005      	beq.n	8009fde <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009fd8:	68b8      	ldr	r0, [r7, #8]
 8009fda:	f000 f927 	bl	800a22c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fe8:	2b40      	cmp	r3, #64	@ 0x40
 8009fea:	bf0c      	ite	eq
 8009fec:	2301      	moveq	r3, #1
 8009fee:	2300      	movne	r3, #0
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	2b22      	cmp	r3, #34	@ 0x22
 8009ffe:	d108      	bne.n	800a012 <UART_DMAError+0x7a>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d005      	beq.n	800a012 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2200      	movs	r2, #0
 800a00a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a00c:	68b8      	ldr	r0, [r7, #8]
 800a00e:	f000 f935 	bl	800a27c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a016:	f043 0210 	orr.w	r2, r3, #16
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a01e:	68b8      	ldr	r0, [r7, #8]
 800a020:	f7ff fefc 	bl	8009e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a024:	bf00      	nop
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	4613      	mov	r3, r2
 800a03a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a03c:	e03b      	b.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a044:	d037      	beq.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a046:	f7fa fd2b 	bl	8004aa0 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	6a3a      	ldr	r2, [r7, #32]
 800a052:	429a      	cmp	r2, r3
 800a054:	d302      	bcc.n	800a05c <UART_WaitOnFlagUntilTimeout+0x30>
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e03a      	b.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f003 0304 	and.w	r3, r3, #4
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d023      	beq.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b80      	cmp	r3, #128	@ 0x80
 800a072:	d020      	beq.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b40      	cmp	r3, #64	@ 0x40
 800a078:	d01d      	beq.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0308 	and.w	r3, r3, #8
 800a084:	2b08      	cmp	r3, #8
 800a086:	d116      	bne.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a088:	2300      	movs	r3, #0
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	617b      	str	r3, [r7, #20]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	617b      	str	r3, [r7, #20]
 800a09c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 f8ec 	bl	800a27c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2208      	movs	r2, #8
 800a0a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e00f      	b.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	4013      	ands	r3, r2
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	bf0c      	ite	eq
 800a0c6:	2301      	moveq	r3, #1
 800a0c8:	2300      	movne	r3, #0
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d0b4      	beq.n	800a03e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b098      	sub	sp, #96	@ 0x60
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	88fa      	ldrh	r2, [r7, #6]
 800a0f8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2222      	movs	r2, #34	@ 0x22
 800a104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a10c:	4a44      	ldr	r2, [pc, #272]	@ (800a220 <UART_Start_Receive_DMA+0x140>)
 800a10e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a114:	4a43      	ldr	r2, [pc, #268]	@ (800a224 <UART_Start_Receive_DMA+0x144>)
 800a116:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a11c:	4a42      	ldr	r2, [pc, #264]	@ (800a228 <UART_Start_Receive_DMA+0x148>)
 800a11e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a124:	2200      	movs	r2, #0
 800a126:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a128:	f107 0308 	add.w	r3, r7, #8
 800a12c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3304      	adds	r3, #4
 800a138:	4619      	mov	r1, r3
 800a13a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	88fb      	ldrh	r3, [r7, #6]
 800a140:	f7fb fbc8 	bl	80058d4 <HAL_DMA_Start_IT>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d008      	beq.n	800a15c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2210      	movs	r2, #16
 800a14e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2220      	movs	r2, #32
 800a154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e05d      	b.n	800a218 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a15c:	2300      	movs	r3, #0
 800a15e:	613b      	str	r3, [r7, #16]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	613b      	str	r3, [r7, #16]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	613b      	str	r3, [r7, #16]
 800a170:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d019      	beq.n	800a1ae <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	330c      	adds	r3, #12
 800a180:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a184:	e853 3f00 	ldrex	r3, [r3]
 800a188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a18a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a18c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a190:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	330c      	adds	r3, #12
 800a198:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a19a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a19c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a1a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1a2:	e841 2300 	strex	r3, r2, [r1]
 800a1a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a1a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1e5      	bne.n	800a17a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3314      	adds	r3, #20
 800a1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c0:	f043 0301 	orr.w	r3, r3, #1
 800a1c4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3314      	adds	r3, #20
 800a1cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a1ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a1d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a1d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e5      	bne.n	800a1ae <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3314      	adds	r3, #20
 800a1e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	e853 3f00 	ldrex	r3, [r3]
 800a1f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3314      	adds	r3, #20
 800a200:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a202:	627a      	str	r2, [r7, #36]	@ 0x24
 800a204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a206:	6a39      	ldr	r1, [r7, #32]
 800a208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a20a:	e841 2300 	strex	r3, r2, [r1]
 800a20e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1e5      	bne.n	800a1e2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3760      	adds	r7, #96	@ 0x60
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	08009e31 	.word	0x08009e31
 800a224:	08009f5d 	.word	0x08009f5d
 800a228:	08009f99 	.word	0x08009f99

0800a22c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b089      	sub	sp, #36	@ 0x24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	330c      	adds	r3, #12
 800a23a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	e853 3f00 	ldrex	r3, [r3]
 800a242:	60bb      	str	r3, [r7, #8]
   return(result);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a24a:	61fb      	str	r3, [r7, #28]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	330c      	adds	r3, #12
 800a252:	69fa      	ldr	r2, [r7, #28]
 800a254:	61ba      	str	r2, [r7, #24]
 800a256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a258:	6979      	ldr	r1, [r7, #20]
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	e841 2300 	strex	r3, r2, [r1]
 800a260:	613b      	str	r3, [r7, #16]
   return(result);
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1e5      	bne.n	800a234 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a270:	bf00      	nop
 800a272:	3724      	adds	r7, #36	@ 0x24
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b095      	sub	sp, #84	@ 0x54
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	330c      	adds	r3, #12
 800a28a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a296:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a29a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2a4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2ac:	e841 2300 	strex	r3, r2, [r1]
 800a2b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e5      	bne.n	800a284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3314      	adds	r3, #20
 800a2be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	e853 3f00 	ldrex	r3, [r3]
 800a2c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	f023 0301 	bic.w	r3, r3, #1
 800a2ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3314      	adds	r3, #20
 800a2d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2e0:	e841 2300 	strex	r3, r2, [r1]
 800a2e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1e5      	bne.n	800a2b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d119      	bne.n	800a328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	330c      	adds	r3, #12
 800a2fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	e853 3f00 	ldrex	r3, [r3]
 800a302:	60bb      	str	r3, [r7, #8]
   return(result);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f023 0310 	bic.w	r3, r3, #16
 800a30a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	330c      	adds	r3, #12
 800a312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a314:	61ba      	str	r2, [r7, #24]
 800a316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a318:	6979      	ldr	r1, [r7, #20]
 800a31a:	69ba      	ldr	r2, [r7, #24]
 800a31c:	e841 2300 	strex	r3, r2, [r1]
 800a320:	613b      	str	r3, [r7, #16]
   return(result);
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1e5      	bne.n	800a2f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2220      	movs	r2, #32
 800a32c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a336:	bf00      	nop
 800a338:	3754      	adds	r7, #84	@ 0x54
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a34e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f7ff fd60 	bl	8009e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a35c:	bf00      	nop
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b21      	cmp	r3, #33	@ 0x21
 800a376:	d13e      	bne.n	800a3f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a380:	d114      	bne.n	800a3ac <UART_Transmit_IT+0x48>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d110      	bne.n	800a3ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	461a      	mov	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a39e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
 800a3a4:	1c9a      	adds	r2, r3, #2
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	621a      	str	r2, [r3, #32]
 800a3aa:	e008      	b.n	800a3be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a1b      	ldr	r3, [r3, #32]
 800a3b0:	1c59      	adds	r1, r3, #1
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	6211      	str	r1, [r2, #32]
 800a3b6:	781a      	ldrb	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10f      	bne.n	800a3f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68da      	ldr	r2, [r3, #12]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e000      	b.n	800a3f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3f6:	2302      	movs	r3, #2
  }
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a41a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2220      	movs	r2, #32
 800a420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff fcdb 	bl	8009de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08c      	sub	sp, #48	@ 0x30
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a43c:	2300      	movs	r3, #0
 800a43e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a440:	2300      	movs	r3, #0
 800a442:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b22      	cmp	r3, #34	@ 0x22
 800a44e:	f040 80aa 	bne.w	800a5a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a45a:	d115      	bne.n	800a488 <UART_Receive_IT+0x54>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d111      	bne.n	800a488 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a468:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	b29b      	uxth	r3, r3
 800a472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a476:	b29a      	uxth	r2, r3
 800a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a480:	1c9a      	adds	r2, r3, #2
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	629a      	str	r2, [r3, #40]	@ 0x28
 800a486:	e024      	b.n	800a4d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a496:	d007      	beq.n	800a4a8 <UART_Receive_IT+0x74>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <UART_Receive_IT+0x82>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d106      	bne.n	800a4b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b2:	701a      	strb	r2, [r3, #0]
 800a4b4:	e008      	b.n	800a4c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4c2:	b2da      	uxtb	r2, r3
 800a4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d15d      	bne.n	800a5a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 0220 	bic.w	r2, r2, #32
 800a4f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68da      	ldr	r2, [r3, #12]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a504:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	695a      	ldr	r2, [r3, #20]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0201 	bic.w	r2, r2, #1
 800a514:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2220      	movs	r2, #32
 800a51a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d135      	bne.n	800a598 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	330c      	adds	r3, #12
 800a538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	e853 3f00 	ldrex	r3, [r3]
 800a540:	613b      	str	r3, [r7, #16]
   return(result);
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f023 0310 	bic.w	r3, r3, #16
 800a548:	627b      	str	r3, [r7, #36]	@ 0x24
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	330c      	adds	r3, #12
 800a550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a552:	623a      	str	r2, [r7, #32]
 800a554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a556:	69f9      	ldr	r1, [r7, #28]
 800a558:	6a3a      	ldr	r2, [r7, #32]
 800a55a:	e841 2300 	strex	r3, r2, [r1]
 800a55e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1e5      	bne.n	800a532 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 0310 	and.w	r3, r3, #16
 800a570:	2b10      	cmp	r3, #16
 800a572:	d10a      	bne.n	800a58a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a574:	2300      	movs	r3, #0
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7f8 fd46 	bl	8003022 <HAL_UARTEx_RxEventCallback>
 800a596:	e002      	b.n	800a59e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7ff fc2b 	bl	8009df4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e002      	b.n	800a5a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e000      	b.n	800a5a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a5a6:	2302      	movs	r3, #2
  }
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3730      	adds	r7, #48	@ 0x30
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5b4:	b0c0      	sub	sp, #256	@ 0x100
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a5c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5cc:	68d9      	ldr	r1, [r3, #12]
 800a5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	ea40 0301 	orr.w	r3, r0, r1
 800a5d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a608:	f021 010c 	bic.w	r1, r1, #12
 800a60c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a616:	430b      	orrs	r3, r1
 800a618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	695b      	ldr	r3, [r3, #20]
 800a622:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a62a:	6999      	ldr	r1, [r3, #24]
 800a62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	ea40 0301 	orr.w	r3, r0, r1
 800a636:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b8f      	ldr	r3, [pc, #572]	@ (800a87c <UART_SetConfig+0x2cc>)
 800a640:	429a      	cmp	r2, r3
 800a642:	d005      	beq.n	800a650 <UART_SetConfig+0xa0>
 800a644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	4b8d      	ldr	r3, [pc, #564]	@ (800a880 <UART_SetConfig+0x2d0>)
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d104      	bne.n	800a65a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a650:	f7fd ff72 	bl	8008538 <HAL_RCC_GetPCLK2Freq>
 800a654:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a658:	e003      	b.n	800a662 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a65a:	f7fd ff59 	bl	8008510 <HAL_RCC_GetPCLK1Freq>
 800a65e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a666:	69db      	ldr	r3, [r3, #28]
 800a668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a66c:	f040 810c 	bne.w	800a888 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a674:	2200      	movs	r2, #0
 800a676:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a67a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a67e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a682:	4622      	mov	r2, r4
 800a684:	462b      	mov	r3, r5
 800a686:	1891      	adds	r1, r2, r2
 800a688:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a68a:	415b      	adcs	r3, r3
 800a68c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a68e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a692:	4621      	mov	r1, r4
 800a694:	eb12 0801 	adds.w	r8, r2, r1
 800a698:	4629      	mov	r1, r5
 800a69a:	eb43 0901 	adc.w	r9, r3, r1
 800a69e:	f04f 0200 	mov.w	r2, #0
 800a6a2:	f04f 0300 	mov.w	r3, #0
 800a6a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a6aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a6ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6b2:	4690      	mov	r8, r2
 800a6b4:	4699      	mov	r9, r3
 800a6b6:	4623      	mov	r3, r4
 800a6b8:	eb18 0303 	adds.w	r3, r8, r3
 800a6bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6c0:	462b      	mov	r3, r5
 800a6c2:	eb49 0303 	adc.w	r3, r9, r3
 800a6c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a6d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a6da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a6de:	460b      	mov	r3, r1
 800a6e0:	18db      	adds	r3, r3, r3
 800a6e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	eb42 0303 	adc.w	r3, r2, r3
 800a6ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a6f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a6f4:	f7f6 fb20 	bl	8000d38 <__aeabi_uldivmod>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4b61      	ldr	r3, [pc, #388]	@ (800a884 <UART_SetConfig+0x2d4>)
 800a6fe:	fba3 2302 	umull	r2, r3, r3, r2
 800a702:	095b      	lsrs	r3, r3, #5
 800a704:	011c      	lsls	r4, r3, #4
 800a706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a710:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a714:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a718:	4642      	mov	r2, r8
 800a71a:	464b      	mov	r3, r9
 800a71c:	1891      	adds	r1, r2, r2
 800a71e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a720:	415b      	adcs	r3, r3
 800a722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a728:	4641      	mov	r1, r8
 800a72a:	eb12 0a01 	adds.w	sl, r2, r1
 800a72e:	4649      	mov	r1, r9
 800a730:	eb43 0b01 	adc.w	fp, r3, r1
 800a734:	f04f 0200 	mov.w	r2, #0
 800a738:	f04f 0300 	mov.w	r3, #0
 800a73c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a740:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a748:	4692      	mov	sl, r2
 800a74a:	469b      	mov	fp, r3
 800a74c:	4643      	mov	r3, r8
 800a74e:	eb1a 0303 	adds.w	r3, sl, r3
 800a752:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a756:	464b      	mov	r3, r9
 800a758:	eb4b 0303 	adc.w	r3, fp, r3
 800a75c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a76c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a770:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a774:	460b      	mov	r3, r1
 800a776:	18db      	adds	r3, r3, r3
 800a778:	643b      	str	r3, [r7, #64]	@ 0x40
 800a77a:	4613      	mov	r3, r2
 800a77c:	eb42 0303 	adc.w	r3, r2, r3
 800a780:	647b      	str	r3, [r7, #68]	@ 0x44
 800a782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a78a:	f7f6 fad5 	bl	8000d38 <__aeabi_uldivmod>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4611      	mov	r1, r2
 800a794:	4b3b      	ldr	r3, [pc, #236]	@ (800a884 <UART_SetConfig+0x2d4>)
 800a796:	fba3 2301 	umull	r2, r3, r3, r1
 800a79a:	095b      	lsrs	r3, r3, #5
 800a79c:	2264      	movs	r2, #100	@ 0x64
 800a79e:	fb02 f303 	mul.w	r3, r2, r3
 800a7a2:	1acb      	subs	r3, r1, r3
 800a7a4:	00db      	lsls	r3, r3, #3
 800a7a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a7aa:	4b36      	ldr	r3, [pc, #216]	@ (800a884 <UART_SetConfig+0x2d4>)
 800a7ac:	fba3 2302 	umull	r2, r3, r3, r2
 800a7b0:	095b      	lsrs	r3, r3, #5
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a7b8:	441c      	add	r4, r3
 800a7ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a7c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a7cc:	4642      	mov	r2, r8
 800a7ce:	464b      	mov	r3, r9
 800a7d0:	1891      	adds	r1, r2, r2
 800a7d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a7d4:	415b      	adcs	r3, r3
 800a7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a7dc:	4641      	mov	r1, r8
 800a7de:	1851      	adds	r1, r2, r1
 800a7e0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	414b      	adcs	r3, r1
 800a7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e8:	f04f 0200 	mov.w	r2, #0
 800a7ec:	f04f 0300 	mov.w	r3, #0
 800a7f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a7f4:	4659      	mov	r1, fp
 800a7f6:	00cb      	lsls	r3, r1, #3
 800a7f8:	4651      	mov	r1, sl
 800a7fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7fe:	4651      	mov	r1, sl
 800a800:	00ca      	lsls	r2, r1, #3
 800a802:	4610      	mov	r0, r2
 800a804:	4619      	mov	r1, r3
 800a806:	4603      	mov	r3, r0
 800a808:	4642      	mov	r2, r8
 800a80a:	189b      	adds	r3, r3, r2
 800a80c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a810:	464b      	mov	r3, r9
 800a812:	460a      	mov	r2, r1
 800a814:	eb42 0303 	adc.w	r3, r2, r3
 800a818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a828:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a82c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a830:	460b      	mov	r3, r1
 800a832:	18db      	adds	r3, r3, r3
 800a834:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a836:	4613      	mov	r3, r2
 800a838:	eb42 0303 	adc.w	r3, r2, r3
 800a83c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a83e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a842:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a846:	f7f6 fa77 	bl	8000d38 <__aeabi_uldivmod>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	4b0d      	ldr	r3, [pc, #52]	@ (800a884 <UART_SetConfig+0x2d4>)
 800a850:	fba3 1302 	umull	r1, r3, r3, r2
 800a854:	095b      	lsrs	r3, r3, #5
 800a856:	2164      	movs	r1, #100	@ 0x64
 800a858:	fb01 f303 	mul.w	r3, r1, r3
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	3332      	adds	r3, #50	@ 0x32
 800a862:	4a08      	ldr	r2, [pc, #32]	@ (800a884 <UART_SetConfig+0x2d4>)
 800a864:	fba2 2303 	umull	r2, r3, r2, r3
 800a868:	095b      	lsrs	r3, r3, #5
 800a86a:	f003 0207 	and.w	r2, r3, #7
 800a86e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4422      	add	r2, r4
 800a876:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a878:	e106      	b.n	800aa88 <UART_SetConfig+0x4d8>
 800a87a:	bf00      	nop
 800a87c:	40011000 	.word	0x40011000
 800a880:	40011400 	.word	0x40011400
 800a884:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a88c:	2200      	movs	r2, #0
 800a88e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a892:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a896:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a89a:	4642      	mov	r2, r8
 800a89c:	464b      	mov	r3, r9
 800a89e:	1891      	adds	r1, r2, r2
 800a8a0:	6239      	str	r1, [r7, #32]
 800a8a2:	415b      	adcs	r3, r3
 800a8a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8aa:	4641      	mov	r1, r8
 800a8ac:	1854      	adds	r4, r2, r1
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	eb43 0501 	adc.w	r5, r3, r1
 800a8b4:	f04f 0200 	mov.w	r2, #0
 800a8b8:	f04f 0300 	mov.w	r3, #0
 800a8bc:	00eb      	lsls	r3, r5, #3
 800a8be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8c2:	00e2      	lsls	r2, r4, #3
 800a8c4:	4614      	mov	r4, r2
 800a8c6:	461d      	mov	r5, r3
 800a8c8:	4643      	mov	r3, r8
 800a8ca:	18e3      	adds	r3, r4, r3
 800a8cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	eb45 0303 	adc.w	r3, r5, r3
 800a8d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a8ea:	f04f 0200 	mov.w	r2, #0
 800a8ee:	f04f 0300 	mov.w	r3, #0
 800a8f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	008b      	lsls	r3, r1, #2
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a900:	4621      	mov	r1, r4
 800a902:	008a      	lsls	r2, r1, #2
 800a904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a908:	f7f6 fa16 	bl	8000d38 <__aeabi_uldivmod>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	4b60      	ldr	r3, [pc, #384]	@ (800aa94 <UART_SetConfig+0x4e4>)
 800a912:	fba3 2302 	umull	r2, r3, r3, r2
 800a916:	095b      	lsrs	r3, r3, #5
 800a918:	011c      	lsls	r4, r3, #4
 800a91a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a91e:	2200      	movs	r2, #0
 800a920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a924:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a928:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a92c:	4642      	mov	r2, r8
 800a92e:	464b      	mov	r3, r9
 800a930:	1891      	adds	r1, r2, r2
 800a932:	61b9      	str	r1, [r7, #24]
 800a934:	415b      	adcs	r3, r3
 800a936:	61fb      	str	r3, [r7, #28]
 800a938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a93c:	4641      	mov	r1, r8
 800a93e:	1851      	adds	r1, r2, r1
 800a940:	6139      	str	r1, [r7, #16]
 800a942:	4649      	mov	r1, r9
 800a944:	414b      	adcs	r3, r1
 800a946:	617b      	str	r3, [r7, #20]
 800a948:	f04f 0200 	mov.w	r2, #0
 800a94c:	f04f 0300 	mov.w	r3, #0
 800a950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a954:	4659      	mov	r1, fp
 800a956:	00cb      	lsls	r3, r1, #3
 800a958:	4651      	mov	r1, sl
 800a95a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a95e:	4651      	mov	r1, sl
 800a960:	00ca      	lsls	r2, r1, #3
 800a962:	4610      	mov	r0, r2
 800a964:	4619      	mov	r1, r3
 800a966:	4603      	mov	r3, r0
 800a968:	4642      	mov	r2, r8
 800a96a:	189b      	adds	r3, r3, r2
 800a96c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a970:	464b      	mov	r3, r9
 800a972:	460a      	mov	r2, r1
 800a974:	eb42 0303 	adc.w	r3, r2, r3
 800a978:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a986:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a988:	f04f 0200 	mov.w	r2, #0
 800a98c:	f04f 0300 	mov.w	r3, #0
 800a990:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a994:	4649      	mov	r1, r9
 800a996:	008b      	lsls	r3, r1, #2
 800a998:	4641      	mov	r1, r8
 800a99a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a99e:	4641      	mov	r1, r8
 800a9a0:	008a      	lsls	r2, r1, #2
 800a9a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a9a6:	f7f6 f9c7 	bl	8000d38 <__aeabi_uldivmod>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	4b38      	ldr	r3, [pc, #224]	@ (800aa94 <UART_SetConfig+0x4e4>)
 800a9b2:	fba3 2301 	umull	r2, r3, r3, r1
 800a9b6:	095b      	lsrs	r3, r3, #5
 800a9b8:	2264      	movs	r2, #100	@ 0x64
 800a9ba:	fb02 f303 	mul.w	r3, r2, r3
 800a9be:	1acb      	subs	r3, r1, r3
 800a9c0:	011b      	lsls	r3, r3, #4
 800a9c2:	3332      	adds	r3, #50	@ 0x32
 800a9c4:	4a33      	ldr	r2, [pc, #204]	@ (800aa94 <UART_SetConfig+0x4e4>)
 800a9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ca:	095b      	lsrs	r3, r3, #5
 800a9cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9d0:	441c      	add	r4, r3
 800a9d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a9da:	677a      	str	r2, [r7, #116]	@ 0x74
 800a9dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a9e0:	4642      	mov	r2, r8
 800a9e2:	464b      	mov	r3, r9
 800a9e4:	1891      	adds	r1, r2, r2
 800a9e6:	60b9      	str	r1, [r7, #8]
 800a9e8:	415b      	adcs	r3, r3
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9f0:	4641      	mov	r1, r8
 800a9f2:	1851      	adds	r1, r2, r1
 800a9f4:	6039      	str	r1, [r7, #0]
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	414b      	adcs	r3, r1
 800a9fa:	607b      	str	r3, [r7, #4]
 800a9fc:	f04f 0200 	mov.w	r2, #0
 800aa00:	f04f 0300 	mov.w	r3, #0
 800aa04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa08:	4659      	mov	r1, fp
 800aa0a:	00cb      	lsls	r3, r1, #3
 800aa0c:	4651      	mov	r1, sl
 800aa0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa12:	4651      	mov	r1, sl
 800aa14:	00ca      	lsls	r2, r1, #3
 800aa16:	4610      	mov	r0, r2
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	4642      	mov	r2, r8
 800aa1e:	189b      	adds	r3, r3, r2
 800aa20:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa22:	464b      	mov	r3, r9
 800aa24:	460a      	mov	r2, r1
 800aa26:	eb42 0303 	adc.w	r3, r2, r3
 800aa2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aa2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa36:	667a      	str	r2, [r7, #100]	@ 0x64
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aa44:	4649      	mov	r1, r9
 800aa46:	008b      	lsls	r3, r1, #2
 800aa48:	4641      	mov	r1, r8
 800aa4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa4e:	4641      	mov	r1, r8
 800aa50:	008a      	lsls	r2, r1, #2
 800aa52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aa56:	f7f6 f96f 	bl	8000d38 <__aeabi_uldivmod>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa94 <UART_SetConfig+0x4e4>)
 800aa60:	fba3 1302 	umull	r1, r3, r3, r2
 800aa64:	095b      	lsrs	r3, r3, #5
 800aa66:	2164      	movs	r1, #100	@ 0x64
 800aa68:	fb01 f303 	mul.w	r3, r1, r3
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	3332      	adds	r3, #50	@ 0x32
 800aa72:	4a08      	ldr	r2, [pc, #32]	@ (800aa94 <UART_SetConfig+0x4e4>)
 800aa74:	fba2 2303 	umull	r2, r3, r2, r3
 800aa78:	095b      	lsrs	r3, r3, #5
 800aa7a:	f003 020f 	and.w	r2, r3, #15
 800aa7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4422      	add	r2, r4
 800aa86:	609a      	str	r2, [r3, #8]
}
 800aa88:	bf00      	nop
 800aa8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa94:	51eb851f 	.word	0x51eb851f

0800aa98 <atof>:
 800aa98:	2100      	movs	r1, #0
 800aa9a:	f001 b859 	b.w	800bb50 <strtod>

0800aa9e <atoff>:
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	f001 b862 	b.w	800bb68 <strtof>

0800aaa4 <atoi>:
 800aaa4:	220a      	movs	r2, #10
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	f001 b93c 	b.w	800bd24 <strtol>

0800aaac <malloc>:
 800aaac:	4b02      	ldr	r3, [pc, #8]	@ (800aab8 <malloc+0xc>)
 800aaae:	4601      	mov	r1, r0
 800aab0:	6818      	ldr	r0, [r3, #0]
 800aab2:	f000 b803 	b.w	800aabc <_malloc_r>
 800aab6:	bf00      	nop
 800aab8:	200005bc 	.word	0x200005bc

0800aabc <_malloc_r>:
 800aabc:	f101 030b 	add.w	r3, r1, #11
 800aac0:	2b16      	cmp	r3, #22
 800aac2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac6:	4605      	mov	r5, r0
 800aac8:	d906      	bls.n	800aad8 <_malloc_r+0x1c>
 800aaca:	f033 0707 	bics.w	r7, r3, #7
 800aace:	d504      	bpl.n	800aada <_malloc_r+0x1e>
 800aad0:	230c      	movs	r3, #12
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	2400      	movs	r4, #0
 800aad6:	e1a3      	b.n	800ae20 <_malloc_r+0x364>
 800aad8:	2710      	movs	r7, #16
 800aada:	42b9      	cmp	r1, r7
 800aadc:	d8f8      	bhi.n	800aad0 <_malloc_r+0x14>
 800aade:	4628      	mov	r0, r5
 800aae0:	f000 fa26 	bl	800af30 <__malloc_lock>
 800aae4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800aae8:	4eaf      	ldr	r6, [pc, #700]	@ (800ada8 <_malloc_r+0x2ec>)
 800aaea:	d237      	bcs.n	800ab5c <_malloc_r+0xa0>
 800aaec:	f107 0208 	add.w	r2, r7, #8
 800aaf0:	4432      	add	r2, r6
 800aaf2:	f1a2 0108 	sub.w	r1, r2, #8
 800aaf6:	6854      	ldr	r4, [r2, #4]
 800aaf8:	428c      	cmp	r4, r1
 800aafa:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800aafe:	d102      	bne.n	800ab06 <_malloc_r+0x4a>
 800ab00:	68d4      	ldr	r4, [r2, #12]
 800ab02:	42a2      	cmp	r2, r4
 800ab04:	d010      	beq.n	800ab28 <_malloc_r+0x6c>
 800ab06:	6863      	ldr	r3, [r4, #4]
 800ab08:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800ab0c:	f023 0303 	bic.w	r3, r3, #3
 800ab10:	60ca      	str	r2, [r1, #12]
 800ab12:	4423      	add	r3, r4
 800ab14:	6091      	str	r1, [r2, #8]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	f042 0201 	orr.w	r2, r2, #1
 800ab1c:	605a      	str	r2, [r3, #4]
 800ab1e:	4628      	mov	r0, r5
 800ab20:	f000 fa0c 	bl	800af3c <__malloc_unlock>
 800ab24:	3408      	adds	r4, #8
 800ab26:	e17b      	b.n	800ae20 <_malloc_r+0x364>
 800ab28:	3302      	adds	r3, #2
 800ab2a:	6934      	ldr	r4, [r6, #16]
 800ab2c:	499f      	ldr	r1, [pc, #636]	@ (800adac <_malloc_r+0x2f0>)
 800ab2e:	428c      	cmp	r4, r1
 800ab30:	d077      	beq.n	800ac22 <_malloc_r+0x166>
 800ab32:	6862      	ldr	r2, [r4, #4]
 800ab34:	f022 0c03 	bic.w	ip, r2, #3
 800ab38:	ebac 0007 	sub.w	r0, ip, r7
 800ab3c:	280f      	cmp	r0, #15
 800ab3e:	dd48      	ble.n	800abd2 <_malloc_r+0x116>
 800ab40:	19e2      	adds	r2, r4, r7
 800ab42:	f040 0301 	orr.w	r3, r0, #1
 800ab46:	f047 0701 	orr.w	r7, r7, #1
 800ab4a:	6067      	str	r7, [r4, #4]
 800ab4c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800ab50:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800ab54:	6053      	str	r3, [r2, #4]
 800ab56:	f844 000c 	str.w	r0, [r4, ip]
 800ab5a:	e7e0      	b.n	800ab1e <_malloc_r+0x62>
 800ab5c:	0a7b      	lsrs	r3, r7, #9
 800ab5e:	d02a      	beq.n	800abb6 <_malloc_r+0xfa>
 800ab60:	2b04      	cmp	r3, #4
 800ab62:	d812      	bhi.n	800ab8a <_malloc_r+0xce>
 800ab64:	09bb      	lsrs	r3, r7, #6
 800ab66:	3338      	adds	r3, #56	@ 0x38
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800ab6e:	f1a2 0c08 	sub.w	ip, r2, #8
 800ab72:	6854      	ldr	r4, [r2, #4]
 800ab74:	4564      	cmp	r4, ip
 800ab76:	d006      	beq.n	800ab86 <_malloc_r+0xca>
 800ab78:	6862      	ldr	r2, [r4, #4]
 800ab7a:	f022 0203 	bic.w	r2, r2, #3
 800ab7e:	1bd0      	subs	r0, r2, r7
 800ab80:	280f      	cmp	r0, #15
 800ab82:	dd1c      	ble.n	800abbe <_malloc_r+0x102>
 800ab84:	3b01      	subs	r3, #1
 800ab86:	3301      	adds	r3, #1
 800ab88:	e7cf      	b.n	800ab2a <_malloc_r+0x6e>
 800ab8a:	2b14      	cmp	r3, #20
 800ab8c:	d801      	bhi.n	800ab92 <_malloc_r+0xd6>
 800ab8e:	335b      	adds	r3, #91	@ 0x5b
 800ab90:	e7ea      	b.n	800ab68 <_malloc_r+0xac>
 800ab92:	2b54      	cmp	r3, #84	@ 0x54
 800ab94:	d802      	bhi.n	800ab9c <_malloc_r+0xe0>
 800ab96:	0b3b      	lsrs	r3, r7, #12
 800ab98:	336e      	adds	r3, #110	@ 0x6e
 800ab9a:	e7e5      	b.n	800ab68 <_malloc_r+0xac>
 800ab9c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800aba0:	d802      	bhi.n	800aba8 <_malloc_r+0xec>
 800aba2:	0bfb      	lsrs	r3, r7, #15
 800aba4:	3377      	adds	r3, #119	@ 0x77
 800aba6:	e7df      	b.n	800ab68 <_malloc_r+0xac>
 800aba8:	f240 5254 	movw	r2, #1364	@ 0x554
 800abac:	4293      	cmp	r3, r2
 800abae:	d804      	bhi.n	800abba <_malloc_r+0xfe>
 800abb0:	0cbb      	lsrs	r3, r7, #18
 800abb2:	337c      	adds	r3, #124	@ 0x7c
 800abb4:	e7d8      	b.n	800ab68 <_malloc_r+0xac>
 800abb6:	233f      	movs	r3, #63	@ 0x3f
 800abb8:	e7d6      	b.n	800ab68 <_malloc_r+0xac>
 800abba:	237e      	movs	r3, #126	@ 0x7e
 800abbc:	e7d4      	b.n	800ab68 <_malloc_r+0xac>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	68e1      	ldr	r1, [r4, #12]
 800abc2:	db04      	blt.n	800abce <_malloc_r+0x112>
 800abc4:	68a3      	ldr	r3, [r4, #8]
 800abc6:	60d9      	str	r1, [r3, #12]
 800abc8:	608b      	str	r3, [r1, #8]
 800abca:	18a3      	adds	r3, r4, r2
 800abcc:	e7a3      	b.n	800ab16 <_malloc_r+0x5a>
 800abce:	460c      	mov	r4, r1
 800abd0:	e7d0      	b.n	800ab74 <_malloc_r+0xb8>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800abd8:	db07      	blt.n	800abea <_malloc_r+0x12e>
 800abda:	44a4      	add	ip, r4
 800abdc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800abe0:	f043 0301 	orr.w	r3, r3, #1
 800abe4:	f8cc 3004 	str.w	r3, [ip, #4]
 800abe8:	e799      	b.n	800ab1e <_malloc_r+0x62>
 800abea:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800abee:	6870      	ldr	r0, [r6, #4]
 800abf0:	f080 8095 	bcs.w	800ad1e <_malloc_r+0x262>
 800abf4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800abf8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800abfc:	f04f 0c01 	mov.w	ip, #1
 800ac00:	3201      	adds	r2, #1
 800ac02:	fa0c fc0e 	lsl.w	ip, ip, lr
 800ac06:	ea4c 0000 	orr.w	r0, ip, r0
 800ac0a:	6070      	str	r0, [r6, #4]
 800ac0c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800ac10:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800ac14:	3808      	subs	r0, #8
 800ac16:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800ac1a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800ac1e:	f8cc 400c 	str.w	r4, [ip, #12]
 800ac22:	1098      	asrs	r0, r3, #2
 800ac24:	2201      	movs	r2, #1
 800ac26:	4082      	lsls	r2, r0
 800ac28:	6870      	ldr	r0, [r6, #4]
 800ac2a:	4290      	cmp	r0, r2
 800ac2c:	d326      	bcc.n	800ac7c <_malloc_r+0x1c0>
 800ac2e:	4210      	tst	r0, r2
 800ac30:	d106      	bne.n	800ac40 <_malloc_r+0x184>
 800ac32:	f023 0303 	bic.w	r3, r3, #3
 800ac36:	0052      	lsls	r2, r2, #1
 800ac38:	4210      	tst	r0, r2
 800ac3a:	f103 0304 	add.w	r3, r3, #4
 800ac3e:	d0fa      	beq.n	800ac36 <_malloc_r+0x17a>
 800ac40:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800ac44:	46c1      	mov	r9, r8
 800ac46:	469e      	mov	lr, r3
 800ac48:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800ac4c:	454c      	cmp	r4, r9
 800ac4e:	f040 80b9 	bne.w	800adc4 <_malloc_r+0x308>
 800ac52:	f10e 0e01 	add.w	lr, lr, #1
 800ac56:	f01e 0f03 	tst.w	lr, #3
 800ac5a:	f109 0908 	add.w	r9, r9, #8
 800ac5e:	d1f3      	bne.n	800ac48 <_malloc_r+0x18c>
 800ac60:	0798      	lsls	r0, r3, #30
 800ac62:	f040 80e3 	bne.w	800ae2c <_malloc_r+0x370>
 800ac66:	6873      	ldr	r3, [r6, #4]
 800ac68:	ea23 0302 	bic.w	r3, r3, r2
 800ac6c:	6073      	str	r3, [r6, #4]
 800ac6e:	6870      	ldr	r0, [r6, #4]
 800ac70:	0052      	lsls	r2, r2, #1
 800ac72:	4290      	cmp	r0, r2
 800ac74:	d302      	bcc.n	800ac7c <_malloc_r+0x1c0>
 800ac76:	2a00      	cmp	r2, #0
 800ac78:	f040 80e5 	bne.w	800ae46 <_malloc_r+0x38a>
 800ac7c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800ac80:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ac84:	f023 0903 	bic.w	r9, r3, #3
 800ac88:	45b9      	cmp	r9, r7
 800ac8a:	d304      	bcc.n	800ac96 <_malloc_r+0x1da>
 800ac8c:	eba9 0207 	sub.w	r2, r9, r7
 800ac90:	2a0f      	cmp	r2, #15
 800ac92:	f300 8141 	bgt.w	800af18 <_malloc_r+0x45c>
 800ac96:	4b46      	ldr	r3, [pc, #280]	@ (800adb0 <_malloc_r+0x2f4>)
 800ac98:	6819      	ldr	r1, [r3, #0]
 800ac9a:	3110      	adds	r1, #16
 800ac9c:	4439      	add	r1, r7
 800ac9e:	2008      	movs	r0, #8
 800aca0:	9101      	str	r1, [sp, #4]
 800aca2:	f001 fa75 	bl	800c190 <sysconf>
 800aca6:	4a43      	ldr	r2, [pc, #268]	@ (800adb4 <_malloc_r+0x2f8>)
 800aca8:	9901      	ldr	r1, [sp, #4]
 800acaa:	6813      	ldr	r3, [r2, #0]
 800acac:	3301      	adds	r3, #1
 800acae:	bf1f      	itttt	ne
 800acb0:	f101 31ff 	addne.w	r1, r1, #4294967295
 800acb4:	1809      	addne	r1, r1, r0
 800acb6:	4243      	negne	r3, r0
 800acb8:	4019      	andne	r1, r3
 800acba:	4680      	mov	r8, r0
 800acbc:	4628      	mov	r0, r5
 800acbe:	9101      	str	r1, [sp, #4]
 800acc0:	f001 fa16 	bl	800c0f0 <_sbrk_r>
 800acc4:	1c42      	adds	r2, r0, #1
 800acc6:	eb0a 0b09 	add.w	fp, sl, r9
 800acca:	4604      	mov	r4, r0
 800accc:	f000 80f7 	beq.w	800aebe <_malloc_r+0x402>
 800acd0:	4583      	cmp	fp, r0
 800acd2:	9901      	ldr	r1, [sp, #4]
 800acd4:	4a37      	ldr	r2, [pc, #220]	@ (800adb4 <_malloc_r+0x2f8>)
 800acd6:	d902      	bls.n	800acde <_malloc_r+0x222>
 800acd8:	45b2      	cmp	sl, r6
 800acda:	f040 80f0 	bne.w	800aebe <_malloc_r+0x402>
 800acde:	4b36      	ldr	r3, [pc, #216]	@ (800adb8 <_malloc_r+0x2fc>)
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	45a3      	cmp	fp, r4
 800ace4:	eb00 0e01 	add.w	lr, r0, r1
 800ace8:	f8c3 e000 	str.w	lr, [r3]
 800acec:	f108 3cff 	add.w	ip, r8, #4294967295
 800acf0:	f040 80ab 	bne.w	800ae4a <_malloc_r+0x38e>
 800acf4:	ea1b 0f0c 	tst.w	fp, ip
 800acf8:	f040 80a7 	bne.w	800ae4a <_malloc_r+0x38e>
 800acfc:	68b2      	ldr	r2, [r6, #8]
 800acfe:	4449      	add	r1, r9
 800ad00:	f041 0101 	orr.w	r1, r1, #1
 800ad04:	6051      	str	r1, [r2, #4]
 800ad06:	4a2d      	ldr	r2, [pc, #180]	@ (800adbc <_malloc_r+0x300>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	6811      	ldr	r1, [r2, #0]
 800ad0c:	428b      	cmp	r3, r1
 800ad0e:	bf88      	it	hi
 800ad10:	6013      	strhi	r3, [r2, #0]
 800ad12:	4a2b      	ldr	r2, [pc, #172]	@ (800adc0 <_malloc_r+0x304>)
 800ad14:	6811      	ldr	r1, [r2, #0]
 800ad16:	428b      	cmp	r3, r1
 800ad18:	bf88      	it	hi
 800ad1a:	6013      	strhi	r3, [r2, #0]
 800ad1c:	e0cf      	b.n	800aebe <_malloc_r+0x402>
 800ad1e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800ad22:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800ad26:	d218      	bcs.n	800ad5a <_malloc_r+0x29e>
 800ad28:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800ad2c:	3238      	adds	r2, #56	@ 0x38
 800ad2e:	f102 0e01 	add.w	lr, r2, #1
 800ad32:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800ad36:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800ad3a:	45f0      	cmp	r8, lr
 800ad3c:	d12b      	bne.n	800ad96 <_malloc_r+0x2da>
 800ad3e:	1092      	asrs	r2, r2, #2
 800ad40:	f04f 0c01 	mov.w	ip, #1
 800ad44:	fa0c f202 	lsl.w	r2, ip, r2
 800ad48:	4302      	orrs	r2, r0
 800ad4a:	6072      	str	r2, [r6, #4]
 800ad4c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800ad50:	f8c8 4008 	str.w	r4, [r8, #8]
 800ad54:	f8ce 400c 	str.w	r4, [lr, #12]
 800ad58:	e763      	b.n	800ac22 <_malloc_r+0x166>
 800ad5a:	2a14      	cmp	r2, #20
 800ad5c:	d801      	bhi.n	800ad62 <_malloc_r+0x2a6>
 800ad5e:	325b      	adds	r2, #91	@ 0x5b
 800ad60:	e7e5      	b.n	800ad2e <_malloc_r+0x272>
 800ad62:	2a54      	cmp	r2, #84	@ 0x54
 800ad64:	d803      	bhi.n	800ad6e <_malloc_r+0x2b2>
 800ad66:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800ad6a:	326e      	adds	r2, #110	@ 0x6e
 800ad6c:	e7df      	b.n	800ad2e <_malloc_r+0x272>
 800ad6e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800ad72:	d803      	bhi.n	800ad7c <_malloc_r+0x2c0>
 800ad74:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800ad78:	3277      	adds	r2, #119	@ 0x77
 800ad7a:	e7d8      	b.n	800ad2e <_malloc_r+0x272>
 800ad7c:	f240 5e54 	movw	lr, #1364	@ 0x554
 800ad80:	4572      	cmp	r2, lr
 800ad82:	bf9a      	itte	ls
 800ad84:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800ad88:	327c      	addls	r2, #124	@ 0x7c
 800ad8a:	227e      	movhi	r2, #126	@ 0x7e
 800ad8c:	e7cf      	b.n	800ad2e <_malloc_r+0x272>
 800ad8e:	f8de e008 	ldr.w	lr, [lr, #8]
 800ad92:	45f0      	cmp	r8, lr
 800ad94:	d005      	beq.n	800ada2 <_malloc_r+0x2e6>
 800ad96:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ad9a:	f022 0203 	bic.w	r2, r2, #3
 800ad9e:	4562      	cmp	r2, ip
 800ada0:	d8f5      	bhi.n	800ad8e <_malloc_r+0x2d2>
 800ada2:	f8de 800c 	ldr.w	r8, [lr, #12]
 800ada6:	e7d1      	b.n	800ad4c <_malloc_r+0x290>
 800ada8:	2000003c 	.word	0x2000003c
 800adac:	20000044 	.word	0x20000044
 800adb0:	20000fc0 	.word	0x20000fc0
 800adb4:	20000034 	.word	0x20000034
 800adb8:	20000f90 	.word	0x20000f90
 800adbc:	20000fbc 	.word	0x20000fbc
 800adc0:	20000fb8 	.word	0x20000fb8
 800adc4:	6860      	ldr	r0, [r4, #4]
 800adc6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800adca:	f020 0003 	bic.w	r0, r0, #3
 800adce:	eba0 0a07 	sub.w	sl, r0, r7
 800add2:	f1ba 0f0f 	cmp.w	sl, #15
 800add6:	dd12      	ble.n	800adfe <_malloc_r+0x342>
 800add8:	68a3      	ldr	r3, [r4, #8]
 800adda:	19e2      	adds	r2, r4, r7
 800addc:	f047 0701 	orr.w	r7, r7, #1
 800ade0:	6067      	str	r7, [r4, #4]
 800ade2:	f8c3 c00c 	str.w	ip, [r3, #12]
 800ade6:	f8cc 3008 	str.w	r3, [ip, #8]
 800adea:	f04a 0301 	orr.w	r3, sl, #1
 800adee:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800adf2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800adf6:	6053      	str	r3, [r2, #4]
 800adf8:	f844 a000 	str.w	sl, [r4, r0]
 800adfc:	e68f      	b.n	800ab1e <_malloc_r+0x62>
 800adfe:	f1ba 0f00 	cmp.w	sl, #0
 800ae02:	db11      	blt.n	800ae28 <_malloc_r+0x36c>
 800ae04:	4420      	add	r0, r4
 800ae06:	6843      	ldr	r3, [r0, #4]
 800ae08:	f043 0301 	orr.w	r3, r3, #1
 800ae0c:	6043      	str	r3, [r0, #4]
 800ae0e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800ae12:	4628      	mov	r0, r5
 800ae14:	f8c3 c00c 	str.w	ip, [r3, #12]
 800ae18:	f8cc 3008 	str.w	r3, [ip, #8]
 800ae1c:	f000 f88e 	bl	800af3c <__malloc_unlock>
 800ae20:	4620      	mov	r0, r4
 800ae22:	b003      	add	sp, #12
 800ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae28:	4664      	mov	r4, ip
 800ae2a:	e70f      	b.n	800ac4c <_malloc_r+0x190>
 800ae2c:	f858 0908 	ldr.w	r0, [r8], #-8
 800ae30:	4540      	cmp	r0, r8
 800ae32:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae36:	f43f af13 	beq.w	800ac60 <_malloc_r+0x1a4>
 800ae3a:	e718      	b.n	800ac6e <_malloc_r+0x1b2>
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	0052      	lsls	r2, r2, #1
 800ae40:	4210      	tst	r0, r2
 800ae42:	d0fb      	beq.n	800ae3c <_malloc_r+0x380>
 800ae44:	e6fc      	b.n	800ac40 <_malloc_r+0x184>
 800ae46:	4673      	mov	r3, lr
 800ae48:	e7fa      	b.n	800ae40 <_malloc_r+0x384>
 800ae4a:	6810      	ldr	r0, [r2, #0]
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	bf1b      	ittet	ne
 800ae50:	eba4 0b0b 	subne.w	fp, r4, fp
 800ae54:	eb0b 020e 	addne.w	r2, fp, lr
 800ae58:	6014      	streq	r4, [r2, #0]
 800ae5a:	601a      	strne	r2, [r3, #0]
 800ae5c:	f014 0b07 	ands.w	fp, r4, #7
 800ae60:	bf1a      	itte	ne
 800ae62:	f1cb 0008 	rsbne	r0, fp, #8
 800ae66:	1824      	addne	r4, r4, r0
 800ae68:	4658      	moveq	r0, fp
 800ae6a:	1862      	adds	r2, r4, r1
 800ae6c:	ea02 010c 	and.w	r1, r2, ip
 800ae70:	4480      	add	r8, r0
 800ae72:	eba8 0801 	sub.w	r8, r8, r1
 800ae76:	ea08 080c 	and.w	r8, r8, ip
 800ae7a:	4641      	mov	r1, r8
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	9201      	str	r2, [sp, #4]
 800ae80:	f001 f936 	bl	800c0f0 <_sbrk_r>
 800ae84:	1c43      	adds	r3, r0, #1
 800ae86:	9a01      	ldr	r2, [sp, #4]
 800ae88:	4b28      	ldr	r3, [pc, #160]	@ (800af2c <_malloc_r+0x470>)
 800ae8a:	d107      	bne.n	800ae9c <_malloc_r+0x3e0>
 800ae8c:	f1bb 0f00 	cmp.w	fp, #0
 800ae90:	d023      	beq.n	800aeda <_malloc_r+0x41e>
 800ae92:	f1ab 0008 	sub.w	r0, fp, #8
 800ae96:	4410      	add	r0, r2
 800ae98:	f04f 0800 	mov.w	r8, #0
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	60b4      	str	r4, [r6, #8]
 800aea0:	1b00      	subs	r0, r0, r4
 800aea2:	4440      	add	r0, r8
 800aea4:	4442      	add	r2, r8
 800aea6:	f040 0001 	orr.w	r0, r0, #1
 800aeaa:	45b2      	cmp	sl, r6
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	6060      	str	r0, [r4, #4]
 800aeb0:	f43f af29 	beq.w	800ad06 <_malloc_r+0x24a>
 800aeb4:	f1b9 0f0f 	cmp.w	r9, #15
 800aeb8:	d812      	bhi.n	800aee0 <_malloc_r+0x424>
 800aeba:	2301      	movs	r3, #1
 800aebc:	6063      	str	r3, [r4, #4]
 800aebe:	68b3      	ldr	r3, [r6, #8]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f023 0303 	bic.w	r3, r3, #3
 800aec6:	42bb      	cmp	r3, r7
 800aec8:	eba3 0207 	sub.w	r2, r3, r7
 800aecc:	d301      	bcc.n	800aed2 <_malloc_r+0x416>
 800aece:	2a0f      	cmp	r2, #15
 800aed0:	dc22      	bgt.n	800af18 <_malloc_r+0x45c>
 800aed2:	4628      	mov	r0, r5
 800aed4:	f000 f832 	bl	800af3c <__malloc_unlock>
 800aed8:	e5fc      	b.n	800aad4 <_malloc_r+0x18>
 800aeda:	4610      	mov	r0, r2
 800aedc:	46d8      	mov	r8, fp
 800aede:	e7dd      	b.n	800ae9c <_malloc_r+0x3e0>
 800aee0:	f8da 2004 	ldr.w	r2, [sl, #4]
 800aee4:	f1a9 090c 	sub.w	r9, r9, #12
 800aee8:	f029 0907 	bic.w	r9, r9, #7
 800aeec:	f002 0201 	and.w	r2, r2, #1
 800aef0:	ea42 0209 	orr.w	r2, r2, r9
 800aef4:	f8ca 2004 	str.w	r2, [sl, #4]
 800aef8:	2105      	movs	r1, #5
 800aefa:	eb0a 0209 	add.w	r2, sl, r9
 800aefe:	f1b9 0f0f 	cmp.w	r9, #15
 800af02:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800af06:	f67f aefe 	bls.w	800ad06 <_malloc_r+0x24a>
 800af0a:	f10a 0108 	add.w	r1, sl, #8
 800af0e:	4628      	mov	r0, r5
 800af10:	f001 f9d6 	bl	800c2c0 <_free_r>
 800af14:	4b05      	ldr	r3, [pc, #20]	@ (800af2c <_malloc_r+0x470>)
 800af16:	e6f6      	b.n	800ad06 <_malloc_r+0x24a>
 800af18:	68b4      	ldr	r4, [r6, #8]
 800af1a:	f047 0301 	orr.w	r3, r7, #1
 800af1e:	4427      	add	r7, r4
 800af20:	f042 0201 	orr.w	r2, r2, #1
 800af24:	6063      	str	r3, [r4, #4]
 800af26:	60b7      	str	r7, [r6, #8]
 800af28:	607a      	str	r2, [r7, #4]
 800af2a:	e5f8      	b.n	800ab1e <_malloc_r+0x62>
 800af2c:	20000f90 	.word	0x20000f90

0800af30 <__malloc_lock>:
 800af30:	4801      	ldr	r0, [pc, #4]	@ (800af38 <__malloc_lock+0x8>)
 800af32:	f001 b92b 	b.w	800c18c <__retarget_lock_acquire_recursive>
 800af36:	bf00      	nop
 800af38:	20001104 	.word	0x20001104

0800af3c <__malloc_unlock>:
 800af3c:	4801      	ldr	r0, [pc, #4]	@ (800af44 <__malloc_unlock+0x8>)
 800af3e:	f001 b926 	b.w	800c18e <__retarget_lock_release_recursive>
 800af42:	bf00      	nop
 800af44:	20001104 	.word	0x20001104

0800af48 <sulp>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	4604      	mov	r4, r0
 800af4c:	460d      	mov	r5, r1
 800af4e:	ec45 4b10 	vmov	d0, r4, r5
 800af52:	4616      	mov	r6, r2
 800af54:	f002 f8de 	bl	800d114 <__ulp>
 800af58:	ec51 0b10 	vmov	r0, r1, d0
 800af5c:	b17e      	cbz	r6, 800af7e <sulp+0x36>
 800af5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800af62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800af66:	2b00      	cmp	r3, #0
 800af68:	dd09      	ble.n	800af7e <sulp+0x36>
 800af6a:	051b      	lsls	r3, r3, #20
 800af6c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800af70:	2400      	movs	r4, #0
 800af72:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800af76:	4622      	mov	r2, r4
 800af78:	462b      	mov	r3, r5
 800af7a:	f7f5 fb45 	bl	8000608 <__aeabi_dmul>
 800af7e:	ec41 0b10 	vmov	d0, r0, r1
 800af82:	bd70      	pop	{r4, r5, r6, pc}
 800af84:	0000      	movs	r0, r0
	...

0800af88 <_strtod_l>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	b09f      	sub	sp, #124	@ 0x7c
 800af8e:	460c      	mov	r4, r1
 800af90:	9217      	str	r2, [sp, #92]	@ 0x5c
 800af92:	2200      	movs	r2, #0
 800af94:	921a      	str	r2, [sp, #104]	@ 0x68
 800af96:	9005      	str	r0, [sp, #20]
 800af98:	f04f 0a00 	mov.w	sl, #0
 800af9c:	f04f 0b00 	mov.w	fp, #0
 800afa0:	460a      	mov	r2, r1
 800afa2:	9219      	str	r2, [sp, #100]	@ 0x64
 800afa4:	7811      	ldrb	r1, [r2, #0]
 800afa6:	292b      	cmp	r1, #43	@ 0x2b
 800afa8:	d04a      	beq.n	800b040 <_strtod_l+0xb8>
 800afaa:	d838      	bhi.n	800b01e <_strtod_l+0x96>
 800afac:	290d      	cmp	r1, #13
 800afae:	d832      	bhi.n	800b016 <_strtod_l+0x8e>
 800afb0:	2908      	cmp	r1, #8
 800afb2:	d832      	bhi.n	800b01a <_strtod_l+0x92>
 800afb4:	2900      	cmp	r1, #0
 800afb6:	d03b      	beq.n	800b030 <_strtod_l+0xa8>
 800afb8:	2200      	movs	r2, #0
 800afba:	920e      	str	r2, [sp, #56]	@ 0x38
 800afbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800afbe:	782a      	ldrb	r2, [r5, #0]
 800afc0:	2a30      	cmp	r2, #48	@ 0x30
 800afc2:	f040 80b2 	bne.w	800b12a <_strtod_l+0x1a2>
 800afc6:	786a      	ldrb	r2, [r5, #1]
 800afc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800afcc:	2a58      	cmp	r2, #88	@ 0x58
 800afce:	d16e      	bne.n	800b0ae <_strtod_l+0x126>
 800afd0:	9302      	str	r3, [sp, #8]
 800afd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	ab1a      	add	r3, sp, #104	@ 0x68
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	4a8f      	ldr	r2, [pc, #572]	@ (800b218 <_strtod_l+0x290>)
 800afdc:	9805      	ldr	r0, [sp, #20]
 800afde:	ab1b      	add	r3, sp, #108	@ 0x6c
 800afe0:	a919      	add	r1, sp, #100	@ 0x64
 800afe2:	f001 fa95 	bl	800c510 <__gethex>
 800afe6:	f010 060f 	ands.w	r6, r0, #15
 800afea:	4604      	mov	r4, r0
 800afec:	d005      	beq.n	800affa <_strtod_l+0x72>
 800afee:	2e06      	cmp	r6, #6
 800aff0:	d128      	bne.n	800b044 <_strtod_l+0xbc>
 800aff2:	3501      	adds	r5, #1
 800aff4:	2300      	movs	r3, #0
 800aff6:	9519      	str	r5, [sp, #100]	@ 0x64
 800aff8:	930e      	str	r3, [sp, #56]	@ 0x38
 800affa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800affc:	2b00      	cmp	r3, #0
 800affe:	f040 858e 	bne.w	800bb1e <_strtod_l+0xb96>
 800b002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b004:	b1cb      	cbz	r3, 800b03a <_strtod_l+0xb2>
 800b006:	4652      	mov	r2, sl
 800b008:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b00c:	ec43 2b10 	vmov	d0, r2, r3
 800b010:	b01f      	add	sp, #124	@ 0x7c
 800b012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b016:	2920      	cmp	r1, #32
 800b018:	d1ce      	bne.n	800afb8 <_strtod_l+0x30>
 800b01a:	3201      	adds	r2, #1
 800b01c:	e7c1      	b.n	800afa2 <_strtod_l+0x1a>
 800b01e:	292d      	cmp	r1, #45	@ 0x2d
 800b020:	d1ca      	bne.n	800afb8 <_strtod_l+0x30>
 800b022:	2101      	movs	r1, #1
 800b024:	910e      	str	r1, [sp, #56]	@ 0x38
 800b026:	1c51      	adds	r1, r2, #1
 800b028:	9119      	str	r1, [sp, #100]	@ 0x64
 800b02a:	7852      	ldrb	r2, [r2, #1]
 800b02c:	2a00      	cmp	r2, #0
 800b02e:	d1c5      	bne.n	800afbc <_strtod_l+0x34>
 800b030:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b032:	9419      	str	r4, [sp, #100]	@ 0x64
 800b034:	2b00      	cmp	r3, #0
 800b036:	f040 8570 	bne.w	800bb1a <_strtod_l+0xb92>
 800b03a:	4652      	mov	r2, sl
 800b03c:	465b      	mov	r3, fp
 800b03e:	e7e5      	b.n	800b00c <_strtod_l+0x84>
 800b040:	2100      	movs	r1, #0
 800b042:	e7ef      	b.n	800b024 <_strtod_l+0x9c>
 800b044:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b046:	b13a      	cbz	r2, 800b058 <_strtod_l+0xd0>
 800b048:	2135      	movs	r1, #53	@ 0x35
 800b04a:	a81c      	add	r0, sp, #112	@ 0x70
 800b04c:	f002 f95c 	bl	800d308 <__copybits>
 800b050:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b052:	9805      	ldr	r0, [sp, #20]
 800b054:	f001 fd64 	bl	800cb20 <_Bfree>
 800b058:	3e01      	subs	r6, #1
 800b05a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b05c:	2e04      	cmp	r6, #4
 800b05e:	d806      	bhi.n	800b06e <_strtod_l+0xe6>
 800b060:	e8df f006 	tbb	[pc, r6]
 800b064:	201d0314 	.word	0x201d0314
 800b068:	14          	.byte	0x14
 800b069:	00          	.byte	0x00
 800b06a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b06e:	05e1      	lsls	r1, r4, #23
 800b070:	bf48      	it	mi
 800b072:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b076:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b07a:	0d1b      	lsrs	r3, r3, #20
 800b07c:	051b      	lsls	r3, r3, #20
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1bb      	bne.n	800affa <_strtod_l+0x72>
 800b082:	f001 f857 	bl	800c134 <__errno>
 800b086:	2322      	movs	r3, #34	@ 0x22
 800b088:	6003      	str	r3, [r0, #0]
 800b08a:	e7b6      	b.n	800affa <_strtod_l+0x72>
 800b08c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b090:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b094:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b098:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b09c:	e7e7      	b.n	800b06e <_strtod_l+0xe6>
 800b09e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b220 <_strtod_l+0x298>
 800b0a2:	e7e4      	b.n	800b06e <_strtod_l+0xe6>
 800b0a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b0a8:	f04f 3aff 	mov.w	sl, #4294967295
 800b0ac:	e7df      	b.n	800b06e <_strtod_l+0xe6>
 800b0ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0b0:	1c5a      	adds	r2, r3, #1
 800b0b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0b4:	785b      	ldrb	r3, [r3, #1]
 800b0b6:	2b30      	cmp	r3, #48	@ 0x30
 800b0b8:	d0f9      	beq.n	800b0ae <_strtod_l+0x126>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d09d      	beq.n	800affa <_strtod_l+0x72>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	2700      	movs	r7, #0
 800b0c2:	9308      	str	r3, [sp, #32]
 800b0c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b0ca:	46b9      	mov	r9, r7
 800b0cc:	220a      	movs	r2, #10
 800b0ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b0d0:	7805      	ldrb	r5, [r0, #0]
 800b0d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b0d6:	b2d9      	uxtb	r1, r3
 800b0d8:	2909      	cmp	r1, #9
 800b0da:	d928      	bls.n	800b12e <_strtod_l+0x1a6>
 800b0dc:	494f      	ldr	r1, [pc, #316]	@ (800b21c <_strtod_l+0x294>)
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f000 ff66 	bl	800bfb0 <strncmp>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d032      	beq.n	800b14e <_strtod_l+0x1c6>
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	462a      	mov	r2, r5
 800b0ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800b0ee:	464d      	mov	r5, r9
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2a65      	cmp	r2, #101	@ 0x65
 800b0f4:	d001      	beq.n	800b0fa <_strtod_l+0x172>
 800b0f6:	2a45      	cmp	r2, #69	@ 0x45
 800b0f8:	d114      	bne.n	800b124 <_strtod_l+0x19c>
 800b0fa:	b91d      	cbnz	r5, 800b104 <_strtod_l+0x17c>
 800b0fc:	9a08      	ldr	r2, [sp, #32]
 800b0fe:	4302      	orrs	r2, r0
 800b100:	d096      	beq.n	800b030 <_strtod_l+0xa8>
 800b102:	2500      	movs	r5, #0
 800b104:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b106:	1c62      	adds	r2, r4, #1
 800b108:	9219      	str	r2, [sp, #100]	@ 0x64
 800b10a:	7862      	ldrb	r2, [r4, #1]
 800b10c:	2a2b      	cmp	r2, #43	@ 0x2b
 800b10e:	d07a      	beq.n	800b206 <_strtod_l+0x27e>
 800b110:	2a2d      	cmp	r2, #45	@ 0x2d
 800b112:	d07e      	beq.n	800b212 <_strtod_l+0x28a>
 800b114:	f04f 0c00 	mov.w	ip, #0
 800b118:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b11c:	2909      	cmp	r1, #9
 800b11e:	f240 8085 	bls.w	800b22c <_strtod_l+0x2a4>
 800b122:	9419      	str	r4, [sp, #100]	@ 0x64
 800b124:	f04f 0800 	mov.w	r8, #0
 800b128:	e0a5      	b.n	800b276 <_strtod_l+0x2ee>
 800b12a:	2300      	movs	r3, #0
 800b12c:	e7c8      	b.n	800b0c0 <_strtod_l+0x138>
 800b12e:	f1b9 0f08 	cmp.w	r9, #8
 800b132:	bfd8      	it	le
 800b134:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b136:	f100 0001 	add.w	r0, r0, #1
 800b13a:	bfda      	itte	le
 800b13c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b140:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b142:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b146:	f109 0901 	add.w	r9, r9, #1
 800b14a:	9019      	str	r0, [sp, #100]	@ 0x64
 800b14c:	e7bf      	b.n	800b0ce <_strtod_l+0x146>
 800b14e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	9219      	str	r2, [sp, #100]	@ 0x64
 800b154:	785a      	ldrb	r2, [r3, #1]
 800b156:	f1b9 0f00 	cmp.w	r9, #0
 800b15a:	d03b      	beq.n	800b1d4 <_strtod_l+0x24c>
 800b15c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b15e:	464d      	mov	r5, r9
 800b160:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b164:	2b09      	cmp	r3, #9
 800b166:	d912      	bls.n	800b18e <_strtod_l+0x206>
 800b168:	2301      	movs	r3, #1
 800b16a:	e7c2      	b.n	800b0f2 <_strtod_l+0x16a>
 800b16c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b16e:	1c5a      	adds	r2, r3, #1
 800b170:	9219      	str	r2, [sp, #100]	@ 0x64
 800b172:	785a      	ldrb	r2, [r3, #1]
 800b174:	3001      	adds	r0, #1
 800b176:	2a30      	cmp	r2, #48	@ 0x30
 800b178:	d0f8      	beq.n	800b16c <_strtod_l+0x1e4>
 800b17a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b17e:	2b08      	cmp	r3, #8
 800b180:	f200 84d2 	bhi.w	800bb28 <_strtod_l+0xba0>
 800b184:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b186:	900a      	str	r0, [sp, #40]	@ 0x28
 800b188:	2000      	movs	r0, #0
 800b18a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b18c:	4605      	mov	r5, r0
 800b18e:	3a30      	subs	r2, #48	@ 0x30
 800b190:	f100 0301 	add.w	r3, r0, #1
 800b194:	d018      	beq.n	800b1c8 <_strtod_l+0x240>
 800b196:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b198:	4419      	add	r1, r3
 800b19a:	910a      	str	r1, [sp, #40]	@ 0x28
 800b19c:	462e      	mov	r6, r5
 800b19e:	f04f 0e0a 	mov.w	lr, #10
 800b1a2:	1c71      	adds	r1, r6, #1
 800b1a4:	eba1 0c05 	sub.w	ip, r1, r5
 800b1a8:	4563      	cmp	r3, ip
 800b1aa:	dc15      	bgt.n	800b1d8 <_strtod_l+0x250>
 800b1ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b1b0:	182b      	adds	r3, r5, r0
 800b1b2:	2b08      	cmp	r3, #8
 800b1b4:	f105 0501 	add.w	r5, r5, #1
 800b1b8:	4405      	add	r5, r0
 800b1ba:	dc1a      	bgt.n	800b1f2 <_strtod_l+0x26a>
 800b1bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1be:	230a      	movs	r3, #10
 800b1c0:	fb03 2301 	mla	r3, r3, r1, r2
 800b1c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b1ca:	1c51      	adds	r1, r2, #1
 800b1cc:	9119      	str	r1, [sp, #100]	@ 0x64
 800b1ce:	7852      	ldrb	r2, [r2, #1]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	e7c5      	b.n	800b160 <_strtod_l+0x1d8>
 800b1d4:	4648      	mov	r0, r9
 800b1d6:	e7ce      	b.n	800b176 <_strtod_l+0x1ee>
 800b1d8:	2e08      	cmp	r6, #8
 800b1da:	dc05      	bgt.n	800b1e8 <_strtod_l+0x260>
 800b1dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b1de:	fb0e f606 	mul.w	r6, lr, r6
 800b1e2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b1e4:	460e      	mov	r6, r1
 800b1e6:	e7dc      	b.n	800b1a2 <_strtod_l+0x21a>
 800b1e8:	2910      	cmp	r1, #16
 800b1ea:	bfd8      	it	le
 800b1ec:	fb0e f707 	mulle.w	r7, lr, r7
 800b1f0:	e7f8      	b.n	800b1e4 <_strtod_l+0x25c>
 800b1f2:	2b0f      	cmp	r3, #15
 800b1f4:	bfdc      	itt	le
 800b1f6:	230a      	movle	r3, #10
 800b1f8:	fb03 2707 	mlale	r7, r3, r7, r2
 800b1fc:	e7e3      	b.n	800b1c6 <_strtod_l+0x23e>
 800b1fe:	2300      	movs	r3, #0
 800b200:	930a      	str	r3, [sp, #40]	@ 0x28
 800b202:	2301      	movs	r3, #1
 800b204:	e77a      	b.n	800b0fc <_strtod_l+0x174>
 800b206:	f04f 0c00 	mov.w	ip, #0
 800b20a:	1ca2      	adds	r2, r4, #2
 800b20c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b20e:	78a2      	ldrb	r2, [r4, #2]
 800b210:	e782      	b.n	800b118 <_strtod_l+0x190>
 800b212:	f04f 0c01 	mov.w	ip, #1
 800b216:	e7f8      	b.n	800b20a <_strtod_l+0x282>
 800b218:	08011c38 	.word	0x08011c38
 800b21c:	08011a78 	.word	0x08011a78
 800b220:	7ff00000 	.word	0x7ff00000
 800b224:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b226:	1c51      	adds	r1, r2, #1
 800b228:	9119      	str	r1, [sp, #100]	@ 0x64
 800b22a:	7852      	ldrb	r2, [r2, #1]
 800b22c:	2a30      	cmp	r2, #48	@ 0x30
 800b22e:	d0f9      	beq.n	800b224 <_strtod_l+0x29c>
 800b230:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b234:	2908      	cmp	r1, #8
 800b236:	f63f af75 	bhi.w	800b124 <_strtod_l+0x19c>
 800b23a:	3a30      	subs	r2, #48	@ 0x30
 800b23c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b23e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b240:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b242:	f04f 080a 	mov.w	r8, #10
 800b246:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b248:	1c56      	adds	r6, r2, #1
 800b24a:	9619      	str	r6, [sp, #100]	@ 0x64
 800b24c:	7852      	ldrb	r2, [r2, #1]
 800b24e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b252:	f1be 0f09 	cmp.w	lr, #9
 800b256:	d939      	bls.n	800b2cc <_strtod_l+0x344>
 800b258:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b25a:	1a76      	subs	r6, r6, r1
 800b25c:	2e08      	cmp	r6, #8
 800b25e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b262:	dc03      	bgt.n	800b26c <_strtod_l+0x2e4>
 800b264:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b266:	4588      	cmp	r8, r1
 800b268:	bfa8      	it	ge
 800b26a:	4688      	movge	r8, r1
 800b26c:	f1bc 0f00 	cmp.w	ip, #0
 800b270:	d001      	beq.n	800b276 <_strtod_l+0x2ee>
 800b272:	f1c8 0800 	rsb	r8, r8, #0
 800b276:	2d00      	cmp	r5, #0
 800b278:	d14e      	bne.n	800b318 <_strtod_l+0x390>
 800b27a:	9908      	ldr	r1, [sp, #32]
 800b27c:	4308      	orrs	r0, r1
 800b27e:	f47f aebc 	bne.w	800affa <_strtod_l+0x72>
 800b282:	2b00      	cmp	r3, #0
 800b284:	f47f aed4 	bne.w	800b030 <_strtod_l+0xa8>
 800b288:	2a69      	cmp	r2, #105	@ 0x69
 800b28a:	d028      	beq.n	800b2de <_strtod_l+0x356>
 800b28c:	dc25      	bgt.n	800b2da <_strtod_l+0x352>
 800b28e:	2a49      	cmp	r2, #73	@ 0x49
 800b290:	d025      	beq.n	800b2de <_strtod_l+0x356>
 800b292:	2a4e      	cmp	r2, #78	@ 0x4e
 800b294:	f47f aecc 	bne.w	800b030 <_strtod_l+0xa8>
 800b298:	499a      	ldr	r1, [pc, #616]	@ (800b504 <_strtod_l+0x57c>)
 800b29a:	a819      	add	r0, sp, #100	@ 0x64
 800b29c:	f001 fb5a 	bl	800c954 <__match>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	f43f aec5 	beq.w	800b030 <_strtod_l+0xa8>
 800b2a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	2b28      	cmp	r3, #40	@ 0x28
 800b2ac:	d12e      	bne.n	800b30c <_strtod_l+0x384>
 800b2ae:	4996      	ldr	r1, [pc, #600]	@ (800b508 <_strtod_l+0x580>)
 800b2b0:	aa1c      	add	r2, sp, #112	@ 0x70
 800b2b2:	a819      	add	r0, sp, #100	@ 0x64
 800b2b4:	f001 fb62 	bl	800c97c <__hexnan>
 800b2b8:	2805      	cmp	r0, #5
 800b2ba:	d127      	bne.n	800b30c <_strtod_l+0x384>
 800b2bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b2be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b2c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b2c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b2ca:	e696      	b.n	800affa <_strtod_l+0x72>
 800b2cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2ce:	fb08 2101 	mla	r1, r8, r1, r2
 800b2d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b2d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2d8:	e7b5      	b.n	800b246 <_strtod_l+0x2be>
 800b2da:	2a6e      	cmp	r2, #110	@ 0x6e
 800b2dc:	e7da      	b.n	800b294 <_strtod_l+0x30c>
 800b2de:	498b      	ldr	r1, [pc, #556]	@ (800b50c <_strtod_l+0x584>)
 800b2e0:	a819      	add	r0, sp, #100	@ 0x64
 800b2e2:	f001 fb37 	bl	800c954 <__match>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f43f aea2 	beq.w	800b030 <_strtod_l+0xa8>
 800b2ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2ee:	4988      	ldr	r1, [pc, #544]	@ (800b510 <_strtod_l+0x588>)
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	a819      	add	r0, sp, #100	@ 0x64
 800b2f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b2f6:	f001 fb2d 	bl	800c954 <__match>
 800b2fa:	b910      	cbnz	r0, 800b302 <_strtod_l+0x37a>
 800b2fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2fe:	3301      	adds	r3, #1
 800b300:	9319      	str	r3, [sp, #100]	@ 0x64
 800b302:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b520 <_strtod_l+0x598>
 800b306:	f04f 0a00 	mov.w	sl, #0
 800b30a:	e676      	b.n	800affa <_strtod_l+0x72>
 800b30c:	4881      	ldr	r0, [pc, #516]	@ (800b514 <_strtod_l+0x58c>)
 800b30e:	f000 ff63 	bl	800c1d8 <nan>
 800b312:	ec5b ab10 	vmov	sl, fp, d0
 800b316:	e670      	b.n	800affa <_strtod_l+0x72>
 800b318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b31a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b31c:	eba8 0303 	sub.w	r3, r8, r3
 800b320:	f1b9 0f00 	cmp.w	r9, #0
 800b324:	bf08      	it	eq
 800b326:	46a9      	moveq	r9, r5
 800b328:	2d10      	cmp	r5, #16
 800b32a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b32c:	462c      	mov	r4, r5
 800b32e:	bfa8      	it	ge
 800b330:	2410      	movge	r4, #16
 800b332:	f7f5 f8ef 	bl	8000514 <__aeabi_ui2d>
 800b336:	2d09      	cmp	r5, #9
 800b338:	4682      	mov	sl, r0
 800b33a:	468b      	mov	fp, r1
 800b33c:	dc13      	bgt.n	800b366 <_strtod_l+0x3de>
 800b33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b340:	2b00      	cmp	r3, #0
 800b342:	f43f ae5a 	beq.w	800affa <_strtod_l+0x72>
 800b346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b348:	dd78      	ble.n	800b43c <_strtod_l+0x4b4>
 800b34a:	2b16      	cmp	r3, #22
 800b34c:	dc5f      	bgt.n	800b40e <_strtod_l+0x486>
 800b34e:	4972      	ldr	r1, [pc, #456]	@ (800b518 <_strtod_l+0x590>)
 800b350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b354:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b358:	4652      	mov	r2, sl
 800b35a:	465b      	mov	r3, fp
 800b35c:	f7f5 f954 	bl	8000608 <__aeabi_dmul>
 800b360:	4682      	mov	sl, r0
 800b362:	468b      	mov	fp, r1
 800b364:	e649      	b.n	800affa <_strtod_l+0x72>
 800b366:	4b6c      	ldr	r3, [pc, #432]	@ (800b518 <_strtod_l+0x590>)
 800b368:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b36c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b370:	f7f5 f94a 	bl	8000608 <__aeabi_dmul>
 800b374:	4682      	mov	sl, r0
 800b376:	4638      	mov	r0, r7
 800b378:	468b      	mov	fp, r1
 800b37a:	f7f5 f8cb 	bl	8000514 <__aeabi_ui2d>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4650      	mov	r0, sl
 800b384:	4659      	mov	r1, fp
 800b386:	f7f4 ff89 	bl	800029c <__adddf3>
 800b38a:	2d0f      	cmp	r5, #15
 800b38c:	4682      	mov	sl, r0
 800b38e:	468b      	mov	fp, r1
 800b390:	ddd5      	ble.n	800b33e <_strtod_l+0x3b6>
 800b392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b394:	1b2c      	subs	r4, r5, r4
 800b396:	441c      	add	r4, r3
 800b398:	2c00      	cmp	r4, #0
 800b39a:	f340 8093 	ble.w	800b4c4 <_strtod_l+0x53c>
 800b39e:	f014 030f 	ands.w	r3, r4, #15
 800b3a2:	d00a      	beq.n	800b3ba <_strtod_l+0x432>
 800b3a4:	495c      	ldr	r1, [pc, #368]	@ (800b518 <_strtod_l+0x590>)
 800b3a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b3aa:	4652      	mov	r2, sl
 800b3ac:	465b      	mov	r3, fp
 800b3ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3b2:	f7f5 f929 	bl	8000608 <__aeabi_dmul>
 800b3b6:	4682      	mov	sl, r0
 800b3b8:	468b      	mov	fp, r1
 800b3ba:	f034 040f 	bics.w	r4, r4, #15
 800b3be:	d073      	beq.n	800b4a8 <_strtod_l+0x520>
 800b3c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b3c4:	dd49      	ble.n	800b45a <_strtod_l+0x4d2>
 800b3c6:	2400      	movs	r4, #0
 800b3c8:	46a0      	mov	r8, r4
 800b3ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b3cc:	46a1      	mov	r9, r4
 800b3ce:	9a05      	ldr	r2, [sp, #20]
 800b3d0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b520 <_strtod_l+0x598>
 800b3d4:	2322      	movs	r3, #34	@ 0x22
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	f04f 0a00 	mov.w	sl, #0
 800b3dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f43f ae0b 	beq.w	800affa <_strtod_l+0x72>
 800b3e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3e6:	9805      	ldr	r0, [sp, #20]
 800b3e8:	f001 fb9a 	bl	800cb20 <_Bfree>
 800b3ec:	9805      	ldr	r0, [sp, #20]
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	f001 fb96 	bl	800cb20 <_Bfree>
 800b3f4:	9805      	ldr	r0, [sp, #20]
 800b3f6:	4641      	mov	r1, r8
 800b3f8:	f001 fb92 	bl	800cb20 <_Bfree>
 800b3fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b3fe:	9805      	ldr	r0, [sp, #20]
 800b400:	f001 fb8e 	bl	800cb20 <_Bfree>
 800b404:	9805      	ldr	r0, [sp, #20]
 800b406:	4621      	mov	r1, r4
 800b408:	f001 fb8a 	bl	800cb20 <_Bfree>
 800b40c:	e5f5      	b.n	800affa <_strtod_l+0x72>
 800b40e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b410:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b414:	4293      	cmp	r3, r2
 800b416:	dbbc      	blt.n	800b392 <_strtod_l+0x40a>
 800b418:	4c3f      	ldr	r4, [pc, #252]	@ (800b518 <_strtod_l+0x590>)
 800b41a:	f1c5 050f 	rsb	r5, r5, #15
 800b41e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b422:	4652      	mov	r2, sl
 800b424:	465b      	mov	r3, fp
 800b426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b42a:	f7f5 f8ed 	bl	8000608 <__aeabi_dmul>
 800b42e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b430:	1b5d      	subs	r5, r3, r5
 800b432:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b436:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b43a:	e78f      	b.n	800b35c <_strtod_l+0x3d4>
 800b43c:	3316      	adds	r3, #22
 800b43e:	dba8      	blt.n	800b392 <_strtod_l+0x40a>
 800b440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b442:	eba3 0808 	sub.w	r8, r3, r8
 800b446:	4b34      	ldr	r3, [pc, #208]	@ (800b518 <_strtod_l+0x590>)
 800b448:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b44c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b450:	4650      	mov	r0, sl
 800b452:	4659      	mov	r1, fp
 800b454:	f7f5 fa02 	bl	800085c <__aeabi_ddiv>
 800b458:	e782      	b.n	800b360 <_strtod_l+0x3d8>
 800b45a:	2300      	movs	r3, #0
 800b45c:	4f2f      	ldr	r7, [pc, #188]	@ (800b51c <_strtod_l+0x594>)
 800b45e:	1124      	asrs	r4, r4, #4
 800b460:	4650      	mov	r0, sl
 800b462:	4659      	mov	r1, fp
 800b464:	461e      	mov	r6, r3
 800b466:	2c01      	cmp	r4, #1
 800b468:	dc21      	bgt.n	800b4ae <_strtod_l+0x526>
 800b46a:	b10b      	cbz	r3, 800b470 <_strtod_l+0x4e8>
 800b46c:	4682      	mov	sl, r0
 800b46e:	468b      	mov	fp, r1
 800b470:	492a      	ldr	r1, [pc, #168]	@ (800b51c <_strtod_l+0x594>)
 800b472:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b476:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b47a:	4652      	mov	r2, sl
 800b47c:	465b      	mov	r3, fp
 800b47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b482:	f7f5 f8c1 	bl	8000608 <__aeabi_dmul>
 800b486:	4b26      	ldr	r3, [pc, #152]	@ (800b520 <_strtod_l+0x598>)
 800b488:	460a      	mov	r2, r1
 800b48a:	400b      	ands	r3, r1
 800b48c:	4925      	ldr	r1, [pc, #148]	@ (800b524 <_strtod_l+0x59c>)
 800b48e:	428b      	cmp	r3, r1
 800b490:	4682      	mov	sl, r0
 800b492:	d898      	bhi.n	800b3c6 <_strtod_l+0x43e>
 800b494:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b498:	428b      	cmp	r3, r1
 800b49a:	bf86      	itte	hi
 800b49c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b528 <_strtod_l+0x5a0>
 800b4a0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b4a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	9308      	str	r3, [sp, #32]
 800b4ac:	e076      	b.n	800b59c <_strtod_l+0x614>
 800b4ae:	07e2      	lsls	r2, r4, #31
 800b4b0:	d504      	bpl.n	800b4bc <_strtod_l+0x534>
 800b4b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4b6:	f7f5 f8a7 	bl	8000608 <__aeabi_dmul>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	3601      	adds	r6, #1
 800b4be:	1064      	asrs	r4, r4, #1
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	e7d0      	b.n	800b466 <_strtod_l+0x4de>
 800b4c4:	d0f0      	beq.n	800b4a8 <_strtod_l+0x520>
 800b4c6:	4264      	negs	r4, r4
 800b4c8:	f014 020f 	ands.w	r2, r4, #15
 800b4cc:	d00a      	beq.n	800b4e4 <_strtod_l+0x55c>
 800b4ce:	4b12      	ldr	r3, [pc, #72]	@ (800b518 <_strtod_l+0x590>)
 800b4d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4d4:	4650      	mov	r0, sl
 800b4d6:	4659      	mov	r1, fp
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7f5 f9be 	bl	800085c <__aeabi_ddiv>
 800b4e0:	4682      	mov	sl, r0
 800b4e2:	468b      	mov	fp, r1
 800b4e4:	1124      	asrs	r4, r4, #4
 800b4e6:	d0df      	beq.n	800b4a8 <_strtod_l+0x520>
 800b4e8:	2c1f      	cmp	r4, #31
 800b4ea:	dd1f      	ble.n	800b52c <_strtod_l+0x5a4>
 800b4ec:	2400      	movs	r4, #0
 800b4ee:	46a0      	mov	r8, r4
 800b4f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b4f2:	46a1      	mov	r9, r4
 800b4f4:	9a05      	ldr	r2, [sp, #20]
 800b4f6:	2322      	movs	r3, #34	@ 0x22
 800b4f8:	f04f 0a00 	mov.w	sl, #0
 800b4fc:	f04f 0b00 	mov.w	fp, #0
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	e76b      	b.n	800b3dc <_strtod_l+0x454>
 800b504:	08011b59 	.word	0x08011b59
 800b508:	08011c24 	.word	0x08011c24
 800b50c:	08011b51 	.word	0x08011b51
 800b510:	08011bbf 	.word	0x08011bbf
 800b514:	08011bbb 	.word	0x08011bbb
 800b518:	08011db0 	.word	0x08011db0
 800b51c:	08011d88 	.word	0x08011d88
 800b520:	7ff00000 	.word	0x7ff00000
 800b524:	7ca00000 	.word	0x7ca00000
 800b528:	7fefffff 	.word	0x7fefffff
 800b52c:	f014 0310 	ands.w	r3, r4, #16
 800b530:	bf18      	it	ne
 800b532:	236a      	movne	r3, #106	@ 0x6a
 800b534:	4ea9      	ldr	r6, [pc, #676]	@ (800b7dc <_strtod_l+0x854>)
 800b536:	9308      	str	r3, [sp, #32]
 800b538:	4650      	mov	r0, sl
 800b53a:	4659      	mov	r1, fp
 800b53c:	2300      	movs	r3, #0
 800b53e:	07e7      	lsls	r7, r4, #31
 800b540:	d504      	bpl.n	800b54c <_strtod_l+0x5c4>
 800b542:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b546:	f7f5 f85f 	bl	8000608 <__aeabi_dmul>
 800b54a:	2301      	movs	r3, #1
 800b54c:	1064      	asrs	r4, r4, #1
 800b54e:	f106 0608 	add.w	r6, r6, #8
 800b552:	d1f4      	bne.n	800b53e <_strtod_l+0x5b6>
 800b554:	b10b      	cbz	r3, 800b55a <_strtod_l+0x5d2>
 800b556:	4682      	mov	sl, r0
 800b558:	468b      	mov	fp, r1
 800b55a:	9b08      	ldr	r3, [sp, #32]
 800b55c:	b1b3      	cbz	r3, 800b58c <_strtod_l+0x604>
 800b55e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b562:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b566:	2b00      	cmp	r3, #0
 800b568:	4659      	mov	r1, fp
 800b56a:	dd0f      	ble.n	800b58c <_strtod_l+0x604>
 800b56c:	2b1f      	cmp	r3, #31
 800b56e:	dd56      	ble.n	800b61e <_strtod_l+0x696>
 800b570:	2b34      	cmp	r3, #52	@ 0x34
 800b572:	bfde      	ittt	le
 800b574:	f04f 33ff 	movle.w	r3, #4294967295
 800b578:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b57c:	4093      	lslle	r3, r2
 800b57e:	f04f 0a00 	mov.w	sl, #0
 800b582:	bfcc      	ite	gt
 800b584:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b588:	ea03 0b01 	andle.w	fp, r3, r1
 800b58c:	2200      	movs	r2, #0
 800b58e:	2300      	movs	r3, #0
 800b590:	4650      	mov	r0, sl
 800b592:	4659      	mov	r1, fp
 800b594:	f7f5 faa0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d1a7      	bne.n	800b4ec <_strtod_l+0x564>
 800b59c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b5a2:	9805      	ldr	r0, [sp, #20]
 800b5a4:	462b      	mov	r3, r5
 800b5a6:	464a      	mov	r2, r9
 800b5a8:	f001 fb0a 	bl	800cbc0 <__s2b>
 800b5ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	f43f af09 	beq.w	800b3c6 <_strtod_l+0x43e>
 800b5b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5b8:	2a00      	cmp	r2, #0
 800b5ba:	eba3 0308 	sub.w	r3, r3, r8
 800b5be:	bfa8      	it	ge
 800b5c0:	2300      	movge	r3, #0
 800b5c2:	9312      	str	r3, [sp, #72]	@ 0x48
 800b5c4:	2400      	movs	r4, #0
 800b5c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b5ca:	9316      	str	r3, [sp, #88]	@ 0x58
 800b5cc:	46a0      	mov	r8, r4
 800b5ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5d0:	9805      	ldr	r0, [sp, #20]
 800b5d2:	6859      	ldr	r1, [r3, #4]
 800b5d4:	f001 fa7f 	bl	800cad6 <_Balloc>
 800b5d8:	4681      	mov	r9, r0
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	f43f aef7 	beq.w	800b3ce <_strtod_l+0x446>
 800b5e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5e2:	691a      	ldr	r2, [r3, #16]
 800b5e4:	3202      	adds	r2, #2
 800b5e6:	f103 010c 	add.w	r1, r3, #12
 800b5ea:	0092      	lsls	r2, r2, #2
 800b5ec:	300c      	adds	r0, #12
 800b5ee:	f000 fde3 	bl	800c1b8 <memcpy>
 800b5f2:	ec4b ab10 	vmov	d0, sl, fp
 800b5f6:	9805      	ldr	r0, [sp, #20]
 800b5f8:	aa1c      	add	r2, sp, #112	@ 0x70
 800b5fa:	a91b      	add	r1, sp, #108	@ 0x6c
 800b5fc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b600:	f001 fdf8 	bl	800d1f4 <__d2b>
 800b604:	901a      	str	r0, [sp, #104]	@ 0x68
 800b606:	2800      	cmp	r0, #0
 800b608:	f43f aee1 	beq.w	800b3ce <_strtod_l+0x446>
 800b60c:	9805      	ldr	r0, [sp, #20]
 800b60e:	2101      	movs	r1, #1
 800b610:	f001 fb6c 	bl	800ccec <__i2b>
 800b614:	4680      	mov	r8, r0
 800b616:	b948      	cbnz	r0, 800b62c <_strtod_l+0x6a4>
 800b618:	f04f 0800 	mov.w	r8, #0
 800b61c:	e6d7      	b.n	800b3ce <_strtod_l+0x446>
 800b61e:	f04f 32ff 	mov.w	r2, #4294967295
 800b622:	fa02 f303 	lsl.w	r3, r2, r3
 800b626:	ea03 0a0a 	and.w	sl, r3, sl
 800b62a:	e7af      	b.n	800b58c <_strtod_l+0x604>
 800b62c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b62e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b630:	2d00      	cmp	r5, #0
 800b632:	bfab      	itete	ge
 800b634:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b636:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b638:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b63a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b63c:	bfac      	ite	ge
 800b63e:	18ef      	addge	r7, r5, r3
 800b640:	1b5e      	sublt	r6, r3, r5
 800b642:	9b08      	ldr	r3, [sp, #32]
 800b644:	1aed      	subs	r5, r5, r3
 800b646:	4415      	add	r5, r2
 800b648:	4b65      	ldr	r3, [pc, #404]	@ (800b7e0 <_strtod_l+0x858>)
 800b64a:	3d01      	subs	r5, #1
 800b64c:	429d      	cmp	r5, r3
 800b64e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b652:	da50      	bge.n	800b6f6 <_strtod_l+0x76e>
 800b654:	1b5b      	subs	r3, r3, r5
 800b656:	2b1f      	cmp	r3, #31
 800b658:	eba2 0203 	sub.w	r2, r2, r3
 800b65c:	f04f 0101 	mov.w	r1, #1
 800b660:	dc3d      	bgt.n	800b6de <_strtod_l+0x756>
 800b662:	fa01 f303 	lsl.w	r3, r1, r3
 800b666:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b668:	2300      	movs	r3, #0
 800b66a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b66c:	18bd      	adds	r5, r7, r2
 800b66e:	9b08      	ldr	r3, [sp, #32]
 800b670:	42af      	cmp	r7, r5
 800b672:	4416      	add	r6, r2
 800b674:	441e      	add	r6, r3
 800b676:	463b      	mov	r3, r7
 800b678:	bfa8      	it	ge
 800b67a:	462b      	movge	r3, r5
 800b67c:	42b3      	cmp	r3, r6
 800b67e:	bfa8      	it	ge
 800b680:	4633      	movge	r3, r6
 800b682:	2b00      	cmp	r3, #0
 800b684:	bfc2      	ittt	gt
 800b686:	1aed      	subgt	r5, r5, r3
 800b688:	1af6      	subgt	r6, r6, r3
 800b68a:	1aff      	subgt	r7, r7, r3
 800b68c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dd16      	ble.n	800b6c0 <_strtod_l+0x738>
 800b692:	4641      	mov	r1, r8
 800b694:	9805      	ldr	r0, [sp, #20]
 800b696:	461a      	mov	r2, r3
 800b698:	f001 fbe0 	bl	800ce5c <__pow5mult>
 800b69c:	4680      	mov	r8, r0
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d0ba      	beq.n	800b618 <_strtod_l+0x690>
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b6a6:	9805      	ldr	r0, [sp, #20]
 800b6a8:	f001 fb36 	bl	800cd18 <__multiply>
 800b6ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	f43f ae8d 	beq.w	800b3ce <_strtod_l+0x446>
 800b6b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6b6:	9805      	ldr	r0, [sp, #20]
 800b6b8:	f001 fa32 	bl	800cb20 <_Bfree>
 800b6bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6be:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6c0:	2d00      	cmp	r5, #0
 800b6c2:	dc1d      	bgt.n	800b700 <_strtod_l+0x778>
 800b6c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	dd23      	ble.n	800b712 <_strtod_l+0x78a>
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b6ce:	9805      	ldr	r0, [sp, #20]
 800b6d0:	f001 fbc4 	bl	800ce5c <__pow5mult>
 800b6d4:	4681      	mov	r9, r0
 800b6d6:	b9e0      	cbnz	r0, 800b712 <_strtod_l+0x78a>
 800b6d8:	f04f 0900 	mov.w	r9, #0
 800b6dc:	e677      	b.n	800b3ce <_strtod_l+0x446>
 800b6de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b6e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b6e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b6ea:	35e2      	adds	r5, #226	@ 0xe2
 800b6ec:	fa01 f305 	lsl.w	r3, r1, r5
 800b6f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b6f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b6f4:	e7ba      	b.n	800b66c <_strtod_l+0x6e4>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b6fe:	e7b5      	b.n	800b66c <_strtod_l+0x6e4>
 800b700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b702:	9805      	ldr	r0, [sp, #20]
 800b704:	462a      	mov	r2, r5
 800b706:	f001 fbe9 	bl	800cedc <__lshift>
 800b70a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d1d9      	bne.n	800b6c4 <_strtod_l+0x73c>
 800b710:	e65d      	b.n	800b3ce <_strtod_l+0x446>
 800b712:	2e00      	cmp	r6, #0
 800b714:	dd07      	ble.n	800b726 <_strtod_l+0x79e>
 800b716:	4649      	mov	r1, r9
 800b718:	9805      	ldr	r0, [sp, #20]
 800b71a:	4632      	mov	r2, r6
 800b71c:	f001 fbde 	bl	800cedc <__lshift>
 800b720:	4681      	mov	r9, r0
 800b722:	2800      	cmp	r0, #0
 800b724:	d0d8      	beq.n	800b6d8 <_strtod_l+0x750>
 800b726:	2f00      	cmp	r7, #0
 800b728:	dd08      	ble.n	800b73c <_strtod_l+0x7b4>
 800b72a:	4641      	mov	r1, r8
 800b72c:	9805      	ldr	r0, [sp, #20]
 800b72e:	463a      	mov	r2, r7
 800b730:	f001 fbd4 	bl	800cedc <__lshift>
 800b734:	4680      	mov	r8, r0
 800b736:	2800      	cmp	r0, #0
 800b738:	f43f ae49 	beq.w	800b3ce <_strtod_l+0x446>
 800b73c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b73e:	9805      	ldr	r0, [sp, #20]
 800b740:	464a      	mov	r2, r9
 800b742:	f001 fc53 	bl	800cfec <__mdiff>
 800b746:	4604      	mov	r4, r0
 800b748:	2800      	cmp	r0, #0
 800b74a:	f43f ae40 	beq.w	800b3ce <_strtod_l+0x446>
 800b74e:	68c3      	ldr	r3, [r0, #12]
 800b750:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b752:	2300      	movs	r3, #0
 800b754:	60c3      	str	r3, [r0, #12]
 800b756:	4641      	mov	r1, r8
 800b758:	f001 fc2c 	bl	800cfb4 <__mcmp>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	da45      	bge.n	800b7ec <_strtod_l+0x864>
 800b760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b762:	ea53 030a 	orrs.w	r3, r3, sl
 800b766:	d16b      	bne.n	800b840 <_strtod_l+0x8b8>
 800b768:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d167      	bne.n	800b840 <_strtod_l+0x8b8>
 800b770:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b774:	0d1b      	lsrs	r3, r3, #20
 800b776:	051b      	lsls	r3, r3, #20
 800b778:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b77c:	d960      	bls.n	800b840 <_strtod_l+0x8b8>
 800b77e:	6963      	ldr	r3, [r4, #20]
 800b780:	b913      	cbnz	r3, 800b788 <_strtod_l+0x800>
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	2b01      	cmp	r3, #1
 800b786:	dd5b      	ble.n	800b840 <_strtod_l+0x8b8>
 800b788:	4621      	mov	r1, r4
 800b78a:	2201      	movs	r2, #1
 800b78c:	9805      	ldr	r0, [sp, #20]
 800b78e:	f001 fba5 	bl	800cedc <__lshift>
 800b792:	4641      	mov	r1, r8
 800b794:	4604      	mov	r4, r0
 800b796:	f001 fc0d 	bl	800cfb4 <__mcmp>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	dd50      	ble.n	800b840 <_strtod_l+0x8b8>
 800b79e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b7a2:	9a08      	ldr	r2, [sp, #32]
 800b7a4:	0d1b      	lsrs	r3, r3, #20
 800b7a6:	051b      	lsls	r3, r3, #20
 800b7a8:	2a00      	cmp	r2, #0
 800b7aa:	d06a      	beq.n	800b882 <_strtod_l+0x8fa>
 800b7ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b7b0:	d867      	bhi.n	800b882 <_strtod_l+0x8fa>
 800b7b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b7b6:	f67f ae9d 	bls.w	800b4f4 <_strtod_l+0x56c>
 800b7ba:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e4 <_strtod_l+0x85c>)
 800b7bc:	4650      	mov	r0, sl
 800b7be:	4659      	mov	r1, fp
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f7f4 ff21 	bl	8000608 <__aeabi_dmul>
 800b7c6:	4b08      	ldr	r3, [pc, #32]	@ (800b7e8 <_strtod_l+0x860>)
 800b7c8:	400b      	ands	r3, r1
 800b7ca:	4682      	mov	sl, r0
 800b7cc:	468b      	mov	fp, r1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f47f ae08 	bne.w	800b3e4 <_strtod_l+0x45c>
 800b7d4:	9a05      	ldr	r2, [sp, #20]
 800b7d6:	2322      	movs	r3, #34	@ 0x22
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	e603      	b.n	800b3e4 <_strtod_l+0x45c>
 800b7dc:	08011c50 	.word	0x08011c50
 800b7e0:	fffffc02 	.word	0xfffffc02
 800b7e4:	39500000 	.word	0x39500000
 800b7e8:	7ff00000 	.word	0x7ff00000
 800b7ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b7f0:	d165      	bne.n	800b8be <_strtod_l+0x936>
 800b7f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b7f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7f8:	b35a      	cbz	r2, 800b852 <_strtod_l+0x8ca>
 800b7fa:	4a9f      	ldr	r2, [pc, #636]	@ (800ba78 <_strtod_l+0xaf0>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d12b      	bne.n	800b858 <_strtod_l+0x8d0>
 800b800:	9b08      	ldr	r3, [sp, #32]
 800b802:	4651      	mov	r1, sl
 800b804:	b303      	cbz	r3, 800b848 <_strtod_l+0x8c0>
 800b806:	4b9d      	ldr	r3, [pc, #628]	@ (800ba7c <_strtod_l+0xaf4>)
 800b808:	465a      	mov	r2, fp
 800b80a:	4013      	ands	r3, r2
 800b80c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b810:	f04f 32ff 	mov.w	r2, #4294967295
 800b814:	d81b      	bhi.n	800b84e <_strtod_l+0x8c6>
 800b816:	0d1b      	lsrs	r3, r3, #20
 800b818:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b81c:	fa02 f303 	lsl.w	r3, r2, r3
 800b820:	4299      	cmp	r1, r3
 800b822:	d119      	bne.n	800b858 <_strtod_l+0x8d0>
 800b824:	4b96      	ldr	r3, [pc, #600]	@ (800ba80 <_strtod_l+0xaf8>)
 800b826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b828:	429a      	cmp	r2, r3
 800b82a:	d102      	bne.n	800b832 <_strtod_l+0x8aa>
 800b82c:	3101      	adds	r1, #1
 800b82e:	f43f adce 	beq.w	800b3ce <_strtod_l+0x446>
 800b832:	4b92      	ldr	r3, [pc, #584]	@ (800ba7c <_strtod_l+0xaf4>)
 800b834:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b836:	401a      	ands	r2, r3
 800b838:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b83c:	f04f 0a00 	mov.w	sl, #0
 800b840:	9b08      	ldr	r3, [sp, #32]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1b9      	bne.n	800b7ba <_strtod_l+0x832>
 800b846:	e5cd      	b.n	800b3e4 <_strtod_l+0x45c>
 800b848:	f04f 33ff 	mov.w	r3, #4294967295
 800b84c:	e7e8      	b.n	800b820 <_strtod_l+0x898>
 800b84e:	4613      	mov	r3, r2
 800b850:	e7e6      	b.n	800b820 <_strtod_l+0x898>
 800b852:	ea53 030a 	orrs.w	r3, r3, sl
 800b856:	d0a2      	beq.n	800b79e <_strtod_l+0x816>
 800b858:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b85a:	b1db      	cbz	r3, 800b894 <_strtod_l+0x90c>
 800b85c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b85e:	4213      	tst	r3, r2
 800b860:	d0ee      	beq.n	800b840 <_strtod_l+0x8b8>
 800b862:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b864:	9a08      	ldr	r2, [sp, #32]
 800b866:	4650      	mov	r0, sl
 800b868:	4659      	mov	r1, fp
 800b86a:	b1bb      	cbz	r3, 800b89c <_strtod_l+0x914>
 800b86c:	f7ff fb6c 	bl	800af48 <sulp>
 800b870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b874:	ec53 2b10 	vmov	r2, r3, d0
 800b878:	f7f4 fd10 	bl	800029c <__adddf3>
 800b87c:	4682      	mov	sl, r0
 800b87e:	468b      	mov	fp, r1
 800b880:	e7de      	b.n	800b840 <_strtod_l+0x8b8>
 800b882:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b886:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b88a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b88e:	f04f 3aff 	mov.w	sl, #4294967295
 800b892:	e7d5      	b.n	800b840 <_strtod_l+0x8b8>
 800b894:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b896:	ea13 0f0a 	tst.w	r3, sl
 800b89a:	e7e1      	b.n	800b860 <_strtod_l+0x8d8>
 800b89c:	f7ff fb54 	bl	800af48 <sulp>
 800b8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8a4:	ec53 2b10 	vmov	r2, r3, d0
 800b8a8:	f7f4 fcf6 	bl	8000298 <__aeabi_dsub>
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	468b      	mov	fp, r1
 800b8b4:	f7f5 f910 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d0c1      	beq.n	800b840 <_strtod_l+0x8b8>
 800b8bc:	e61a      	b.n	800b4f4 <_strtod_l+0x56c>
 800b8be:	4641      	mov	r1, r8
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f001 fcef 	bl	800d2a4 <__ratio>
 800b8c6:	ec57 6b10 	vmov	r6, r7, d0
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	f7f5 f914 	bl	8000b00 <__aeabi_dcmple>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d06f      	beq.n	800b9bc <_strtod_l+0xa34>
 800b8dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d17a      	bne.n	800b9d8 <_strtod_l+0xa50>
 800b8e2:	f1ba 0f00 	cmp.w	sl, #0
 800b8e6:	d158      	bne.n	800b99a <_strtod_l+0xa12>
 800b8e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d15a      	bne.n	800b9a8 <_strtod_l+0xa20>
 800b8f2:	4b64      	ldr	r3, [pc, #400]	@ (800ba84 <_strtod_l+0xafc>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	f7f5 f8f7 	bl	8000aec <__aeabi_dcmplt>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d159      	bne.n	800b9b6 <_strtod_l+0xa2e>
 800b902:	4630      	mov	r0, r6
 800b904:	4639      	mov	r1, r7
 800b906:	4b60      	ldr	r3, [pc, #384]	@ (800ba88 <_strtod_l+0xb00>)
 800b908:	2200      	movs	r2, #0
 800b90a:	f7f4 fe7d 	bl	8000608 <__aeabi_dmul>
 800b90e:	4606      	mov	r6, r0
 800b910:	460f      	mov	r7, r1
 800b912:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b916:	9606      	str	r6, [sp, #24]
 800b918:	9307      	str	r3, [sp, #28]
 800b91a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b91e:	4d57      	ldr	r5, [pc, #348]	@ (800ba7c <_strtod_l+0xaf4>)
 800b920:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b926:	401d      	ands	r5, r3
 800b928:	4b58      	ldr	r3, [pc, #352]	@ (800ba8c <_strtod_l+0xb04>)
 800b92a:	429d      	cmp	r5, r3
 800b92c:	f040 80b2 	bne.w	800ba94 <_strtod_l+0xb0c>
 800b930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b932:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b936:	ec4b ab10 	vmov	d0, sl, fp
 800b93a:	f001 fbeb 	bl	800d114 <__ulp>
 800b93e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b942:	ec51 0b10 	vmov	r0, r1, d0
 800b946:	f7f4 fe5f 	bl	8000608 <__aeabi_dmul>
 800b94a:	4652      	mov	r2, sl
 800b94c:	465b      	mov	r3, fp
 800b94e:	f7f4 fca5 	bl	800029c <__adddf3>
 800b952:	460b      	mov	r3, r1
 800b954:	4949      	ldr	r1, [pc, #292]	@ (800ba7c <_strtod_l+0xaf4>)
 800b956:	4a4e      	ldr	r2, [pc, #312]	@ (800ba90 <_strtod_l+0xb08>)
 800b958:	4019      	ands	r1, r3
 800b95a:	4291      	cmp	r1, r2
 800b95c:	4682      	mov	sl, r0
 800b95e:	d942      	bls.n	800b9e6 <_strtod_l+0xa5e>
 800b960:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b962:	4b47      	ldr	r3, [pc, #284]	@ (800ba80 <_strtod_l+0xaf8>)
 800b964:	429a      	cmp	r2, r3
 800b966:	d103      	bne.n	800b970 <_strtod_l+0x9e8>
 800b968:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b96a:	3301      	adds	r3, #1
 800b96c:	f43f ad2f 	beq.w	800b3ce <_strtod_l+0x446>
 800b970:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ba80 <_strtod_l+0xaf8>
 800b974:	f04f 3aff 	mov.w	sl, #4294967295
 800b978:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b97a:	9805      	ldr	r0, [sp, #20]
 800b97c:	f001 f8d0 	bl	800cb20 <_Bfree>
 800b980:	9805      	ldr	r0, [sp, #20]
 800b982:	4649      	mov	r1, r9
 800b984:	f001 f8cc 	bl	800cb20 <_Bfree>
 800b988:	9805      	ldr	r0, [sp, #20]
 800b98a:	4641      	mov	r1, r8
 800b98c:	f001 f8c8 	bl	800cb20 <_Bfree>
 800b990:	9805      	ldr	r0, [sp, #20]
 800b992:	4621      	mov	r1, r4
 800b994:	f001 f8c4 	bl	800cb20 <_Bfree>
 800b998:	e619      	b.n	800b5ce <_strtod_l+0x646>
 800b99a:	f1ba 0f01 	cmp.w	sl, #1
 800b99e:	d103      	bne.n	800b9a8 <_strtod_l+0xa20>
 800b9a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f43f ada6 	beq.w	800b4f4 <_strtod_l+0x56c>
 800b9a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ba58 <_strtod_l+0xad0>
 800b9ac:	4f35      	ldr	r7, [pc, #212]	@ (800ba84 <_strtod_l+0xafc>)
 800b9ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b9b2:	2600      	movs	r6, #0
 800b9b4:	e7b1      	b.n	800b91a <_strtod_l+0x992>
 800b9b6:	4f34      	ldr	r7, [pc, #208]	@ (800ba88 <_strtod_l+0xb00>)
 800b9b8:	2600      	movs	r6, #0
 800b9ba:	e7aa      	b.n	800b912 <_strtod_l+0x98a>
 800b9bc:	4b32      	ldr	r3, [pc, #200]	@ (800ba88 <_strtod_l+0xb00>)
 800b9be:	4630      	mov	r0, r6
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f7f4 fe20 	bl	8000608 <__aeabi_dmul>
 800b9c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	460f      	mov	r7, r1
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d09f      	beq.n	800b912 <_strtod_l+0x98a>
 800b9d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b9d6:	e7a0      	b.n	800b91a <_strtod_l+0x992>
 800b9d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ba60 <_strtod_l+0xad8>
 800b9dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b9e0:	ec57 6b17 	vmov	r6, r7, d7
 800b9e4:	e799      	b.n	800b91a <_strtod_l+0x992>
 800b9e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b9ea:	9b08      	ldr	r3, [sp, #32]
 800b9ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1c1      	bne.n	800b978 <_strtod_l+0x9f0>
 800b9f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b9f8:	0d1b      	lsrs	r3, r3, #20
 800b9fa:	051b      	lsls	r3, r3, #20
 800b9fc:	429d      	cmp	r5, r3
 800b9fe:	d1bb      	bne.n	800b978 <_strtod_l+0x9f0>
 800ba00:	4630      	mov	r0, r6
 800ba02:	4639      	mov	r1, r7
 800ba04:	f7f5 f9b0 	bl	8000d68 <__aeabi_d2lz>
 800ba08:	f7f4 fdd0 	bl	80005ac <__aeabi_l2d>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	4630      	mov	r0, r6
 800ba12:	4639      	mov	r1, r7
 800ba14:	f7f4 fc40 	bl	8000298 <__aeabi_dsub>
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ba20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ba24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba26:	ea46 060a 	orr.w	r6, r6, sl
 800ba2a:	431e      	orrs	r6, r3
 800ba2c:	d06f      	beq.n	800bb0e <_strtod_l+0xb86>
 800ba2e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ba68 <_strtod_l+0xae0>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	f7f5 f85a 	bl	8000aec <__aeabi_dcmplt>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	f47f acd3 	bne.w	800b3e4 <_strtod_l+0x45c>
 800ba3e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ba70 <_strtod_l+0xae8>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba48:	f7f5 f86e 	bl	8000b28 <__aeabi_dcmpgt>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d093      	beq.n	800b978 <_strtod_l+0x9f0>
 800ba50:	e4c8      	b.n	800b3e4 <_strtod_l+0x45c>
 800ba52:	bf00      	nop
 800ba54:	f3af 8000 	nop.w
 800ba58:	00000000 	.word	0x00000000
 800ba5c:	bff00000 	.word	0xbff00000
 800ba60:	00000000 	.word	0x00000000
 800ba64:	3ff00000 	.word	0x3ff00000
 800ba68:	94a03595 	.word	0x94a03595
 800ba6c:	3fdfffff 	.word	0x3fdfffff
 800ba70:	35afe535 	.word	0x35afe535
 800ba74:	3fe00000 	.word	0x3fe00000
 800ba78:	000fffff 	.word	0x000fffff
 800ba7c:	7ff00000 	.word	0x7ff00000
 800ba80:	7fefffff 	.word	0x7fefffff
 800ba84:	3ff00000 	.word	0x3ff00000
 800ba88:	3fe00000 	.word	0x3fe00000
 800ba8c:	7fe00000 	.word	0x7fe00000
 800ba90:	7c9fffff 	.word	0x7c9fffff
 800ba94:	9b08      	ldr	r3, [sp, #32]
 800ba96:	b323      	cbz	r3, 800bae2 <_strtod_l+0xb5a>
 800ba98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ba9c:	d821      	bhi.n	800bae2 <_strtod_l+0xb5a>
 800ba9e:	a328      	add	r3, pc, #160	@ (adr r3, 800bb40 <_strtod_l+0xbb8>)
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	4630      	mov	r0, r6
 800baa6:	4639      	mov	r1, r7
 800baa8:	f7f5 f82a 	bl	8000b00 <__aeabi_dcmple>
 800baac:	b1a0      	cbz	r0, 800bad8 <_strtod_l+0xb50>
 800baae:	4639      	mov	r1, r7
 800bab0:	4630      	mov	r0, r6
 800bab2:	f7f5 f881 	bl	8000bb8 <__aeabi_d2uiz>
 800bab6:	2801      	cmp	r0, #1
 800bab8:	bf38      	it	cc
 800baba:	2001      	movcc	r0, #1
 800babc:	f7f4 fd2a 	bl	8000514 <__aeabi_ui2d>
 800bac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bac2:	4606      	mov	r6, r0
 800bac4:	460f      	mov	r7, r1
 800bac6:	b9fb      	cbnz	r3, 800bb08 <_strtod_l+0xb80>
 800bac8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bacc:	9014      	str	r0, [sp, #80]	@ 0x50
 800bace:	9315      	str	r3, [sp, #84]	@ 0x54
 800bad0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bad4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bad8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bada:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bade:	1b5b      	subs	r3, r3, r5
 800bae0:	9311      	str	r3, [sp, #68]	@ 0x44
 800bae2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bae6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800baea:	f001 fb13 	bl	800d114 <__ulp>
 800baee:	4650      	mov	r0, sl
 800baf0:	ec53 2b10 	vmov	r2, r3, d0
 800baf4:	4659      	mov	r1, fp
 800baf6:	f7f4 fd87 	bl	8000608 <__aeabi_dmul>
 800bafa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bafe:	f7f4 fbcd 	bl	800029c <__adddf3>
 800bb02:	4682      	mov	sl, r0
 800bb04:	468b      	mov	fp, r1
 800bb06:	e770      	b.n	800b9ea <_strtod_l+0xa62>
 800bb08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bb0c:	e7e0      	b.n	800bad0 <_strtod_l+0xb48>
 800bb0e:	a30e      	add	r3, pc, #56	@ (adr r3, 800bb48 <_strtod_l+0xbc0>)
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	f7f4 ffea 	bl	8000aec <__aeabi_dcmplt>
 800bb18:	e798      	b.n	800ba4c <_strtod_l+0xac4>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	930e      	str	r3, [sp, #56]	@ 0x38
 800bb1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bb20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	f7ff ba6d 	b.w	800b002 <_strtod_l+0x7a>
 800bb28:	2a65      	cmp	r2, #101	@ 0x65
 800bb2a:	f43f ab68 	beq.w	800b1fe <_strtod_l+0x276>
 800bb2e:	2a45      	cmp	r2, #69	@ 0x45
 800bb30:	f43f ab65 	beq.w	800b1fe <_strtod_l+0x276>
 800bb34:	2301      	movs	r3, #1
 800bb36:	f7ff bba0 	b.w	800b27a <_strtod_l+0x2f2>
 800bb3a:	bf00      	nop
 800bb3c:	f3af 8000 	nop.w
 800bb40:	ffc00000 	.word	0xffc00000
 800bb44:	41dfffff 	.word	0x41dfffff
 800bb48:	94a03595 	.word	0x94a03595
 800bb4c:	3fcfffff 	.word	0x3fcfffff

0800bb50 <strtod>:
 800bb50:	460a      	mov	r2, r1
 800bb52:	4601      	mov	r1, r0
 800bb54:	4802      	ldr	r0, [pc, #8]	@ (800bb60 <strtod+0x10>)
 800bb56:	4b03      	ldr	r3, [pc, #12]	@ (800bb64 <strtod+0x14>)
 800bb58:	6800      	ldr	r0, [r0, #0]
 800bb5a:	f7ff ba15 	b.w	800af88 <_strtod_l>
 800bb5e:	bf00      	nop
 800bb60:	200005bc 	.word	0x200005bc
 800bb64:	20000450 	.word	0x20000450

0800bb68 <strtof>:
 800bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6c:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800bc2c <strtof+0xc4>
 800bb70:	4b29      	ldr	r3, [pc, #164]	@ (800bc18 <strtof+0xb0>)
 800bb72:	460a      	mov	r2, r1
 800bb74:	ed2d 8b02 	vpush	{d8}
 800bb78:	4601      	mov	r1, r0
 800bb7a:	f8d8 0000 	ldr.w	r0, [r8]
 800bb7e:	f7ff fa03 	bl	800af88 <_strtod_l>
 800bb82:	ec55 4b10 	vmov	r4, r5, d0
 800bb86:	4622      	mov	r2, r4
 800bb88:	462b      	mov	r3, r5
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	f7f4 ffd5 	bl	8000b3c <__aeabi_dcmpun>
 800bb92:	b190      	cbz	r0, 800bbba <strtof+0x52>
 800bb94:	2d00      	cmp	r5, #0
 800bb96:	4821      	ldr	r0, [pc, #132]	@ (800bc1c <strtof+0xb4>)
 800bb98:	da09      	bge.n	800bbae <strtof+0x46>
 800bb9a:	f000 fb25 	bl	800c1e8 <nanf>
 800bb9e:	eeb1 8a40 	vneg.f32	s16, s0
 800bba2:	eeb0 0a48 	vmov.f32	s0, s16
 800bba6:	ecbd 8b02 	vpop	{d8}
 800bbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbae:	ecbd 8b02 	vpop	{d8}
 800bbb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb6:	f000 bb17 	b.w	800c1e8 <nanf>
 800bbba:	4620      	mov	r0, r4
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	f7f5 f81b 	bl	8000bf8 <__aeabi_d2f>
 800bbc2:	ee08 0a10 	vmov	s16, r0
 800bbc6:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800bc20 <strtof+0xb8>
 800bbca:	eeb0 7ac8 	vabs.f32	s14, s16
 800bbce:	eeb4 7a67 	vcmp.f32	s14, s15
 800bbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd6:	dd11      	ble.n	800bbfc <strtof+0x94>
 800bbd8:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800bbdc:	4b11      	ldr	r3, [pc, #68]	@ (800bc24 <strtof+0xbc>)
 800bbde:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	4639      	mov	r1, r7
 800bbe6:	f7f4 ffa9 	bl	8000b3c <__aeabi_dcmpun>
 800bbea:	b980      	cbnz	r0, 800bc0e <strtof+0xa6>
 800bbec:	4b0d      	ldr	r3, [pc, #52]	@ (800bc24 <strtof+0xbc>)
 800bbee:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	4639      	mov	r1, r7
 800bbf6:	f7f4 ff83 	bl	8000b00 <__aeabi_dcmple>
 800bbfa:	b940      	cbnz	r0, 800bc0e <strtof+0xa6>
 800bbfc:	ee18 3a10 	vmov	r3, s16
 800bc00:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bc04:	d1cd      	bne.n	800bba2 <strtof+0x3a>
 800bc06:	4b08      	ldr	r3, [pc, #32]	@ (800bc28 <strtof+0xc0>)
 800bc08:	402b      	ands	r3, r5
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d0c9      	beq.n	800bba2 <strtof+0x3a>
 800bc0e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc12:	2222      	movs	r2, #34	@ 0x22
 800bc14:	601a      	str	r2, [r3, #0]
 800bc16:	e7c4      	b.n	800bba2 <strtof+0x3a>
 800bc18:	20000450 	.word	0x20000450
 800bc1c:	08011bbb 	.word	0x08011bbb
 800bc20:	7f7fffff 	.word	0x7f7fffff
 800bc24:	7fefffff 	.word	0x7fefffff
 800bc28:	7ff00000 	.word	0x7ff00000
 800bc2c:	200005bc 	.word	0x200005bc

0800bc30 <_strtol_l.isra.0>:
 800bc30:	2b24      	cmp	r3, #36	@ 0x24
 800bc32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc36:	4686      	mov	lr, r0
 800bc38:	4690      	mov	r8, r2
 800bc3a:	d801      	bhi.n	800bc40 <_strtol_l.isra.0+0x10>
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d106      	bne.n	800bc4e <_strtol_l.isra.0+0x1e>
 800bc40:	f000 fa78 	bl	800c134 <__errno>
 800bc44:	2316      	movs	r3, #22
 800bc46:	6003      	str	r3, [r0, #0]
 800bc48:	2000      	movs	r0, #0
 800bc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc4e:	4834      	ldr	r0, [pc, #208]	@ (800bd20 <_strtol_l.isra.0+0xf0>)
 800bc50:	460d      	mov	r5, r1
 800bc52:	462a      	mov	r2, r5
 800bc54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc58:	5d06      	ldrb	r6, [r0, r4]
 800bc5a:	f016 0608 	ands.w	r6, r6, #8
 800bc5e:	d1f8      	bne.n	800bc52 <_strtol_l.isra.0+0x22>
 800bc60:	2c2d      	cmp	r4, #45	@ 0x2d
 800bc62:	d110      	bne.n	800bc86 <_strtol_l.isra.0+0x56>
 800bc64:	782c      	ldrb	r4, [r5, #0]
 800bc66:	2601      	movs	r6, #1
 800bc68:	1c95      	adds	r5, r2, #2
 800bc6a:	f033 0210 	bics.w	r2, r3, #16
 800bc6e:	d115      	bne.n	800bc9c <_strtol_l.isra.0+0x6c>
 800bc70:	2c30      	cmp	r4, #48	@ 0x30
 800bc72:	d10d      	bne.n	800bc90 <_strtol_l.isra.0+0x60>
 800bc74:	782a      	ldrb	r2, [r5, #0]
 800bc76:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bc7a:	2a58      	cmp	r2, #88	@ 0x58
 800bc7c:	d108      	bne.n	800bc90 <_strtol_l.isra.0+0x60>
 800bc7e:	786c      	ldrb	r4, [r5, #1]
 800bc80:	3502      	adds	r5, #2
 800bc82:	2310      	movs	r3, #16
 800bc84:	e00a      	b.n	800bc9c <_strtol_l.isra.0+0x6c>
 800bc86:	2c2b      	cmp	r4, #43	@ 0x2b
 800bc88:	bf04      	itt	eq
 800bc8a:	782c      	ldrbeq	r4, [r5, #0]
 800bc8c:	1c95      	addeq	r5, r2, #2
 800bc8e:	e7ec      	b.n	800bc6a <_strtol_l.isra.0+0x3a>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1f6      	bne.n	800bc82 <_strtol_l.isra.0+0x52>
 800bc94:	2c30      	cmp	r4, #48	@ 0x30
 800bc96:	bf14      	ite	ne
 800bc98:	230a      	movne	r3, #10
 800bc9a:	2308      	moveq	r3, #8
 800bc9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bca0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bca4:	2200      	movs	r2, #0
 800bca6:	fbbc f9f3 	udiv	r9, ip, r3
 800bcaa:	4610      	mov	r0, r2
 800bcac:	fb03 ca19 	mls	sl, r3, r9, ip
 800bcb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bcb4:	2f09      	cmp	r7, #9
 800bcb6:	d80f      	bhi.n	800bcd8 <_strtol_l.isra.0+0xa8>
 800bcb8:	463c      	mov	r4, r7
 800bcba:	42a3      	cmp	r3, r4
 800bcbc:	dd1b      	ble.n	800bcf6 <_strtol_l.isra.0+0xc6>
 800bcbe:	1c57      	adds	r7, r2, #1
 800bcc0:	d007      	beq.n	800bcd2 <_strtol_l.isra.0+0xa2>
 800bcc2:	4581      	cmp	r9, r0
 800bcc4:	d314      	bcc.n	800bcf0 <_strtol_l.isra.0+0xc0>
 800bcc6:	d101      	bne.n	800bccc <_strtol_l.isra.0+0x9c>
 800bcc8:	45a2      	cmp	sl, r4
 800bcca:	db11      	blt.n	800bcf0 <_strtol_l.isra.0+0xc0>
 800bccc:	fb00 4003 	mla	r0, r0, r3, r4
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcd6:	e7eb      	b.n	800bcb0 <_strtol_l.isra.0+0x80>
 800bcd8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bcdc:	2f19      	cmp	r7, #25
 800bcde:	d801      	bhi.n	800bce4 <_strtol_l.isra.0+0xb4>
 800bce0:	3c37      	subs	r4, #55	@ 0x37
 800bce2:	e7ea      	b.n	800bcba <_strtol_l.isra.0+0x8a>
 800bce4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bce8:	2f19      	cmp	r7, #25
 800bcea:	d804      	bhi.n	800bcf6 <_strtol_l.isra.0+0xc6>
 800bcec:	3c57      	subs	r4, #87	@ 0x57
 800bcee:	e7e4      	b.n	800bcba <_strtol_l.isra.0+0x8a>
 800bcf0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf4:	e7ed      	b.n	800bcd2 <_strtol_l.isra.0+0xa2>
 800bcf6:	1c53      	adds	r3, r2, #1
 800bcf8:	d108      	bne.n	800bd0c <_strtol_l.isra.0+0xdc>
 800bcfa:	2322      	movs	r3, #34	@ 0x22
 800bcfc:	f8ce 3000 	str.w	r3, [lr]
 800bd00:	4660      	mov	r0, ip
 800bd02:	f1b8 0f00 	cmp.w	r8, #0
 800bd06:	d0a0      	beq.n	800bc4a <_strtol_l.isra.0+0x1a>
 800bd08:	1e69      	subs	r1, r5, #1
 800bd0a:	e006      	b.n	800bd1a <_strtol_l.isra.0+0xea>
 800bd0c:	b106      	cbz	r6, 800bd10 <_strtol_l.isra.0+0xe0>
 800bd0e:	4240      	negs	r0, r0
 800bd10:	f1b8 0f00 	cmp.w	r8, #0
 800bd14:	d099      	beq.n	800bc4a <_strtol_l.isra.0+0x1a>
 800bd16:	2a00      	cmp	r2, #0
 800bd18:	d1f6      	bne.n	800bd08 <_strtol_l.isra.0+0xd8>
 800bd1a:	f8c8 1000 	str.w	r1, [r8]
 800bd1e:	e794      	b.n	800bc4a <_strtol_l.isra.0+0x1a>
 800bd20:	08011c79 	.word	0x08011c79

0800bd24 <strtol>:
 800bd24:	4613      	mov	r3, r2
 800bd26:	460a      	mov	r2, r1
 800bd28:	4601      	mov	r1, r0
 800bd2a:	4802      	ldr	r0, [pc, #8]	@ (800bd34 <strtol+0x10>)
 800bd2c:	6800      	ldr	r0, [r0, #0]
 800bd2e:	f7ff bf7f 	b.w	800bc30 <_strtol_l.isra.0>
 800bd32:	bf00      	nop
 800bd34:	200005bc 	.word	0x200005bc

0800bd38 <std>:
 800bd38:	2300      	movs	r3, #0
 800bd3a:	b510      	push	{r4, lr}
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd46:	6083      	str	r3, [r0, #8]
 800bd48:	8181      	strh	r1, [r0, #12]
 800bd4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd4c:	81c2      	strh	r2, [r0, #14]
 800bd4e:	6183      	str	r3, [r0, #24]
 800bd50:	4619      	mov	r1, r3
 800bd52:	2208      	movs	r2, #8
 800bd54:	305c      	adds	r0, #92	@ 0x5c
 800bd56:	f000 f916 	bl	800bf86 <memset>
 800bd5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd90 <std+0x58>)
 800bd5c:	6223      	str	r3, [r4, #32]
 800bd5e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd94 <std+0x5c>)
 800bd60:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd62:	4b0d      	ldr	r3, [pc, #52]	@ (800bd98 <std+0x60>)
 800bd64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd66:	4b0d      	ldr	r3, [pc, #52]	@ (800bd9c <std+0x64>)
 800bd68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd6a:	4b0d      	ldr	r3, [pc, #52]	@ (800bda0 <std+0x68>)
 800bd6c:	61e4      	str	r4, [r4, #28]
 800bd6e:	429c      	cmp	r4, r3
 800bd70:	d006      	beq.n	800bd80 <std+0x48>
 800bd72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd76:	4294      	cmp	r4, r2
 800bd78:	d002      	beq.n	800bd80 <std+0x48>
 800bd7a:	33d0      	adds	r3, #208	@ 0xd0
 800bd7c:	429c      	cmp	r4, r3
 800bd7e:	d105      	bne.n	800bd8c <std+0x54>
 800bd80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd88:	f000 b9fe 	b.w	800c188 <__retarget_lock_init_recursive>
 800bd8c:	bd10      	pop	{r4, pc}
 800bd8e:	bf00      	nop
 800bd90:	0800bf01 	.word	0x0800bf01
 800bd94:	0800bf23 	.word	0x0800bf23
 800bd98:	0800bf5b 	.word	0x0800bf5b
 800bd9c:	0800bf7f 	.word	0x0800bf7f
 800bda0:	20000fc4 	.word	0x20000fc4

0800bda4 <stdio_exit_handler>:
 800bda4:	4a02      	ldr	r2, [pc, #8]	@ (800bdb0 <stdio_exit_handler+0xc>)
 800bda6:	4903      	ldr	r1, [pc, #12]	@ (800bdb4 <stdio_exit_handler+0x10>)
 800bda8:	4803      	ldr	r0, [pc, #12]	@ (800bdb8 <stdio_exit_handler+0x14>)
 800bdaa:	f000 b869 	b.w	800be80 <_fwalk_sglue>
 800bdae:	bf00      	nop
 800bdb0:	20000444 	.word	0x20000444
 800bdb4:	0800e7ab 	.word	0x0800e7ab
 800bdb8:	200005c0 	.word	0x200005c0

0800bdbc <cleanup_stdio>:
 800bdbc:	6841      	ldr	r1, [r0, #4]
 800bdbe:	4b0c      	ldr	r3, [pc, #48]	@ (800bdf0 <cleanup_stdio+0x34>)
 800bdc0:	4299      	cmp	r1, r3
 800bdc2:	b510      	push	{r4, lr}
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	d001      	beq.n	800bdcc <cleanup_stdio+0x10>
 800bdc8:	f002 fcef 	bl	800e7aa <_fclose_r>
 800bdcc:	68a1      	ldr	r1, [r4, #8]
 800bdce:	4b09      	ldr	r3, [pc, #36]	@ (800bdf4 <cleanup_stdio+0x38>)
 800bdd0:	4299      	cmp	r1, r3
 800bdd2:	d002      	beq.n	800bdda <cleanup_stdio+0x1e>
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f002 fce8 	bl	800e7aa <_fclose_r>
 800bdda:	68e1      	ldr	r1, [r4, #12]
 800bddc:	4b06      	ldr	r3, [pc, #24]	@ (800bdf8 <cleanup_stdio+0x3c>)
 800bdde:	4299      	cmp	r1, r3
 800bde0:	d004      	beq.n	800bdec <cleanup_stdio+0x30>
 800bde2:	4620      	mov	r0, r4
 800bde4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde8:	f002 bcdf 	b.w	800e7aa <_fclose_r>
 800bdec:	bd10      	pop	{r4, pc}
 800bdee:	bf00      	nop
 800bdf0:	20000fc4 	.word	0x20000fc4
 800bdf4:	2000102c 	.word	0x2000102c
 800bdf8:	20001094 	.word	0x20001094

0800bdfc <global_stdio_init.part.0>:
 800bdfc:	b510      	push	{r4, lr}
 800bdfe:	4b0b      	ldr	r3, [pc, #44]	@ (800be2c <global_stdio_init.part.0+0x30>)
 800be00:	4c0b      	ldr	r4, [pc, #44]	@ (800be30 <global_stdio_init.part.0+0x34>)
 800be02:	4a0c      	ldr	r2, [pc, #48]	@ (800be34 <global_stdio_init.part.0+0x38>)
 800be04:	601a      	str	r2, [r3, #0]
 800be06:	4620      	mov	r0, r4
 800be08:	2200      	movs	r2, #0
 800be0a:	2104      	movs	r1, #4
 800be0c:	f7ff ff94 	bl	800bd38 <std>
 800be10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800be14:	2201      	movs	r2, #1
 800be16:	2109      	movs	r1, #9
 800be18:	f7ff ff8e 	bl	800bd38 <std>
 800be1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be20:	2202      	movs	r2, #2
 800be22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be26:	2112      	movs	r1, #18
 800be28:	f7ff bf86 	b.w	800bd38 <std>
 800be2c:	200010fc 	.word	0x200010fc
 800be30:	20000fc4 	.word	0x20000fc4
 800be34:	0800bda5 	.word	0x0800bda5

0800be38 <__sfp_lock_acquire>:
 800be38:	4801      	ldr	r0, [pc, #4]	@ (800be40 <__sfp_lock_acquire+0x8>)
 800be3a:	f000 b9a7 	b.w	800c18c <__retarget_lock_acquire_recursive>
 800be3e:	bf00      	nop
 800be40:	20001106 	.word	0x20001106

0800be44 <__sfp_lock_release>:
 800be44:	4801      	ldr	r0, [pc, #4]	@ (800be4c <__sfp_lock_release+0x8>)
 800be46:	f000 b9a2 	b.w	800c18e <__retarget_lock_release_recursive>
 800be4a:	bf00      	nop
 800be4c:	20001106 	.word	0x20001106

0800be50 <__sinit>:
 800be50:	b510      	push	{r4, lr}
 800be52:	4604      	mov	r4, r0
 800be54:	f7ff fff0 	bl	800be38 <__sfp_lock_acquire>
 800be58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be5a:	b11b      	cbz	r3, 800be64 <__sinit+0x14>
 800be5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be60:	f7ff bff0 	b.w	800be44 <__sfp_lock_release>
 800be64:	4b04      	ldr	r3, [pc, #16]	@ (800be78 <__sinit+0x28>)
 800be66:	6363      	str	r3, [r4, #52]	@ 0x34
 800be68:	4b04      	ldr	r3, [pc, #16]	@ (800be7c <__sinit+0x2c>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1f5      	bne.n	800be5c <__sinit+0xc>
 800be70:	f7ff ffc4 	bl	800bdfc <global_stdio_init.part.0>
 800be74:	e7f2      	b.n	800be5c <__sinit+0xc>
 800be76:	bf00      	nop
 800be78:	0800bdbd 	.word	0x0800bdbd
 800be7c:	200010fc 	.word	0x200010fc

0800be80 <_fwalk_sglue>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	4607      	mov	r7, r0
 800be86:	4688      	mov	r8, r1
 800be88:	4614      	mov	r4, r2
 800be8a:	2600      	movs	r6, #0
 800be8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be90:	f1b9 0901 	subs.w	r9, r9, #1
 800be94:	d505      	bpl.n	800bea2 <_fwalk_sglue+0x22>
 800be96:	6824      	ldr	r4, [r4, #0]
 800be98:	2c00      	cmp	r4, #0
 800be9a:	d1f7      	bne.n	800be8c <_fwalk_sglue+0xc>
 800be9c:	4630      	mov	r0, r6
 800be9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bea2:	89ab      	ldrh	r3, [r5, #12]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d907      	bls.n	800beb8 <_fwalk_sglue+0x38>
 800bea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800beac:	3301      	adds	r3, #1
 800beae:	d003      	beq.n	800beb8 <_fwalk_sglue+0x38>
 800beb0:	4629      	mov	r1, r5
 800beb2:	4638      	mov	r0, r7
 800beb4:	47c0      	blx	r8
 800beb6:	4306      	orrs	r6, r0
 800beb8:	3568      	adds	r5, #104	@ 0x68
 800beba:	e7e9      	b.n	800be90 <_fwalk_sglue+0x10>

0800bebc <sprintf>:
 800bebc:	b40e      	push	{r1, r2, r3}
 800bebe:	b510      	push	{r4, lr}
 800bec0:	b09d      	sub	sp, #116	@ 0x74
 800bec2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bec4:	9002      	str	r0, [sp, #8]
 800bec6:	9006      	str	r0, [sp, #24]
 800bec8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800becc:	480a      	ldr	r0, [pc, #40]	@ (800bef8 <sprintf+0x3c>)
 800bece:	9107      	str	r1, [sp, #28]
 800bed0:	9104      	str	r1, [sp, #16]
 800bed2:	490a      	ldr	r1, [pc, #40]	@ (800befc <sprintf+0x40>)
 800bed4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bed8:	9105      	str	r1, [sp, #20]
 800beda:	2400      	movs	r4, #0
 800bedc:	a902      	add	r1, sp, #8
 800bede:	6800      	ldr	r0, [r0, #0]
 800bee0:	9301      	str	r3, [sp, #4]
 800bee2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bee4:	f001 fa64 	bl	800d3b0 <_svfprintf_r>
 800bee8:	9b02      	ldr	r3, [sp, #8]
 800beea:	701c      	strb	r4, [r3, #0]
 800beec:	b01d      	add	sp, #116	@ 0x74
 800beee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bef2:	b003      	add	sp, #12
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	200005bc 	.word	0x200005bc
 800befc:	ffff0208 	.word	0xffff0208

0800bf00 <__sread>:
 800bf00:	b510      	push	{r4, lr}
 800bf02:	460c      	mov	r4, r1
 800bf04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf08:	f000 f8e0 	bl	800c0cc <_read_r>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	bfab      	itete	ge
 800bf10:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800bf12:	89a3      	ldrhlt	r3, [r4, #12]
 800bf14:	181b      	addge	r3, r3, r0
 800bf16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf1a:	bfac      	ite	ge
 800bf1c:	6523      	strge	r3, [r4, #80]	@ 0x50
 800bf1e:	81a3      	strhlt	r3, [r4, #12]
 800bf20:	bd10      	pop	{r4, pc}

0800bf22 <__swrite>:
 800bf22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf26:	461f      	mov	r7, r3
 800bf28:	898b      	ldrh	r3, [r1, #12]
 800bf2a:	05db      	lsls	r3, r3, #23
 800bf2c:	4605      	mov	r5, r0
 800bf2e:	460c      	mov	r4, r1
 800bf30:	4616      	mov	r6, r2
 800bf32:	d505      	bpl.n	800bf40 <__swrite+0x1e>
 800bf34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf38:	2302      	movs	r3, #2
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f000 f8b4 	bl	800c0a8 <_lseek_r>
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	4632      	mov	r2, r6
 800bf4e:	463b      	mov	r3, r7
 800bf50:	4628      	mov	r0, r5
 800bf52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf56:	f000 b8db 	b.w	800c110 <_write_r>

0800bf5a <__sseek>:
 800bf5a:	b510      	push	{r4, lr}
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf62:	f000 f8a1 	bl	800c0a8 <_lseek_r>
 800bf66:	1c43      	adds	r3, r0, #1
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	bf15      	itete	ne
 800bf6c:	6520      	strne	r0, [r4, #80]	@ 0x50
 800bf6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf76:	81a3      	strheq	r3, [r4, #12]
 800bf78:	bf18      	it	ne
 800bf7a:	81a3      	strhne	r3, [r4, #12]
 800bf7c:	bd10      	pop	{r4, pc}

0800bf7e <__sclose>:
 800bf7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf82:	f000 b881 	b.w	800c088 <_close_r>

0800bf86 <memset>:
 800bf86:	4402      	add	r2, r0
 800bf88:	4603      	mov	r3, r0
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d100      	bne.n	800bf90 <memset+0xa>
 800bf8e:	4770      	bx	lr
 800bf90:	f803 1b01 	strb.w	r1, [r3], #1
 800bf94:	e7f9      	b.n	800bf8a <memset+0x4>

0800bf96 <strchr>:
 800bf96:	b2c9      	uxtb	r1, r1
 800bf98:	4603      	mov	r3, r0
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfa0:	b112      	cbz	r2, 800bfa8 <strchr+0x12>
 800bfa2:	428a      	cmp	r2, r1
 800bfa4:	d1f9      	bne.n	800bf9a <strchr+0x4>
 800bfa6:	4770      	bx	lr
 800bfa8:	2900      	cmp	r1, #0
 800bfaa:	bf18      	it	ne
 800bfac:	2000      	movne	r0, #0
 800bfae:	4770      	bx	lr

0800bfb0 <strncmp>:
 800bfb0:	b510      	push	{r4, lr}
 800bfb2:	b16a      	cbz	r2, 800bfd0 <strncmp+0x20>
 800bfb4:	3901      	subs	r1, #1
 800bfb6:	1884      	adds	r4, r0, r2
 800bfb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d103      	bne.n	800bfcc <strncmp+0x1c>
 800bfc4:	42a0      	cmp	r0, r4
 800bfc6:	d001      	beq.n	800bfcc <strncmp+0x1c>
 800bfc8:	2a00      	cmp	r2, #0
 800bfca:	d1f5      	bne.n	800bfb8 <strncmp+0x8>
 800bfcc:	1ad0      	subs	r0, r2, r3
 800bfce:	bd10      	pop	{r4, pc}
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	e7fc      	b.n	800bfce <strncmp+0x1e>

0800bfd4 <strncpy>:
 800bfd4:	b510      	push	{r4, lr}
 800bfd6:	3901      	subs	r1, #1
 800bfd8:	4603      	mov	r3, r0
 800bfda:	b132      	cbz	r2, 800bfea <strncpy+0x16>
 800bfdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bfe0:	f803 4b01 	strb.w	r4, [r3], #1
 800bfe4:	3a01      	subs	r2, #1
 800bfe6:	2c00      	cmp	r4, #0
 800bfe8:	d1f7      	bne.n	800bfda <strncpy+0x6>
 800bfea:	441a      	add	r2, r3
 800bfec:	2100      	movs	r1, #0
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d100      	bne.n	800bff4 <strncpy+0x20>
 800bff2:	bd10      	pop	{r4, pc}
 800bff4:	f803 1b01 	strb.w	r1, [r3], #1
 800bff8:	e7f9      	b.n	800bfee <strncpy+0x1a>
	...

0800bffc <strtok>:
 800bffc:	4b02      	ldr	r3, [pc, #8]	@ (800c008 <strtok+0xc>)
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	2301      	movs	r3, #1
 800c002:	3250      	adds	r2, #80	@ 0x50
 800c004:	f000 b802 	b.w	800c00c <__strtok_r>
 800c008:	200005bc 	.word	0x200005bc

0800c00c <__strtok_r>:
 800c00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c00e:	4604      	mov	r4, r0
 800c010:	b908      	cbnz	r0, 800c016 <__strtok_r+0xa>
 800c012:	6814      	ldr	r4, [r2, #0]
 800c014:	b144      	cbz	r4, 800c028 <__strtok_r+0x1c>
 800c016:	4620      	mov	r0, r4
 800c018:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c01c:	460f      	mov	r7, r1
 800c01e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c022:	b91e      	cbnz	r6, 800c02c <__strtok_r+0x20>
 800c024:	b965      	cbnz	r5, 800c040 <__strtok_r+0x34>
 800c026:	6015      	str	r5, [r2, #0]
 800c028:	2000      	movs	r0, #0
 800c02a:	e005      	b.n	800c038 <__strtok_r+0x2c>
 800c02c:	42b5      	cmp	r5, r6
 800c02e:	d1f6      	bne.n	800c01e <__strtok_r+0x12>
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1f0      	bne.n	800c016 <__strtok_r+0xa>
 800c034:	6014      	str	r4, [r2, #0]
 800c036:	7003      	strb	r3, [r0, #0]
 800c038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c03a:	461c      	mov	r4, r3
 800c03c:	e00c      	b.n	800c058 <__strtok_r+0x4c>
 800c03e:	b91d      	cbnz	r5, 800c048 <__strtok_r+0x3c>
 800c040:	4627      	mov	r7, r4
 800c042:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c046:	460e      	mov	r6, r1
 800c048:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c04c:	42ab      	cmp	r3, r5
 800c04e:	d1f6      	bne.n	800c03e <__strtok_r+0x32>
 800c050:	2b00      	cmp	r3, #0
 800c052:	d0f2      	beq.n	800c03a <__strtok_r+0x2e>
 800c054:	2300      	movs	r3, #0
 800c056:	703b      	strb	r3, [r7, #0]
 800c058:	6014      	str	r4, [r2, #0]
 800c05a:	e7ed      	b.n	800c038 <__strtok_r+0x2c>

0800c05c <strstr>:
 800c05c:	780a      	ldrb	r2, [r1, #0]
 800c05e:	b570      	push	{r4, r5, r6, lr}
 800c060:	b96a      	cbnz	r2, 800c07e <strstr+0x22>
 800c062:	bd70      	pop	{r4, r5, r6, pc}
 800c064:	429a      	cmp	r2, r3
 800c066:	d109      	bne.n	800c07c <strstr+0x20>
 800c068:	460c      	mov	r4, r1
 800c06a:	4605      	mov	r5, r0
 800c06c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0f6      	beq.n	800c062 <strstr+0x6>
 800c074:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c078:	429e      	cmp	r6, r3
 800c07a:	d0f7      	beq.n	800c06c <strstr+0x10>
 800c07c:	3001      	adds	r0, #1
 800c07e:	7803      	ldrb	r3, [r0, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1ef      	bne.n	800c064 <strstr+0x8>
 800c084:	4618      	mov	r0, r3
 800c086:	e7ec      	b.n	800c062 <strstr+0x6>

0800c088 <_close_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d06      	ldr	r5, [pc, #24]	@ (800c0a4 <_close_r+0x1c>)
 800c08c:	2300      	movs	r3, #0
 800c08e:	4604      	mov	r4, r0
 800c090:	4608      	mov	r0, r1
 800c092:	602b      	str	r3, [r5, #0]
 800c094:	f7f6 fa8a 	bl	80025ac <_close>
 800c098:	1c43      	adds	r3, r0, #1
 800c09a:	d102      	bne.n	800c0a2 <_close_r+0x1a>
 800c09c:	682b      	ldr	r3, [r5, #0]
 800c09e:	b103      	cbz	r3, 800c0a2 <_close_r+0x1a>
 800c0a0:	6023      	str	r3, [r4, #0]
 800c0a2:	bd38      	pop	{r3, r4, r5, pc}
 800c0a4:	20001100 	.word	0x20001100

0800c0a8 <_lseek_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d07      	ldr	r5, [pc, #28]	@ (800c0c8 <_lseek_r+0x20>)
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	4608      	mov	r0, r1
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	602a      	str	r2, [r5, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	f7f6 fa9f 	bl	80025fa <_lseek>
 800c0bc:	1c43      	adds	r3, r0, #1
 800c0be:	d102      	bne.n	800c0c6 <_lseek_r+0x1e>
 800c0c0:	682b      	ldr	r3, [r5, #0]
 800c0c2:	b103      	cbz	r3, 800c0c6 <_lseek_r+0x1e>
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	20001100 	.word	0x20001100

0800c0cc <_read_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d07      	ldr	r5, [pc, #28]	@ (800c0ec <_read_r+0x20>)
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	4608      	mov	r0, r1
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	602a      	str	r2, [r5, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f7f6 fa2d 	bl	800253a <_read>
 800c0e0:	1c43      	adds	r3, r0, #1
 800c0e2:	d102      	bne.n	800c0ea <_read_r+0x1e>
 800c0e4:	682b      	ldr	r3, [r5, #0]
 800c0e6:	b103      	cbz	r3, 800c0ea <_read_r+0x1e>
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	bd38      	pop	{r3, r4, r5, pc}
 800c0ec:	20001100 	.word	0x20001100

0800c0f0 <_sbrk_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4d06      	ldr	r5, [pc, #24]	@ (800c10c <_sbrk_r+0x1c>)
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	602b      	str	r3, [r5, #0]
 800c0fc:	f7f6 fa8a 	bl	8002614 <_sbrk>
 800c100:	1c43      	adds	r3, r0, #1
 800c102:	d102      	bne.n	800c10a <_sbrk_r+0x1a>
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	b103      	cbz	r3, 800c10a <_sbrk_r+0x1a>
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	bd38      	pop	{r3, r4, r5, pc}
 800c10c:	20001100 	.word	0x20001100

0800c110 <_write_r>:
 800c110:	b538      	push	{r3, r4, r5, lr}
 800c112:	4d07      	ldr	r5, [pc, #28]	@ (800c130 <_write_r+0x20>)
 800c114:	4604      	mov	r4, r0
 800c116:	4608      	mov	r0, r1
 800c118:	4611      	mov	r1, r2
 800c11a:	2200      	movs	r2, #0
 800c11c:	602a      	str	r2, [r5, #0]
 800c11e:	461a      	mov	r2, r3
 800c120:	f7f6 fa28 	bl	8002574 <_write>
 800c124:	1c43      	adds	r3, r0, #1
 800c126:	d102      	bne.n	800c12e <_write_r+0x1e>
 800c128:	682b      	ldr	r3, [r5, #0]
 800c12a:	b103      	cbz	r3, 800c12e <_write_r+0x1e>
 800c12c:	6023      	str	r3, [r4, #0]
 800c12e:	bd38      	pop	{r3, r4, r5, pc}
 800c130:	20001100 	.word	0x20001100

0800c134 <__errno>:
 800c134:	4b01      	ldr	r3, [pc, #4]	@ (800c13c <__errno+0x8>)
 800c136:	6818      	ldr	r0, [r3, #0]
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	200005bc 	.word	0x200005bc

0800c140 <__libc_init_array>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	4d0d      	ldr	r5, [pc, #52]	@ (800c178 <__libc_init_array+0x38>)
 800c144:	4c0d      	ldr	r4, [pc, #52]	@ (800c17c <__libc_init_array+0x3c>)
 800c146:	1b64      	subs	r4, r4, r5
 800c148:	10a4      	asrs	r4, r4, #2
 800c14a:	2600      	movs	r6, #0
 800c14c:	42a6      	cmp	r6, r4
 800c14e:	d109      	bne.n	800c164 <__libc_init_array+0x24>
 800c150:	4d0b      	ldr	r5, [pc, #44]	@ (800c180 <__libc_init_array+0x40>)
 800c152:	4c0c      	ldr	r4, [pc, #48]	@ (800c184 <__libc_init_array+0x44>)
 800c154:	f005 fb9c 	bl	8011890 <_init>
 800c158:	1b64      	subs	r4, r4, r5
 800c15a:	10a4      	asrs	r4, r4, #2
 800c15c:	2600      	movs	r6, #0
 800c15e:	42a6      	cmp	r6, r4
 800c160:	d105      	bne.n	800c16e <__libc_init_array+0x2e>
 800c162:	bd70      	pop	{r4, r5, r6, pc}
 800c164:	f855 3b04 	ldr.w	r3, [r5], #4
 800c168:	4798      	blx	r3
 800c16a:	3601      	adds	r6, #1
 800c16c:	e7ee      	b.n	800c14c <__libc_init_array+0xc>
 800c16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c172:	4798      	blx	r3
 800c174:	3601      	adds	r6, #1
 800c176:	e7f2      	b.n	800c15e <__libc_init_array+0x1e>
 800c178:	08011f10 	.word	0x08011f10
 800c17c:	08011f10 	.word	0x08011f10
 800c180:	08011f10 	.word	0x08011f10
 800c184:	08011f18 	.word	0x08011f18

0800c188 <__retarget_lock_init_recursive>:
 800c188:	4770      	bx	lr

0800c18a <__retarget_lock_close_recursive>:
 800c18a:	4770      	bx	lr

0800c18c <__retarget_lock_acquire_recursive>:
 800c18c:	4770      	bx	lr

0800c18e <__retarget_lock_release_recursive>:
 800c18e:	4770      	bx	lr

0800c190 <sysconf>:
 800c190:	2808      	cmp	r0, #8
 800c192:	b508      	push	{r3, lr}
 800c194:	d006      	beq.n	800c1a4 <sysconf+0x14>
 800c196:	f7ff ffcd 	bl	800c134 <__errno>
 800c19a:	2316      	movs	r3, #22
 800c19c:	6003      	str	r3, [r0, #0]
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	bd08      	pop	{r3, pc}
 800c1a4:	2080      	movs	r0, #128	@ 0x80
 800c1a6:	e7fc      	b.n	800c1a2 <sysconf+0x12>

0800c1a8 <strcpy>:
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1ae:	f803 2b01 	strb.w	r2, [r3], #1
 800c1b2:	2a00      	cmp	r2, #0
 800c1b4:	d1f9      	bne.n	800c1aa <strcpy+0x2>
 800c1b6:	4770      	bx	lr

0800c1b8 <memcpy>:
 800c1b8:	440a      	add	r2, r1
 800c1ba:	4291      	cmp	r1, r2
 800c1bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1c0:	d100      	bne.n	800c1c4 <memcpy+0xc>
 800c1c2:	4770      	bx	lr
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1ce:	4291      	cmp	r1, r2
 800c1d0:	d1f9      	bne.n	800c1c6 <memcpy+0xe>
 800c1d2:	bd10      	pop	{r4, pc}
 800c1d4:	0000      	movs	r0, r0
	...

0800c1d8 <nan>:
 800c1d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c1e0 <nan+0x8>
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	00000000 	.word	0x00000000
 800c1e4:	7ff80000 	.word	0x7ff80000

0800c1e8 <nanf>:
 800c1e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c1f0 <nanf+0x8>
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	7fc00000 	.word	0x7fc00000

0800c1f4 <register_fini>:
 800c1f4:	4b02      	ldr	r3, [pc, #8]	@ (800c200 <register_fini+0xc>)
 800c1f6:	b113      	cbz	r3, 800c1fe <register_fini+0xa>
 800c1f8:	4802      	ldr	r0, [pc, #8]	@ (800c204 <register_fini+0x10>)
 800c1fa:	f000 b805 	b.w	800c208 <atexit>
 800c1fe:	4770      	bx	lr
 800c200:	00000000 	.word	0x00000000
 800c204:	0800e9bd 	.word	0x0800e9bd

0800c208 <atexit>:
 800c208:	2300      	movs	r3, #0
 800c20a:	4601      	mov	r1, r0
 800c20c:	461a      	mov	r2, r3
 800c20e:	4618      	mov	r0, r3
 800c210:	f002 bc1c 	b.w	800ea4c <__register_exitproc>

0800c214 <_malloc_trim_r>:
 800c214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c218:	4606      	mov	r6, r0
 800c21a:	2008      	movs	r0, #8
 800c21c:	4689      	mov	r9, r1
 800c21e:	f7ff ffb7 	bl	800c190 <sysconf>
 800c222:	4f24      	ldr	r7, [pc, #144]	@ (800c2b4 <_malloc_trim_r+0xa0>)
 800c224:	4680      	mov	r8, r0
 800c226:	4630      	mov	r0, r6
 800c228:	f7fe fe82 	bl	800af30 <__malloc_lock>
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	685d      	ldr	r5, [r3, #4]
 800c230:	f025 0503 	bic.w	r5, r5, #3
 800c234:	f1a5 0411 	sub.w	r4, r5, #17
 800c238:	eba4 0409 	sub.w	r4, r4, r9
 800c23c:	4444      	add	r4, r8
 800c23e:	fbb4 f4f8 	udiv	r4, r4, r8
 800c242:	3c01      	subs	r4, #1
 800c244:	fb08 f404 	mul.w	r4, r8, r4
 800c248:	45a0      	cmp	r8, r4
 800c24a:	dd05      	ble.n	800c258 <_malloc_trim_r+0x44>
 800c24c:	4630      	mov	r0, r6
 800c24e:	f7fe fe75 	bl	800af3c <__malloc_unlock>
 800c252:	2000      	movs	r0, #0
 800c254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c258:	2100      	movs	r1, #0
 800c25a:	4630      	mov	r0, r6
 800c25c:	f7ff ff48 	bl	800c0f0 <_sbrk_r>
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	442b      	add	r3, r5
 800c264:	4298      	cmp	r0, r3
 800c266:	d1f1      	bne.n	800c24c <_malloc_trim_r+0x38>
 800c268:	4261      	negs	r1, r4
 800c26a:	4630      	mov	r0, r6
 800c26c:	f7ff ff40 	bl	800c0f0 <_sbrk_r>
 800c270:	3001      	adds	r0, #1
 800c272:	d110      	bne.n	800c296 <_malloc_trim_r+0x82>
 800c274:	2100      	movs	r1, #0
 800c276:	4630      	mov	r0, r6
 800c278:	f7ff ff3a 	bl	800c0f0 <_sbrk_r>
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	1a83      	subs	r3, r0, r2
 800c280:	2b0f      	cmp	r3, #15
 800c282:	dde3      	ble.n	800c24c <_malloc_trim_r+0x38>
 800c284:	490c      	ldr	r1, [pc, #48]	@ (800c2b8 <_malloc_trim_r+0xa4>)
 800c286:	6809      	ldr	r1, [r1, #0]
 800c288:	1a40      	subs	r0, r0, r1
 800c28a:	490c      	ldr	r1, [pc, #48]	@ (800c2bc <_malloc_trim_r+0xa8>)
 800c28c:	f043 0301 	orr.w	r3, r3, #1
 800c290:	6008      	str	r0, [r1, #0]
 800c292:	6053      	str	r3, [r2, #4]
 800c294:	e7da      	b.n	800c24c <_malloc_trim_r+0x38>
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	4a08      	ldr	r2, [pc, #32]	@ (800c2bc <_malloc_trim_r+0xa8>)
 800c29a:	1b2d      	subs	r5, r5, r4
 800c29c:	f045 0501 	orr.w	r5, r5, #1
 800c2a0:	605d      	str	r5, [r3, #4]
 800c2a2:	6813      	ldr	r3, [r2, #0]
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	1b1b      	subs	r3, r3, r4
 800c2a8:	6013      	str	r3, [r2, #0]
 800c2aa:	f7fe fe47 	bl	800af3c <__malloc_unlock>
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	e7d0      	b.n	800c254 <_malloc_trim_r+0x40>
 800c2b2:	bf00      	nop
 800c2b4:	2000003c 	.word	0x2000003c
 800c2b8:	20000034 	.word	0x20000034
 800c2bc:	20000f90 	.word	0x20000f90

0800c2c0 <_free_r>:
 800c2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	460f      	mov	r7, r1
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	f000 80b1 	beq.w	800c42e <_free_r+0x16e>
 800c2cc:	f7fe fe30 	bl	800af30 <__malloc_lock>
 800c2d0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c2d4:	4d56      	ldr	r5, [pc, #344]	@ (800c430 <_free_r+0x170>)
 800c2d6:	f022 0001 	bic.w	r0, r2, #1
 800c2da:	f1a7 0308 	sub.w	r3, r7, #8
 800c2de:	eb03 0c00 	add.w	ip, r3, r0
 800c2e2:	68a9      	ldr	r1, [r5, #8]
 800c2e4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800c2e8:	4561      	cmp	r1, ip
 800c2ea:	f026 0603 	bic.w	r6, r6, #3
 800c2ee:	f002 0201 	and.w	r2, r2, #1
 800c2f2:	d11b      	bne.n	800c32c <_free_r+0x6c>
 800c2f4:	4406      	add	r6, r0
 800c2f6:	b93a      	cbnz	r2, 800c308 <_free_r+0x48>
 800c2f8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800c2fc:	1a9b      	subs	r3, r3, r2
 800c2fe:	4416      	add	r6, r2
 800c300:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800c304:	60ca      	str	r2, [r1, #12]
 800c306:	6091      	str	r1, [r2, #8]
 800c308:	f046 0201 	orr.w	r2, r6, #1
 800c30c:	605a      	str	r2, [r3, #4]
 800c30e:	60ab      	str	r3, [r5, #8]
 800c310:	4b48      	ldr	r3, [pc, #288]	@ (800c434 <_free_r+0x174>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	42b3      	cmp	r3, r6
 800c316:	d804      	bhi.n	800c322 <_free_r+0x62>
 800c318:	4b47      	ldr	r3, [pc, #284]	@ (800c438 <_free_r+0x178>)
 800c31a:	4620      	mov	r0, r4
 800c31c:	6819      	ldr	r1, [r3, #0]
 800c31e:	f7ff ff79 	bl	800c214 <_malloc_trim_r>
 800c322:	4620      	mov	r0, r4
 800c324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c328:	f7fe be08 	b.w	800af3c <__malloc_unlock>
 800c32c:	f8cc 6004 	str.w	r6, [ip, #4]
 800c330:	2a00      	cmp	r2, #0
 800c332:	d138      	bne.n	800c3a6 <_free_r+0xe6>
 800c334:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800c338:	1a5b      	subs	r3, r3, r1
 800c33a:	4408      	add	r0, r1
 800c33c:	6899      	ldr	r1, [r3, #8]
 800c33e:	f105 0708 	add.w	r7, r5, #8
 800c342:	42b9      	cmp	r1, r7
 800c344:	d031      	beq.n	800c3aa <_free_r+0xea>
 800c346:	68df      	ldr	r7, [r3, #12]
 800c348:	60cf      	str	r7, [r1, #12]
 800c34a:	60b9      	str	r1, [r7, #8]
 800c34c:	eb0c 0106 	add.w	r1, ip, r6
 800c350:	6849      	ldr	r1, [r1, #4]
 800c352:	07c9      	lsls	r1, r1, #31
 800c354:	d40b      	bmi.n	800c36e <_free_r+0xae>
 800c356:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800c35a:	4430      	add	r0, r6
 800c35c:	bb3a      	cbnz	r2, 800c3ae <_free_r+0xee>
 800c35e:	4e37      	ldr	r6, [pc, #220]	@ (800c43c <_free_r+0x17c>)
 800c360:	42b1      	cmp	r1, r6
 800c362:	d124      	bne.n	800c3ae <_free_r+0xee>
 800c364:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800c368:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f040 0101 	orr.w	r1, r0, #1
 800c372:	6059      	str	r1, [r3, #4]
 800c374:	5018      	str	r0, [r3, r0]
 800c376:	2a00      	cmp	r2, #0
 800c378:	d1d3      	bne.n	800c322 <_free_r+0x62>
 800c37a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800c37e:	d21b      	bcs.n	800c3b8 <_free_r+0xf8>
 800c380:	08c2      	lsrs	r2, r0, #3
 800c382:	2101      	movs	r1, #1
 800c384:	0940      	lsrs	r0, r0, #5
 800c386:	4081      	lsls	r1, r0
 800c388:	6868      	ldr	r0, [r5, #4]
 800c38a:	3201      	adds	r2, #1
 800c38c:	4301      	orrs	r1, r0
 800c38e:	6069      	str	r1, [r5, #4]
 800c390:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800c394:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800c398:	3908      	subs	r1, #8
 800c39a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c39e:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800c3a2:	60c3      	str	r3, [r0, #12]
 800c3a4:	e7bd      	b.n	800c322 <_free_r+0x62>
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	e7d0      	b.n	800c34c <_free_r+0x8c>
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	e7ce      	b.n	800c34c <_free_r+0x8c>
 800c3ae:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800c3b2:	60ce      	str	r6, [r1, #12]
 800c3b4:	60b1      	str	r1, [r6, #8]
 800c3b6:	e7da      	b.n	800c36e <_free_r+0xae>
 800c3b8:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800c3bc:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800c3c0:	d214      	bcs.n	800c3ec <_free_r+0x12c>
 800c3c2:	0982      	lsrs	r2, r0, #6
 800c3c4:	3238      	adds	r2, #56	@ 0x38
 800c3c6:	1c51      	adds	r1, r2, #1
 800c3c8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800c3cc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800c3d0:	428e      	cmp	r6, r1
 800c3d2:	d125      	bne.n	800c420 <_free_r+0x160>
 800c3d4:	2001      	movs	r0, #1
 800c3d6:	1092      	asrs	r2, r2, #2
 800c3d8:	fa00 f202 	lsl.w	r2, r0, r2
 800c3dc:	6868      	ldr	r0, [r5, #4]
 800c3de:	4302      	orrs	r2, r0
 800c3e0:	606a      	str	r2, [r5, #4]
 800c3e2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800c3e6:	60b3      	str	r3, [r6, #8]
 800c3e8:	60cb      	str	r3, [r1, #12]
 800c3ea:	e79a      	b.n	800c322 <_free_r+0x62>
 800c3ec:	2a14      	cmp	r2, #20
 800c3ee:	d801      	bhi.n	800c3f4 <_free_r+0x134>
 800c3f0:	325b      	adds	r2, #91	@ 0x5b
 800c3f2:	e7e8      	b.n	800c3c6 <_free_r+0x106>
 800c3f4:	2a54      	cmp	r2, #84	@ 0x54
 800c3f6:	d802      	bhi.n	800c3fe <_free_r+0x13e>
 800c3f8:	0b02      	lsrs	r2, r0, #12
 800c3fa:	326e      	adds	r2, #110	@ 0x6e
 800c3fc:	e7e3      	b.n	800c3c6 <_free_r+0x106>
 800c3fe:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800c402:	d802      	bhi.n	800c40a <_free_r+0x14a>
 800c404:	0bc2      	lsrs	r2, r0, #15
 800c406:	3277      	adds	r2, #119	@ 0x77
 800c408:	e7dd      	b.n	800c3c6 <_free_r+0x106>
 800c40a:	f240 5154 	movw	r1, #1364	@ 0x554
 800c40e:	428a      	cmp	r2, r1
 800c410:	bf9a      	itte	ls
 800c412:	0c82      	lsrls	r2, r0, #18
 800c414:	327c      	addls	r2, #124	@ 0x7c
 800c416:	227e      	movhi	r2, #126	@ 0x7e
 800c418:	e7d5      	b.n	800c3c6 <_free_r+0x106>
 800c41a:	6889      	ldr	r1, [r1, #8]
 800c41c:	428e      	cmp	r6, r1
 800c41e:	d004      	beq.n	800c42a <_free_r+0x16a>
 800c420:	684a      	ldr	r2, [r1, #4]
 800c422:	f022 0203 	bic.w	r2, r2, #3
 800c426:	4282      	cmp	r2, r0
 800c428:	d8f7      	bhi.n	800c41a <_free_r+0x15a>
 800c42a:	68ce      	ldr	r6, [r1, #12]
 800c42c:	e7d9      	b.n	800c3e2 <_free_r+0x122>
 800c42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c430:	2000003c 	.word	0x2000003c
 800c434:	20000038 	.word	0x20000038
 800c438:	20000fc0 	.word	0x20000fc0
 800c43c:	20000044 	.word	0x20000044

0800c440 <rshift>:
 800c440:	6903      	ldr	r3, [r0, #16]
 800c442:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c446:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c44a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c44e:	f100 0414 	add.w	r4, r0, #20
 800c452:	dd45      	ble.n	800c4e0 <rshift+0xa0>
 800c454:	f011 011f 	ands.w	r1, r1, #31
 800c458:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c45c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c460:	d10c      	bne.n	800c47c <rshift+0x3c>
 800c462:	f100 0710 	add.w	r7, r0, #16
 800c466:	4629      	mov	r1, r5
 800c468:	42b1      	cmp	r1, r6
 800c46a:	d334      	bcc.n	800c4d6 <rshift+0x96>
 800c46c:	1a9b      	subs	r3, r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	1eea      	subs	r2, r5, #3
 800c472:	4296      	cmp	r6, r2
 800c474:	bf38      	it	cc
 800c476:	2300      	movcc	r3, #0
 800c478:	4423      	add	r3, r4
 800c47a:	e015      	b.n	800c4a8 <rshift+0x68>
 800c47c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c480:	f1c1 0820 	rsb	r8, r1, #32
 800c484:	40cf      	lsrs	r7, r1
 800c486:	f105 0e04 	add.w	lr, r5, #4
 800c48a:	46a1      	mov	r9, r4
 800c48c:	4576      	cmp	r6, lr
 800c48e:	46f4      	mov	ip, lr
 800c490:	d815      	bhi.n	800c4be <rshift+0x7e>
 800c492:	1a9a      	subs	r2, r3, r2
 800c494:	0092      	lsls	r2, r2, #2
 800c496:	3a04      	subs	r2, #4
 800c498:	3501      	adds	r5, #1
 800c49a:	42ae      	cmp	r6, r5
 800c49c:	bf38      	it	cc
 800c49e:	2200      	movcc	r2, #0
 800c4a0:	18a3      	adds	r3, r4, r2
 800c4a2:	50a7      	str	r7, [r4, r2]
 800c4a4:	b107      	cbz	r7, 800c4a8 <rshift+0x68>
 800c4a6:	3304      	adds	r3, #4
 800c4a8:	1b1a      	subs	r2, r3, r4
 800c4aa:	42a3      	cmp	r3, r4
 800c4ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4b0:	bf08      	it	eq
 800c4b2:	2300      	moveq	r3, #0
 800c4b4:	6102      	str	r2, [r0, #16]
 800c4b6:	bf08      	it	eq
 800c4b8:	6143      	streq	r3, [r0, #20]
 800c4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4be:	f8dc c000 	ldr.w	ip, [ip]
 800c4c2:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4c6:	ea4c 0707 	orr.w	r7, ip, r7
 800c4ca:	f849 7b04 	str.w	r7, [r9], #4
 800c4ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4d2:	40cf      	lsrs	r7, r1
 800c4d4:	e7da      	b.n	800c48c <rshift+0x4c>
 800c4d6:	f851 cb04 	ldr.w	ip, [r1], #4
 800c4da:	f847 cf04 	str.w	ip, [r7, #4]!
 800c4de:	e7c3      	b.n	800c468 <rshift+0x28>
 800c4e0:	4623      	mov	r3, r4
 800c4e2:	e7e1      	b.n	800c4a8 <rshift+0x68>

0800c4e4 <__hexdig_fun>:
 800c4e4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c4e8:	2b09      	cmp	r3, #9
 800c4ea:	d802      	bhi.n	800c4f2 <__hexdig_fun+0xe>
 800c4ec:	3820      	subs	r0, #32
 800c4ee:	b2c0      	uxtb	r0, r0
 800c4f0:	4770      	bx	lr
 800c4f2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c4f6:	2b05      	cmp	r3, #5
 800c4f8:	d801      	bhi.n	800c4fe <__hexdig_fun+0x1a>
 800c4fa:	3847      	subs	r0, #71	@ 0x47
 800c4fc:	e7f7      	b.n	800c4ee <__hexdig_fun+0xa>
 800c4fe:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c502:	2b05      	cmp	r3, #5
 800c504:	d801      	bhi.n	800c50a <__hexdig_fun+0x26>
 800c506:	3827      	subs	r0, #39	@ 0x27
 800c508:	e7f1      	b.n	800c4ee <__hexdig_fun+0xa>
 800c50a:	2000      	movs	r0, #0
 800c50c:	4770      	bx	lr
	...

0800c510 <__gethex>:
 800c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	b085      	sub	sp, #20
 800c516:	468a      	mov	sl, r1
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	680b      	ldr	r3, [r1, #0]
 800c51c:	9001      	str	r0, [sp, #4]
 800c51e:	4690      	mov	r8, r2
 800c520:	1c9c      	adds	r4, r3, #2
 800c522:	46a1      	mov	r9, r4
 800c524:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c528:	2830      	cmp	r0, #48	@ 0x30
 800c52a:	d0fa      	beq.n	800c522 <__gethex+0x12>
 800c52c:	eba9 0303 	sub.w	r3, r9, r3
 800c530:	f1a3 0b02 	sub.w	fp, r3, #2
 800c534:	f7ff ffd6 	bl	800c4e4 <__hexdig_fun>
 800c538:	4605      	mov	r5, r0
 800c53a:	2800      	cmp	r0, #0
 800c53c:	d168      	bne.n	800c610 <__gethex+0x100>
 800c53e:	49a0      	ldr	r1, [pc, #640]	@ (800c7c0 <__gethex+0x2b0>)
 800c540:	2201      	movs	r2, #1
 800c542:	4648      	mov	r0, r9
 800c544:	f7ff fd34 	bl	800bfb0 <strncmp>
 800c548:	4607      	mov	r7, r0
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d167      	bne.n	800c61e <__gethex+0x10e>
 800c54e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c552:	4626      	mov	r6, r4
 800c554:	f7ff ffc6 	bl	800c4e4 <__hexdig_fun>
 800c558:	2800      	cmp	r0, #0
 800c55a:	d062      	beq.n	800c622 <__gethex+0x112>
 800c55c:	4623      	mov	r3, r4
 800c55e:	7818      	ldrb	r0, [r3, #0]
 800c560:	2830      	cmp	r0, #48	@ 0x30
 800c562:	4699      	mov	r9, r3
 800c564:	f103 0301 	add.w	r3, r3, #1
 800c568:	d0f9      	beq.n	800c55e <__gethex+0x4e>
 800c56a:	f7ff ffbb 	bl	800c4e4 <__hexdig_fun>
 800c56e:	fab0 f580 	clz	r5, r0
 800c572:	096d      	lsrs	r5, r5, #5
 800c574:	f04f 0b01 	mov.w	fp, #1
 800c578:	464a      	mov	r2, r9
 800c57a:	4616      	mov	r6, r2
 800c57c:	3201      	adds	r2, #1
 800c57e:	7830      	ldrb	r0, [r6, #0]
 800c580:	f7ff ffb0 	bl	800c4e4 <__hexdig_fun>
 800c584:	2800      	cmp	r0, #0
 800c586:	d1f8      	bne.n	800c57a <__gethex+0x6a>
 800c588:	498d      	ldr	r1, [pc, #564]	@ (800c7c0 <__gethex+0x2b0>)
 800c58a:	2201      	movs	r2, #1
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7ff fd0f 	bl	800bfb0 <strncmp>
 800c592:	2800      	cmp	r0, #0
 800c594:	d13f      	bne.n	800c616 <__gethex+0x106>
 800c596:	b944      	cbnz	r4, 800c5aa <__gethex+0x9a>
 800c598:	1c74      	adds	r4, r6, #1
 800c59a:	4622      	mov	r2, r4
 800c59c:	4616      	mov	r6, r2
 800c59e:	3201      	adds	r2, #1
 800c5a0:	7830      	ldrb	r0, [r6, #0]
 800c5a2:	f7ff ff9f 	bl	800c4e4 <__hexdig_fun>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d1f8      	bne.n	800c59c <__gethex+0x8c>
 800c5aa:	1ba4      	subs	r4, r4, r6
 800c5ac:	00a7      	lsls	r7, r4, #2
 800c5ae:	7833      	ldrb	r3, [r6, #0]
 800c5b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c5b4:	2b50      	cmp	r3, #80	@ 0x50
 800c5b6:	d13e      	bne.n	800c636 <__gethex+0x126>
 800c5b8:	7873      	ldrb	r3, [r6, #1]
 800c5ba:	2b2b      	cmp	r3, #43	@ 0x2b
 800c5bc:	d033      	beq.n	800c626 <__gethex+0x116>
 800c5be:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5c0:	d034      	beq.n	800c62c <__gethex+0x11c>
 800c5c2:	1c71      	adds	r1, r6, #1
 800c5c4:	2400      	movs	r4, #0
 800c5c6:	7808      	ldrb	r0, [r1, #0]
 800c5c8:	f7ff ff8c 	bl	800c4e4 <__hexdig_fun>
 800c5cc:	1e43      	subs	r3, r0, #1
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	2b18      	cmp	r3, #24
 800c5d2:	d830      	bhi.n	800c636 <__gethex+0x126>
 800c5d4:	f1a0 0210 	sub.w	r2, r0, #16
 800c5d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c5dc:	f7ff ff82 	bl	800c4e4 <__hexdig_fun>
 800c5e0:	f100 3cff 	add.w	ip, r0, #4294967295
 800c5e4:	fa5f fc8c 	uxtb.w	ip, ip
 800c5e8:	f1bc 0f18 	cmp.w	ip, #24
 800c5ec:	f04f 030a 	mov.w	r3, #10
 800c5f0:	d91e      	bls.n	800c630 <__gethex+0x120>
 800c5f2:	b104      	cbz	r4, 800c5f6 <__gethex+0xe6>
 800c5f4:	4252      	negs	r2, r2
 800c5f6:	4417      	add	r7, r2
 800c5f8:	f8ca 1000 	str.w	r1, [sl]
 800c5fc:	b1ed      	cbz	r5, 800c63a <__gethex+0x12a>
 800c5fe:	f1bb 0f00 	cmp.w	fp, #0
 800c602:	bf0c      	ite	eq
 800c604:	2506      	moveq	r5, #6
 800c606:	2500      	movne	r5, #0
 800c608:	4628      	mov	r0, r5
 800c60a:	b005      	add	sp, #20
 800c60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c610:	2500      	movs	r5, #0
 800c612:	462c      	mov	r4, r5
 800c614:	e7b0      	b.n	800c578 <__gethex+0x68>
 800c616:	2c00      	cmp	r4, #0
 800c618:	d1c7      	bne.n	800c5aa <__gethex+0x9a>
 800c61a:	4627      	mov	r7, r4
 800c61c:	e7c7      	b.n	800c5ae <__gethex+0x9e>
 800c61e:	464e      	mov	r6, r9
 800c620:	462f      	mov	r7, r5
 800c622:	2501      	movs	r5, #1
 800c624:	e7c3      	b.n	800c5ae <__gethex+0x9e>
 800c626:	2400      	movs	r4, #0
 800c628:	1cb1      	adds	r1, r6, #2
 800c62a:	e7cc      	b.n	800c5c6 <__gethex+0xb6>
 800c62c:	2401      	movs	r4, #1
 800c62e:	e7fb      	b.n	800c628 <__gethex+0x118>
 800c630:	fb03 0002 	mla	r0, r3, r2, r0
 800c634:	e7ce      	b.n	800c5d4 <__gethex+0xc4>
 800c636:	4631      	mov	r1, r6
 800c638:	e7de      	b.n	800c5f8 <__gethex+0xe8>
 800c63a:	eba6 0309 	sub.w	r3, r6, r9
 800c63e:	3b01      	subs	r3, #1
 800c640:	4629      	mov	r1, r5
 800c642:	2b07      	cmp	r3, #7
 800c644:	dc0a      	bgt.n	800c65c <__gethex+0x14c>
 800c646:	9801      	ldr	r0, [sp, #4]
 800c648:	f000 fa45 	bl	800cad6 <_Balloc>
 800c64c:	4604      	mov	r4, r0
 800c64e:	b940      	cbnz	r0, 800c662 <__gethex+0x152>
 800c650:	4b5c      	ldr	r3, [pc, #368]	@ (800c7c4 <__gethex+0x2b4>)
 800c652:	4602      	mov	r2, r0
 800c654:	21e4      	movs	r1, #228	@ 0xe4
 800c656:	485c      	ldr	r0, [pc, #368]	@ (800c7c8 <__gethex+0x2b8>)
 800c658:	f002 fa38 	bl	800eacc <__assert_func>
 800c65c:	3101      	adds	r1, #1
 800c65e:	105b      	asrs	r3, r3, #1
 800c660:	e7ef      	b.n	800c642 <__gethex+0x132>
 800c662:	f100 0a14 	add.w	sl, r0, #20
 800c666:	2300      	movs	r3, #0
 800c668:	4655      	mov	r5, sl
 800c66a:	469b      	mov	fp, r3
 800c66c:	45b1      	cmp	r9, r6
 800c66e:	d337      	bcc.n	800c6e0 <__gethex+0x1d0>
 800c670:	f845 bb04 	str.w	fp, [r5], #4
 800c674:	eba5 050a 	sub.w	r5, r5, sl
 800c678:	10ad      	asrs	r5, r5, #2
 800c67a:	6125      	str	r5, [r4, #16]
 800c67c:	4658      	mov	r0, fp
 800c67e:	f000 fae9 	bl	800cc54 <__hi0bits>
 800c682:	016d      	lsls	r5, r5, #5
 800c684:	f8d8 6000 	ldr.w	r6, [r8]
 800c688:	1a2d      	subs	r5, r5, r0
 800c68a:	42b5      	cmp	r5, r6
 800c68c:	dd54      	ble.n	800c738 <__gethex+0x228>
 800c68e:	1bad      	subs	r5, r5, r6
 800c690:	4629      	mov	r1, r5
 800c692:	4620      	mov	r0, r4
 800c694:	f000 fe5b 	bl	800d34e <__any_on>
 800c698:	4681      	mov	r9, r0
 800c69a:	b178      	cbz	r0, 800c6bc <__gethex+0x1ac>
 800c69c:	1e6b      	subs	r3, r5, #1
 800c69e:	1159      	asrs	r1, r3, #5
 800c6a0:	f003 021f 	and.w	r2, r3, #31
 800c6a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6a8:	f04f 0901 	mov.w	r9, #1
 800c6ac:	fa09 f202 	lsl.w	r2, r9, r2
 800c6b0:	420a      	tst	r2, r1
 800c6b2:	d003      	beq.n	800c6bc <__gethex+0x1ac>
 800c6b4:	454b      	cmp	r3, r9
 800c6b6:	dc36      	bgt.n	800c726 <__gethex+0x216>
 800c6b8:	f04f 0902 	mov.w	r9, #2
 800c6bc:	4629      	mov	r1, r5
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f7ff febe 	bl	800c440 <rshift>
 800c6c4:	442f      	add	r7, r5
 800c6c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6ca:	42bb      	cmp	r3, r7
 800c6cc:	da42      	bge.n	800c754 <__gethex+0x244>
 800c6ce:	9801      	ldr	r0, [sp, #4]
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	f000 fa25 	bl	800cb20 <_Bfree>
 800c6d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6d8:	2300      	movs	r3, #0
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	25a3      	movs	r5, #163	@ 0xa3
 800c6de:	e793      	b.n	800c608 <__gethex+0xf8>
 800c6e0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c6e4:	2a2e      	cmp	r2, #46	@ 0x2e
 800c6e6:	d012      	beq.n	800c70e <__gethex+0x1fe>
 800c6e8:	2b20      	cmp	r3, #32
 800c6ea:	d104      	bne.n	800c6f6 <__gethex+0x1e6>
 800c6ec:	f845 bb04 	str.w	fp, [r5], #4
 800c6f0:	f04f 0b00 	mov.w	fp, #0
 800c6f4:	465b      	mov	r3, fp
 800c6f6:	7830      	ldrb	r0, [r6, #0]
 800c6f8:	9303      	str	r3, [sp, #12]
 800c6fa:	f7ff fef3 	bl	800c4e4 <__hexdig_fun>
 800c6fe:	9b03      	ldr	r3, [sp, #12]
 800c700:	f000 000f 	and.w	r0, r0, #15
 800c704:	4098      	lsls	r0, r3
 800c706:	ea4b 0b00 	orr.w	fp, fp, r0
 800c70a:	3304      	adds	r3, #4
 800c70c:	e7ae      	b.n	800c66c <__gethex+0x15c>
 800c70e:	45b1      	cmp	r9, r6
 800c710:	d8ea      	bhi.n	800c6e8 <__gethex+0x1d8>
 800c712:	492b      	ldr	r1, [pc, #172]	@ (800c7c0 <__gethex+0x2b0>)
 800c714:	9303      	str	r3, [sp, #12]
 800c716:	2201      	movs	r2, #1
 800c718:	4630      	mov	r0, r6
 800c71a:	f7ff fc49 	bl	800bfb0 <strncmp>
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	2800      	cmp	r0, #0
 800c722:	d1e1      	bne.n	800c6e8 <__gethex+0x1d8>
 800c724:	e7a2      	b.n	800c66c <__gethex+0x15c>
 800c726:	1ea9      	subs	r1, r5, #2
 800c728:	4620      	mov	r0, r4
 800c72a:	f000 fe10 	bl	800d34e <__any_on>
 800c72e:	2800      	cmp	r0, #0
 800c730:	d0c2      	beq.n	800c6b8 <__gethex+0x1a8>
 800c732:	f04f 0903 	mov.w	r9, #3
 800c736:	e7c1      	b.n	800c6bc <__gethex+0x1ac>
 800c738:	da09      	bge.n	800c74e <__gethex+0x23e>
 800c73a:	1b75      	subs	r5, r6, r5
 800c73c:	4621      	mov	r1, r4
 800c73e:	9801      	ldr	r0, [sp, #4]
 800c740:	462a      	mov	r2, r5
 800c742:	f000 fbcb 	bl	800cedc <__lshift>
 800c746:	1b7f      	subs	r7, r7, r5
 800c748:	4604      	mov	r4, r0
 800c74a:	f100 0a14 	add.w	sl, r0, #20
 800c74e:	f04f 0900 	mov.w	r9, #0
 800c752:	e7b8      	b.n	800c6c6 <__gethex+0x1b6>
 800c754:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c758:	42bd      	cmp	r5, r7
 800c75a:	dd6f      	ble.n	800c83c <__gethex+0x32c>
 800c75c:	1bed      	subs	r5, r5, r7
 800c75e:	42ae      	cmp	r6, r5
 800c760:	dc34      	bgt.n	800c7cc <__gethex+0x2bc>
 800c762:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c766:	2b02      	cmp	r3, #2
 800c768:	d022      	beq.n	800c7b0 <__gethex+0x2a0>
 800c76a:	2b03      	cmp	r3, #3
 800c76c:	d024      	beq.n	800c7b8 <__gethex+0x2a8>
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d115      	bne.n	800c79e <__gethex+0x28e>
 800c772:	42ae      	cmp	r6, r5
 800c774:	d113      	bne.n	800c79e <__gethex+0x28e>
 800c776:	2e01      	cmp	r6, #1
 800c778:	d10b      	bne.n	800c792 <__gethex+0x282>
 800c77a:	9a02      	ldr	r2, [sp, #8]
 800c77c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c780:	6013      	str	r3, [r2, #0]
 800c782:	2301      	movs	r3, #1
 800c784:	6123      	str	r3, [r4, #16]
 800c786:	f8ca 3000 	str.w	r3, [sl]
 800c78a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c78c:	2562      	movs	r5, #98	@ 0x62
 800c78e:	601c      	str	r4, [r3, #0]
 800c790:	e73a      	b.n	800c608 <__gethex+0xf8>
 800c792:	1e71      	subs	r1, r6, #1
 800c794:	4620      	mov	r0, r4
 800c796:	f000 fdda 	bl	800d34e <__any_on>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d1ed      	bne.n	800c77a <__gethex+0x26a>
 800c79e:	9801      	ldr	r0, [sp, #4]
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	f000 f9bd 	bl	800cb20 <_Bfree>
 800c7a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	6013      	str	r3, [r2, #0]
 800c7ac:	2550      	movs	r5, #80	@ 0x50
 800c7ae:	e72b      	b.n	800c608 <__gethex+0xf8>
 800c7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1f3      	bne.n	800c79e <__gethex+0x28e>
 800c7b6:	e7e0      	b.n	800c77a <__gethex+0x26a>
 800c7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1dd      	bne.n	800c77a <__gethex+0x26a>
 800c7be:	e7ee      	b.n	800c79e <__gethex+0x28e>
 800c7c0:	08011a78 	.word	0x08011a78
 800c7c4:	08011a82 	.word	0x08011a82
 800c7c8:	08011a93 	.word	0x08011a93
 800c7cc:	1e6f      	subs	r7, r5, #1
 800c7ce:	f1b9 0f00 	cmp.w	r9, #0
 800c7d2:	d130      	bne.n	800c836 <__gethex+0x326>
 800c7d4:	b127      	cbz	r7, 800c7e0 <__gethex+0x2d0>
 800c7d6:	4639      	mov	r1, r7
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f000 fdb8 	bl	800d34e <__any_on>
 800c7de:	4681      	mov	r9, r0
 800c7e0:	117a      	asrs	r2, r7, #5
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c7e8:	f007 071f 	and.w	r7, r7, #31
 800c7ec:	40bb      	lsls	r3, r7
 800c7ee:	4213      	tst	r3, r2
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	bf18      	it	ne
 800c7f6:	f049 0902 	orrne.w	r9, r9, #2
 800c7fa:	f7ff fe21 	bl	800c440 <rshift>
 800c7fe:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c802:	1b76      	subs	r6, r6, r5
 800c804:	2502      	movs	r5, #2
 800c806:	f1b9 0f00 	cmp.w	r9, #0
 800c80a:	d047      	beq.n	800c89c <__gethex+0x38c>
 800c80c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c810:	2b02      	cmp	r3, #2
 800c812:	d015      	beq.n	800c840 <__gethex+0x330>
 800c814:	2b03      	cmp	r3, #3
 800c816:	d017      	beq.n	800c848 <__gethex+0x338>
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d109      	bne.n	800c830 <__gethex+0x320>
 800c81c:	f019 0f02 	tst.w	r9, #2
 800c820:	d006      	beq.n	800c830 <__gethex+0x320>
 800c822:	f8da 3000 	ldr.w	r3, [sl]
 800c826:	ea49 0903 	orr.w	r9, r9, r3
 800c82a:	f019 0f01 	tst.w	r9, #1
 800c82e:	d10e      	bne.n	800c84e <__gethex+0x33e>
 800c830:	f045 0510 	orr.w	r5, r5, #16
 800c834:	e032      	b.n	800c89c <__gethex+0x38c>
 800c836:	f04f 0901 	mov.w	r9, #1
 800c83a:	e7d1      	b.n	800c7e0 <__gethex+0x2d0>
 800c83c:	2501      	movs	r5, #1
 800c83e:	e7e2      	b.n	800c806 <__gethex+0x2f6>
 800c840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c842:	f1c3 0301 	rsb	r3, r3, #1
 800c846:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d0f0      	beq.n	800c830 <__gethex+0x320>
 800c84e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c852:	f104 0314 	add.w	r3, r4, #20
 800c856:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c85a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c85e:	f04f 0c00 	mov.w	ip, #0
 800c862:	4618      	mov	r0, r3
 800c864:	f853 2b04 	ldr.w	r2, [r3], #4
 800c868:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c86c:	d01b      	beq.n	800c8a6 <__gethex+0x396>
 800c86e:	3201      	adds	r2, #1
 800c870:	6002      	str	r2, [r0, #0]
 800c872:	2d02      	cmp	r5, #2
 800c874:	f104 0314 	add.w	r3, r4, #20
 800c878:	d13c      	bne.n	800c8f4 <__gethex+0x3e4>
 800c87a:	f8d8 2000 	ldr.w	r2, [r8]
 800c87e:	3a01      	subs	r2, #1
 800c880:	42b2      	cmp	r2, r6
 800c882:	d109      	bne.n	800c898 <__gethex+0x388>
 800c884:	1171      	asrs	r1, r6, #5
 800c886:	2201      	movs	r2, #1
 800c888:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c88c:	f006 061f 	and.w	r6, r6, #31
 800c890:	fa02 f606 	lsl.w	r6, r2, r6
 800c894:	421e      	tst	r6, r3
 800c896:	d13a      	bne.n	800c90e <__gethex+0x3fe>
 800c898:	f045 0520 	orr.w	r5, r5, #32
 800c89c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c89e:	601c      	str	r4, [r3, #0]
 800c8a0:	9b02      	ldr	r3, [sp, #8]
 800c8a2:	601f      	str	r7, [r3, #0]
 800c8a4:	e6b0      	b.n	800c608 <__gethex+0xf8>
 800c8a6:	4299      	cmp	r1, r3
 800c8a8:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8ac:	d8d9      	bhi.n	800c862 <__gethex+0x352>
 800c8ae:	68a3      	ldr	r3, [r4, #8]
 800c8b0:	459b      	cmp	fp, r3
 800c8b2:	db17      	blt.n	800c8e4 <__gethex+0x3d4>
 800c8b4:	6861      	ldr	r1, [r4, #4]
 800c8b6:	9801      	ldr	r0, [sp, #4]
 800c8b8:	3101      	adds	r1, #1
 800c8ba:	f000 f90c 	bl	800cad6 <_Balloc>
 800c8be:	4681      	mov	r9, r0
 800c8c0:	b918      	cbnz	r0, 800c8ca <__gethex+0x3ba>
 800c8c2:	4b1a      	ldr	r3, [pc, #104]	@ (800c92c <__gethex+0x41c>)
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	2184      	movs	r1, #132	@ 0x84
 800c8c8:	e6c5      	b.n	800c656 <__gethex+0x146>
 800c8ca:	6922      	ldr	r2, [r4, #16]
 800c8cc:	3202      	adds	r2, #2
 800c8ce:	f104 010c 	add.w	r1, r4, #12
 800c8d2:	0092      	lsls	r2, r2, #2
 800c8d4:	300c      	adds	r0, #12
 800c8d6:	f7ff fc6f 	bl	800c1b8 <memcpy>
 800c8da:	4621      	mov	r1, r4
 800c8dc:	9801      	ldr	r0, [sp, #4]
 800c8de:	f000 f91f 	bl	800cb20 <_Bfree>
 800c8e2:	464c      	mov	r4, r9
 800c8e4:	6923      	ldr	r3, [r4, #16]
 800c8e6:	1c5a      	adds	r2, r3, #1
 800c8e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8ec:	6122      	str	r2, [r4, #16]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	615a      	str	r2, [r3, #20]
 800c8f2:	e7be      	b.n	800c872 <__gethex+0x362>
 800c8f4:	6922      	ldr	r2, [r4, #16]
 800c8f6:	455a      	cmp	r2, fp
 800c8f8:	dd0b      	ble.n	800c912 <__gethex+0x402>
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f7ff fd9f 	bl	800c440 <rshift>
 800c902:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c906:	3701      	adds	r7, #1
 800c908:	42bb      	cmp	r3, r7
 800c90a:	f6ff aee0 	blt.w	800c6ce <__gethex+0x1be>
 800c90e:	2501      	movs	r5, #1
 800c910:	e7c2      	b.n	800c898 <__gethex+0x388>
 800c912:	f016 061f 	ands.w	r6, r6, #31
 800c916:	d0fa      	beq.n	800c90e <__gethex+0x3fe>
 800c918:	4453      	add	r3, sl
 800c91a:	f1c6 0620 	rsb	r6, r6, #32
 800c91e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c922:	f000 f997 	bl	800cc54 <__hi0bits>
 800c926:	42b0      	cmp	r0, r6
 800c928:	dbe7      	blt.n	800c8fa <__gethex+0x3ea>
 800c92a:	e7f0      	b.n	800c90e <__gethex+0x3fe>
 800c92c:	08011a82 	.word	0x08011a82

0800c930 <L_shift>:
 800c930:	f1c2 0208 	rsb	r2, r2, #8
 800c934:	0092      	lsls	r2, r2, #2
 800c936:	b570      	push	{r4, r5, r6, lr}
 800c938:	f1c2 0620 	rsb	r6, r2, #32
 800c93c:	6843      	ldr	r3, [r0, #4]
 800c93e:	6804      	ldr	r4, [r0, #0]
 800c940:	fa03 f506 	lsl.w	r5, r3, r6
 800c944:	432c      	orrs	r4, r5
 800c946:	40d3      	lsrs	r3, r2
 800c948:	6004      	str	r4, [r0, #0]
 800c94a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c94e:	4288      	cmp	r0, r1
 800c950:	d3f4      	bcc.n	800c93c <L_shift+0xc>
 800c952:	bd70      	pop	{r4, r5, r6, pc}

0800c954 <__match>:
 800c954:	b530      	push	{r4, r5, lr}
 800c956:	6803      	ldr	r3, [r0, #0]
 800c958:	3301      	adds	r3, #1
 800c95a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c95e:	b914      	cbnz	r4, 800c966 <__match+0x12>
 800c960:	6003      	str	r3, [r0, #0]
 800c962:	2001      	movs	r0, #1
 800c964:	bd30      	pop	{r4, r5, pc}
 800c966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c96a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c96e:	2d19      	cmp	r5, #25
 800c970:	bf98      	it	ls
 800c972:	3220      	addls	r2, #32
 800c974:	42a2      	cmp	r2, r4
 800c976:	d0f0      	beq.n	800c95a <__match+0x6>
 800c978:	2000      	movs	r0, #0
 800c97a:	e7f3      	b.n	800c964 <__match+0x10>

0800c97c <__hexnan>:
 800c97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	680b      	ldr	r3, [r1, #0]
 800c982:	6801      	ldr	r1, [r0, #0]
 800c984:	115e      	asrs	r6, r3, #5
 800c986:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c98a:	f013 031f 	ands.w	r3, r3, #31
 800c98e:	b087      	sub	sp, #28
 800c990:	bf18      	it	ne
 800c992:	3604      	addne	r6, #4
 800c994:	2500      	movs	r5, #0
 800c996:	1f37      	subs	r7, r6, #4
 800c998:	4682      	mov	sl, r0
 800c99a:	4690      	mov	r8, r2
 800c99c:	9301      	str	r3, [sp, #4]
 800c99e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9a2:	46b9      	mov	r9, r7
 800c9a4:	463c      	mov	r4, r7
 800c9a6:	9502      	str	r5, [sp, #8]
 800c9a8:	46ab      	mov	fp, r5
 800c9aa:	784a      	ldrb	r2, [r1, #1]
 800c9ac:	1c4b      	adds	r3, r1, #1
 800c9ae:	9303      	str	r3, [sp, #12]
 800c9b0:	b342      	cbz	r2, 800ca04 <__hexnan+0x88>
 800c9b2:	4610      	mov	r0, r2
 800c9b4:	9105      	str	r1, [sp, #20]
 800c9b6:	9204      	str	r2, [sp, #16]
 800c9b8:	f7ff fd94 	bl	800c4e4 <__hexdig_fun>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d151      	bne.n	800ca64 <__hexnan+0xe8>
 800c9c0:	9a04      	ldr	r2, [sp, #16]
 800c9c2:	9905      	ldr	r1, [sp, #20]
 800c9c4:	2a20      	cmp	r2, #32
 800c9c6:	d818      	bhi.n	800c9fa <__hexnan+0x7e>
 800c9c8:	9b02      	ldr	r3, [sp, #8]
 800c9ca:	459b      	cmp	fp, r3
 800c9cc:	dd13      	ble.n	800c9f6 <__hexnan+0x7a>
 800c9ce:	454c      	cmp	r4, r9
 800c9d0:	d206      	bcs.n	800c9e0 <__hexnan+0x64>
 800c9d2:	2d07      	cmp	r5, #7
 800c9d4:	dc04      	bgt.n	800c9e0 <__hexnan+0x64>
 800c9d6:	462a      	mov	r2, r5
 800c9d8:	4649      	mov	r1, r9
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f7ff ffa8 	bl	800c930 <L_shift>
 800c9e0:	4544      	cmp	r4, r8
 800c9e2:	d952      	bls.n	800ca8a <__hexnan+0x10e>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f1a4 0904 	sub.w	r9, r4, #4
 800c9ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9ee:	f8cd b008 	str.w	fp, [sp, #8]
 800c9f2:	464c      	mov	r4, r9
 800c9f4:	461d      	mov	r5, r3
 800c9f6:	9903      	ldr	r1, [sp, #12]
 800c9f8:	e7d7      	b.n	800c9aa <__hexnan+0x2e>
 800c9fa:	2a29      	cmp	r2, #41	@ 0x29
 800c9fc:	d157      	bne.n	800caae <__hexnan+0x132>
 800c9fe:	3102      	adds	r1, #2
 800ca00:	f8ca 1000 	str.w	r1, [sl]
 800ca04:	f1bb 0f00 	cmp.w	fp, #0
 800ca08:	d051      	beq.n	800caae <__hexnan+0x132>
 800ca0a:	454c      	cmp	r4, r9
 800ca0c:	d206      	bcs.n	800ca1c <__hexnan+0xa0>
 800ca0e:	2d07      	cmp	r5, #7
 800ca10:	dc04      	bgt.n	800ca1c <__hexnan+0xa0>
 800ca12:	462a      	mov	r2, r5
 800ca14:	4649      	mov	r1, r9
 800ca16:	4620      	mov	r0, r4
 800ca18:	f7ff ff8a 	bl	800c930 <L_shift>
 800ca1c:	4544      	cmp	r4, r8
 800ca1e:	d936      	bls.n	800ca8e <__hexnan+0x112>
 800ca20:	f1a8 0204 	sub.w	r2, r8, #4
 800ca24:	4623      	mov	r3, r4
 800ca26:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca2a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca2e:	429f      	cmp	r7, r3
 800ca30:	d2f9      	bcs.n	800ca26 <__hexnan+0xaa>
 800ca32:	1b3b      	subs	r3, r7, r4
 800ca34:	f023 0303 	bic.w	r3, r3, #3
 800ca38:	3304      	adds	r3, #4
 800ca3a:	3401      	adds	r4, #1
 800ca3c:	3e03      	subs	r6, #3
 800ca3e:	42b4      	cmp	r4, r6
 800ca40:	bf88      	it	hi
 800ca42:	2304      	movhi	r3, #4
 800ca44:	4443      	add	r3, r8
 800ca46:	2200      	movs	r2, #0
 800ca48:	f843 2b04 	str.w	r2, [r3], #4
 800ca4c:	429f      	cmp	r7, r3
 800ca4e:	d2fb      	bcs.n	800ca48 <__hexnan+0xcc>
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	b91b      	cbnz	r3, 800ca5c <__hexnan+0xe0>
 800ca54:	4547      	cmp	r7, r8
 800ca56:	d128      	bne.n	800caaa <__hexnan+0x12e>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	603b      	str	r3, [r7, #0]
 800ca5c:	2005      	movs	r0, #5
 800ca5e:	b007      	add	sp, #28
 800ca60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca64:	3501      	adds	r5, #1
 800ca66:	2d08      	cmp	r5, #8
 800ca68:	f10b 0b01 	add.w	fp, fp, #1
 800ca6c:	dd06      	ble.n	800ca7c <__hexnan+0x100>
 800ca6e:	4544      	cmp	r4, r8
 800ca70:	d9c1      	bls.n	800c9f6 <__hexnan+0x7a>
 800ca72:	2300      	movs	r3, #0
 800ca74:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca78:	2501      	movs	r5, #1
 800ca7a:	3c04      	subs	r4, #4
 800ca7c:	6822      	ldr	r2, [r4, #0]
 800ca7e:	f000 000f 	and.w	r0, r0, #15
 800ca82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca86:	6020      	str	r0, [r4, #0]
 800ca88:	e7b5      	b.n	800c9f6 <__hexnan+0x7a>
 800ca8a:	2508      	movs	r5, #8
 800ca8c:	e7b3      	b.n	800c9f6 <__hexnan+0x7a>
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d0dd      	beq.n	800ca50 <__hexnan+0xd4>
 800ca94:	f1c3 0320 	rsb	r3, r3, #32
 800ca98:	f04f 32ff 	mov.w	r2, #4294967295
 800ca9c:	40da      	lsrs	r2, r3
 800ca9e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800caa2:	4013      	ands	r3, r2
 800caa4:	f846 3c04 	str.w	r3, [r6, #-4]
 800caa8:	e7d2      	b.n	800ca50 <__hexnan+0xd4>
 800caaa:	3f04      	subs	r7, #4
 800caac:	e7d0      	b.n	800ca50 <__hexnan+0xd4>
 800caae:	2004      	movs	r0, #4
 800cab0:	e7d5      	b.n	800ca5e <__hexnan+0xe2>

0800cab2 <__ascii_mbtowc>:
 800cab2:	b082      	sub	sp, #8
 800cab4:	b901      	cbnz	r1, 800cab8 <__ascii_mbtowc+0x6>
 800cab6:	a901      	add	r1, sp, #4
 800cab8:	b142      	cbz	r2, 800cacc <__ascii_mbtowc+0x1a>
 800caba:	b14b      	cbz	r3, 800cad0 <__ascii_mbtowc+0x1e>
 800cabc:	7813      	ldrb	r3, [r2, #0]
 800cabe:	600b      	str	r3, [r1, #0]
 800cac0:	7812      	ldrb	r2, [r2, #0]
 800cac2:	1e10      	subs	r0, r2, #0
 800cac4:	bf18      	it	ne
 800cac6:	2001      	movne	r0, #1
 800cac8:	b002      	add	sp, #8
 800caca:	4770      	bx	lr
 800cacc:	4610      	mov	r0, r2
 800cace:	e7fb      	b.n	800cac8 <__ascii_mbtowc+0x16>
 800cad0:	f06f 0001 	mvn.w	r0, #1
 800cad4:	e7f8      	b.n	800cac8 <__ascii_mbtowc+0x16>

0800cad6 <_Balloc>:
 800cad6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800cad8:	b570      	push	{r4, r5, r6, lr}
 800cada:	4605      	mov	r5, r0
 800cadc:	460c      	mov	r4, r1
 800cade:	b17b      	cbz	r3, 800cb00 <_Balloc+0x2a>
 800cae0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800cae2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cae6:	b9a0      	cbnz	r0, 800cb12 <_Balloc+0x3c>
 800cae8:	2101      	movs	r1, #1
 800caea:	fa01 f604 	lsl.w	r6, r1, r4
 800caee:	1d72      	adds	r2, r6, #5
 800caf0:	0092      	lsls	r2, r2, #2
 800caf2:	4628      	mov	r0, r5
 800caf4:	f002 f808 	bl	800eb08 <_calloc_r>
 800caf8:	b148      	cbz	r0, 800cb0e <_Balloc+0x38>
 800cafa:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800cafe:	e00b      	b.n	800cb18 <_Balloc+0x42>
 800cb00:	2221      	movs	r2, #33	@ 0x21
 800cb02:	2104      	movs	r1, #4
 800cb04:	f002 f800 	bl	800eb08 <_calloc_r>
 800cb08:	6468      	str	r0, [r5, #68]	@ 0x44
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d1e8      	bne.n	800cae0 <_Balloc+0xa>
 800cb0e:	2000      	movs	r0, #0
 800cb10:	bd70      	pop	{r4, r5, r6, pc}
 800cb12:	6802      	ldr	r2, [r0, #0]
 800cb14:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb1e:	e7f7      	b.n	800cb10 <_Balloc+0x3a>

0800cb20 <_Bfree>:
 800cb20:	b131      	cbz	r1, 800cb30 <_Bfree+0x10>
 800cb22:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800cb24:	684a      	ldr	r2, [r1, #4]
 800cb26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cb2a:	6008      	str	r0, [r1, #0]
 800cb2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800cb30:	4770      	bx	lr
	...

0800cb34 <__multadd>:
 800cb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb38:	690d      	ldr	r5, [r1, #16]
 800cb3a:	4607      	mov	r7, r0
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	461e      	mov	r6, r3
 800cb40:	f101 0c14 	add.w	ip, r1, #20
 800cb44:	2000      	movs	r0, #0
 800cb46:	f8dc 3000 	ldr.w	r3, [ip]
 800cb4a:	b299      	uxth	r1, r3
 800cb4c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb50:	0c1e      	lsrs	r6, r3, #16
 800cb52:	0c0b      	lsrs	r3, r1, #16
 800cb54:	fb02 3306 	mla	r3, r2, r6, r3
 800cb58:	b289      	uxth	r1, r1
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb60:	4285      	cmp	r5, r0
 800cb62:	f84c 1b04 	str.w	r1, [ip], #4
 800cb66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb6a:	dcec      	bgt.n	800cb46 <__multadd+0x12>
 800cb6c:	b30e      	cbz	r6, 800cbb2 <__multadd+0x7e>
 800cb6e:	68a3      	ldr	r3, [r4, #8]
 800cb70:	42ab      	cmp	r3, r5
 800cb72:	dc19      	bgt.n	800cba8 <__multadd+0x74>
 800cb74:	6861      	ldr	r1, [r4, #4]
 800cb76:	4638      	mov	r0, r7
 800cb78:	3101      	adds	r1, #1
 800cb7a:	f7ff ffac 	bl	800cad6 <_Balloc>
 800cb7e:	4680      	mov	r8, r0
 800cb80:	b928      	cbnz	r0, 800cb8e <__multadd+0x5a>
 800cb82:	4602      	mov	r2, r0
 800cb84:	4b0c      	ldr	r3, [pc, #48]	@ (800cbb8 <__multadd+0x84>)
 800cb86:	480d      	ldr	r0, [pc, #52]	@ (800cbbc <__multadd+0x88>)
 800cb88:	21ba      	movs	r1, #186	@ 0xba
 800cb8a:	f001 ff9f 	bl	800eacc <__assert_func>
 800cb8e:	6922      	ldr	r2, [r4, #16]
 800cb90:	3202      	adds	r2, #2
 800cb92:	f104 010c 	add.w	r1, r4, #12
 800cb96:	0092      	lsls	r2, r2, #2
 800cb98:	300c      	adds	r0, #12
 800cb9a:	f7ff fb0d 	bl	800c1b8 <memcpy>
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4638      	mov	r0, r7
 800cba2:	f7ff ffbd 	bl	800cb20 <_Bfree>
 800cba6:	4644      	mov	r4, r8
 800cba8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbac:	3501      	adds	r5, #1
 800cbae:	615e      	str	r6, [r3, #20]
 800cbb0:	6125      	str	r5, [r4, #16]
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb8:	08011a82 	.word	0x08011a82
 800cbbc:	08011af3 	.word	0x08011af3

0800cbc0 <__s2b>:
 800cbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	4615      	mov	r5, r2
 800cbc8:	461f      	mov	r7, r3
 800cbca:	2209      	movs	r2, #9
 800cbcc:	3308      	adds	r3, #8
 800cbce:	4606      	mov	r6, r0
 800cbd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	db09      	blt.n	800cbf0 <__s2b+0x30>
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f7ff ff7a 	bl	800cad6 <_Balloc>
 800cbe2:	b940      	cbnz	r0, 800cbf6 <__s2b+0x36>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	4b19      	ldr	r3, [pc, #100]	@ (800cc4c <__s2b+0x8c>)
 800cbe8:	4819      	ldr	r0, [pc, #100]	@ (800cc50 <__s2b+0x90>)
 800cbea:	21d3      	movs	r1, #211	@ 0xd3
 800cbec:	f001 ff6e 	bl	800eacc <__assert_func>
 800cbf0:	0052      	lsls	r2, r2, #1
 800cbf2:	3101      	adds	r1, #1
 800cbf4:	e7f0      	b.n	800cbd8 <__s2b+0x18>
 800cbf6:	9b08      	ldr	r3, [sp, #32]
 800cbf8:	6143      	str	r3, [r0, #20]
 800cbfa:	2d09      	cmp	r5, #9
 800cbfc:	f04f 0301 	mov.w	r3, #1
 800cc00:	6103      	str	r3, [r0, #16]
 800cc02:	dd16      	ble.n	800cc32 <__s2b+0x72>
 800cc04:	f104 0909 	add.w	r9, r4, #9
 800cc08:	46c8      	mov	r8, r9
 800cc0a:	442c      	add	r4, r5
 800cc0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc10:	4601      	mov	r1, r0
 800cc12:	3b30      	subs	r3, #48	@ 0x30
 800cc14:	220a      	movs	r2, #10
 800cc16:	4630      	mov	r0, r6
 800cc18:	f7ff ff8c 	bl	800cb34 <__multadd>
 800cc1c:	45a0      	cmp	r8, r4
 800cc1e:	d1f5      	bne.n	800cc0c <__s2b+0x4c>
 800cc20:	f1a5 0408 	sub.w	r4, r5, #8
 800cc24:	444c      	add	r4, r9
 800cc26:	1b2d      	subs	r5, r5, r4
 800cc28:	1963      	adds	r3, r4, r5
 800cc2a:	42bb      	cmp	r3, r7
 800cc2c:	db04      	blt.n	800cc38 <__s2b+0x78>
 800cc2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc32:	340a      	adds	r4, #10
 800cc34:	2509      	movs	r5, #9
 800cc36:	e7f6      	b.n	800cc26 <__s2b+0x66>
 800cc38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc3c:	4601      	mov	r1, r0
 800cc3e:	3b30      	subs	r3, #48	@ 0x30
 800cc40:	220a      	movs	r2, #10
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7ff ff76 	bl	800cb34 <__multadd>
 800cc48:	e7ee      	b.n	800cc28 <__s2b+0x68>
 800cc4a:	bf00      	nop
 800cc4c:	08011a82 	.word	0x08011a82
 800cc50:	08011af3 	.word	0x08011af3

0800cc54 <__hi0bits>:
 800cc54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc58:	4603      	mov	r3, r0
 800cc5a:	bf36      	itet	cc
 800cc5c:	0403      	lslcc	r3, r0, #16
 800cc5e:	2000      	movcs	r0, #0
 800cc60:	2010      	movcc	r0, #16
 800cc62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc66:	bf3c      	itt	cc
 800cc68:	021b      	lslcc	r3, r3, #8
 800cc6a:	3008      	addcc	r0, #8
 800cc6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc70:	bf3c      	itt	cc
 800cc72:	011b      	lslcc	r3, r3, #4
 800cc74:	3004      	addcc	r0, #4
 800cc76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc7a:	bf3c      	itt	cc
 800cc7c:	009b      	lslcc	r3, r3, #2
 800cc7e:	3002      	addcc	r0, #2
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	db05      	blt.n	800cc90 <__hi0bits+0x3c>
 800cc84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc88:	f100 0001 	add.w	r0, r0, #1
 800cc8c:	bf08      	it	eq
 800cc8e:	2020      	moveq	r0, #32
 800cc90:	4770      	bx	lr

0800cc92 <__lo0bits>:
 800cc92:	6803      	ldr	r3, [r0, #0]
 800cc94:	4602      	mov	r2, r0
 800cc96:	f013 0007 	ands.w	r0, r3, #7
 800cc9a:	d00b      	beq.n	800ccb4 <__lo0bits+0x22>
 800cc9c:	07d9      	lsls	r1, r3, #31
 800cc9e:	d421      	bmi.n	800cce4 <__lo0bits+0x52>
 800cca0:	0798      	lsls	r0, r3, #30
 800cca2:	bf49      	itett	mi
 800cca4:	085b      	lsrmi	r3, r3, #1
 800cca6:	089b      	lsrpl	r3, r3, #2
 800cca8:	2001      	movmi	r0, #1
 800ccaa:	6013      	strmi	r3, [r2, #0]
 800ccac:	bf5c      	itt	pl
 800ccae:	6013      	strpl	r3, [r2, #0]
 800ccb0:	2002      	movpl	r0, #2
 800ccb2:	4770      	bx	lr
 800ccb4:	b299      	uxth	r1, r3
 800ccb6:	b909      	cbnz	r1, 800ccbc <__lo0bits+0x2a>
 800ccb8:	0c1b      	lsrs	r3, r3, #16
 800ccba:	2010      	movs	r0, #16
 800ccbc:	b2d9      	uxtb	r1, r3
 800ccbe:	b909      	cbnz	r1, 800ccc4 <__lo0bits+0x32>
 800ccc0:	3008      	adds	r0, #8
 800ccc2:	0a1b      	lsrs	r3, r3, #8
 800ccc4:	0719      	lsls	r1, r3, #28
 800ccc6:	bf04      	itt	eq
 800ccc8:	091b      	lsreq	r3, r3, #4
 800ccca:	3004      	addeq	r0, #4
 800cccc:	0799      	lsls	r1, r3, #30
 800ccce:	bf04      	itt	eq
 800ccd0:	089b      	lsreq	r3, r3, #2
 800ccd2:	3002      	addeq	r0, #2
 800ccd4:	07d9      	lsls	r1, r3, #31
 800ccd6:	d403      	bmi.n	800cce0 <__lo0bits+0x4e>
 800ccd8:	085b      	lsrs	r3, r3, #1
 800ccda:	f100 0001 	add.w	r0, r0, #1
 800ccde:	d003      	beq.n	800cce8 <__lo0bits+0x56>
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	4770      	bx	lr
 800cce4:	2000      	movs	r0, #0
 800cce6:	4770      	bx	lr
 800cce8:	2020      	movs	r0, #32
 800ccea:	4770      	bx	lr

0800ccec <__i2b>:
 800ccec:	b510      	push	{r4, lr}
 800ccee:	460c      	mov	r4, r1
 800ccf0:	2101      	movs	r1, #1
 800ccf2:	f7ff fef0 	bl	800cad6 <_Balloc>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	b928      	cbnz	r0, 800cd06 <__i2b+0x1a>
 800ccfa:	4b05      	ldr	r3, [pc, #20]	@ (800cd10 <__i2b+0x24>)
 800ccfc:	4805      	ldr	r0, [pc, #20]	@ (800cd14 <__i2b+0x28>)
 800ccfe:	f240 1145 	movw	r1, #325	@ 0x145
 800cd02:	f001 fee3 	bl	800eacc <__assert_func>
 800cd06:	2301      	movs	r3, #1
 800cd08:	6144      	str	r4, [r0, #20]
 800cd0a:	6103      	str	r3, [r0, #16]
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	bf00      	nop
 800cd10:	08011a82 	.word	0x08011a82
 800cd14:	08011af3 	.word	0x08011af3

0800cd18 <__multiply>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	4617      	mov	r7, r2
 800cd1e:	690a      	ldr	r2, [r1, #16]
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	bfa8      	it	ge
 800cd26:	463b      	movge	r3, r7
 800cd28:	4689      	mov	r9, r1
 800cd2a:	bfa4      	itt	ge
 800cd2c:	460f      	movge	r7, r1
 800cd2e:	4699      	movge	r9, r3
 800cd30:	693d      	ldr	r5, [r7, #16]
 800cd32:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	6879      	ldr	r1, [r7, #4]
 800cd3a:	eb05 060a 	add.w	r6, r5, sl
 800cd3e:	42b3      	cmp	r3, r6
 800cd40:	b085      	sub	sp, #20
 800cd42:	bfb8      	it	lt
 800cd44:	3101      	addlt	r1, #1
 800cd46:	f7ff fec6 	bl	800cad6 <_Balloc>
 800cd4a:	b930      	cbnz	r0, 800cd5a <__multiply+0x42>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	4b41      	ldr	r3, [pc, #260]	@ (800ce54 <__multiply+0x13c>)
 800cd50:	4841      	ldr	r0, [pc, #260]	@ (800ce58 <__multiply+0x140>)
 800cd52:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd56:	f001 feb9 	bl	800eacc <__assert_func>
 800cd5a:	f100 0414 	add.w	r4, r0, #20
 800cd5e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cd62:	4623      	mov	r3, r4
 800cd64:	2200      	movs	r2, #0
 800cd66:	4573      	cmp	r3, lr
 800cd68:	d320      	bcc.n	800cdac <__multiply+0x94>
 800cd6a:	f107 0814 	add.w	r8, r7, #20
 800cd6e:	f109 0114 	add.w	r1, r9, #20
 800cd72:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cd76:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cd7a:	9302      	str	r3, [sp, #8]
 800cd7c:	1beb      	subs	r3, r5, r7
 800cd7e:	3b15      	subs	r3, #21
 800cd80:	f023 0303 	bic.w	r3, r3, #3
 800cd84:	3304      	adds	r3, #4
 800cd86:	3715      	adds	r7, #21
 800cd88:	42bd      	cmp	r5, r7
 800cd8a:	bf38      	it	cc
 800cd8c:	2304      	movcc	r3, #4
 800cd8e:	9301      	str	r3, [sp, #4]
 800cd90:	9b02      	ldr	r3, [sp, #8]
 800cd92:	9103      	str	r1, [sp, #12]
 800cd94:	428b      	cmp	r3, r1
 800cd96:	d80c      	bhi.n	800cdb2 <__multiply+0x9a>
 800cd98:	2e00      	cmp	r6, #0
 800cd9a:	dd03      	ble.n	800cda4 <__multiply+0x8c>
 800cd9c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d055      	beq.n	800ce50 <__multiply+0x138>
 800cda4:	6106      	str	r6, [r0, #16]
 800cda6:	b005      	add	sp, #20
 800cda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdac:	f843 2b04 	str.w	r2, [r3], #4
 800cdb0:	e7d9      	b.n	800cd66 <__multiply+0x4e>
 800cdb2:	f8b1 a000 	ldrh.w	sl, [r1]
 800cdb6:	f1ba 0f00 	cmp.w	sl, #0
 800cdba:	d01f      	beq.n	800cdfc <__multiply+0xe4>
 800cdbc:	46c4      	mov	ip, r8
 800cdbe:	46a1      	mov	r9, r4
 800cdc0:	2700      	movs	r7, #0
 800cdc2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cdc6:	f8d9 3000 	ldr.w	r3, [r9]
 800cdca:	fa1f fb82 	uxth.w	fp, r2
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	fb0a 330b 	mla	r3, sl, fp, r3
 800cdd4:	443b      	add	r3, r7
 800cdd6:	f8d9 7000 	ldr.w	r7, [r9]
 800cdda:	0c12      	lsrs	r2, r2, #16
 800cddc:	0c3f      	lsrs	r7, r7, #16
 800cdde:	fb0a 7202 	mla	r2, sl, r2, r7
 800cde2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdec:	4565      	cmp	r5, ip
 800cdee:	f849 3b04 	str.w	r3, [r9], #4
 800cdf2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cdf6:	d8e4      	bhi.n	800cdc2 <__multiply+0xaa>
 800cdf8:	9b01      	ldr	r3, [sp, #4]
 800cdfa:	50e7      	str	r7, [r4, r3]
 800cdfc:	9b03      	ldr	r3, [sp, #12]
 800cdfe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce02:	3104      	adds	r1, #4
 800ce04:	f1b9 0f00 	cmp.w	r9, #0
 800ce08:	d020      	beq.n	800ce4c <__multiply+0x134>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	4647      	mov	r7, r8
 800ce0e:	46a4      	mov	ip, r4
 800ce10:	f04f 0a00 	mov.w	sl, #0
 800ce14:	f8b7 b000 	ldrh.w	fp, [r7]
 800ce18:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ce1c:	fb09 220b 	mla	r2, r9, fp, r2
 800ce20:	4452      	add	r2, sl
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce28:	f84c 3b04 	str.w	r3, [ip], #4
 800ce2c:	f857 3b04 	ldr.w	r3, [r7], #4
 800ce30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce34:	f8bc 3000 	ldrh.w	r3, [ip]
 800ce38:	fb09 330a 	mla	r3, r9, sl, r3
 800ce3c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ce40:	42bd      	cmp	r5, r7
 800ce42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce46:	d8e5      	bhi.n	800ce14 <__multiply+0xfc>
 800ce48:	9a01      	ldr	r2, [sp, #4]
 800ce4a:	50a3      	str	r3, [r4, r2]
 800ce4c:	3404      	adds	r4, #4
 800ce4e:	e79f      	b.n	800cd90 <__multiply+0x78>
 800ce50:	3e01      	subs	r6, #1
 800ce52:	e7a1      	b.n	800cd98 <__multiply+0x80>
 800ce54:	08011a82 	.word	0x08011a82
 800ce58:	08011af3 	.word	0x08011af3

0800ce5c <__pow5mult>:
 800ce5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce60:	4615      	mov	r5, r2
 800ce62:	f012 0203 	ands.w	r2, r2, #3
 800ce66:	4607      	mov	r7, r0
 800ce68:	460e      	mov	r6, r1
 800ce6a:	d007      	beq.n	800ce7c <__pow5mult+0x20>
 800ce6c:	4c1a      	ldr	r4, [pc, #104]	@ (800ced8 <__pow5mult+0x7c>)
 800ce6e:	3a01      	subs	r2, #1
 800ce70:	2300      	movs	r3, #0
 800ce72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce76:	f7ff fe5d 	bl	800cb34 <__multadd>
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	10ad      	asrs	r5, r5, #2
 800ce7e:	d027      	beq.n	800ced0 <__pow5mult+0x74>
 800ce80:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800ce82:	b944      	cbnz	r4, 800ce96 <__pow5mult+0x3a>
 800ce84:	f240 2171 	movw	r1, #625	@ 0x271
 800ce88:	4638      	mov	r0, r7
 800ce8a:	f7ff ff2f 	bl	800ccec <__i2b>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	6438      	str	r0, [r7, #64]	@ 0x40
 800ce92:	4604      	mov	r4, r0
 800ce94:	6003      	str	r3, [r0, #0]
 800ce96:	f04f 0900 	mov.w	r9, #0
 800ce9a:	07eb      	lsls	r3, r5, #31
 800ce9c:	d50a      	bpl.n	800ceb4 <__pow5mult+0x58>
 800ce9e:	4631      	mov	r1, r6
 800cea0:	4622      	mov	r2, r4
 800cea2:	4638      	mov	r0, r7
 800cea4:	f7ff ff38 	bl	800cd18 <__multiply>
 800cea8:	4631      	mov	r1, r6
 800ceaa:	4680      	mov	r8, r0
 800ceac:	4638      	mov	r0, r7
 800ceae:	f7ff fe37 	bl	800cb20 <_Bfree>
 800ceb2:	4646      	mov	r6, r8
 800ceb4:	106d      	asrs	r5, r5, #1
 800ceb6:	d00b      	beq.n	800ced0 <__pow5mult+0x74>
 800ceb8:	6820      	ldr	r0, [r4, #0]
 800ceba:	b938      	cbnz	r0, 800cecc <__pow5mult+0x70>
 800cebc:	4622      	mov	r2, r4
 800cebe:	4621      	mov	r1, r4
 800cec0:	4638      	mov	r0, r7
 800cec2:	f7ff ff29 	bl	800cd18 <__multiply>
 800cec6:	6020      	str	r0, [r4, #0]
 800cec8:	f8c0 9000 	str.w	r9, [r0]
 800cecc:	4604      	mov	r4, r0
 800cece:	e7e4      	b.n	800ce9a <__pow5mult+0x3e>
 800ced0:	4630      	mov	r0, r6
 800ced2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ced6:	bf00      	nop
 800ced8:	08011d7c 	.word	0x08011d7c

0800cedc <__lshift>:
 800cedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee0:	460c      	mov	r4, r1
 800cee2:	6849      	ldr	r1, [r1, #4]
 800cee4:	6923      	ldr	r3, [r4, #16]
 800cee6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ceea:	68a3      	ldr	r3, [r4, #8]
 800ceec:	4607      	mov	r7, r0
 800ceee:	4691      	mov	r9, r2
 800cef0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cef4:	f108 0601 	add.w	r6, r8, #1
 800cef8:	42b3      	cmp	r3, r6
 800cefa:	db0b      	blt.n	800cf14 <__lshift+0x38>
 800cefc:	4638      	mov	r0, r7
 800cefe:	f7ff fdea 	bl	800cad6 <_Balloc>
 800cf02:	4605      	mov	r5, r0
 800cf04:	b948      	cbnz	r0, 800cf1a <__lshift+0x3e>
 800cf06:	4602      	mov	r2, r0
 800cf08:	4b28      	ldr	r3, [pc, #160]	@ (800cfac <__lshift+0xd0>)
 800cf0a:	4829      	ldr	r0, [pc, #164]	@ (800cfb0 <__lshift+0xd4>)
 800cf0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf10:	f001 fddc 	bl	800eacc <__assert_func>
 800cf14:	3101      	adds	r1, #1
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	e7ee      	b.n	800cef8 <__lshift+0x1c>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f100 0114 	add.w	r1, r0, #20
 800cf20:	f100 0210 	add.w	r2, r0, #16
 800cf24:	4618      	mov	r0, r3
 800cf26:	4553      	cmp	r3, sl
 800cf28:	db33      	blt.n	800cf92 <__lshift+0xb6>
 800cf2a:	6920      	ldr	r0, [r4, #16]
 800cf2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf30:	f104 0314 	add.w	r3, r4, #20
 800cf34:	f019 091f 	ands.w	r9, r9, #31
 800cf38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf40:	d02b      	beq.n	800cf9a <__lshift+0xbe>
 800cf42:	f1c9 0e20 	rsb	lr, r9, #32
 800cf46:	468a      	mov	sl, r1
 800cf48:	2200      	movs	r2, #0
 800cf4a:	6818      	ldr	r0, [r3, #0]
 800cf4c:	fa00 f009 	lsl.w	r0, r0, r9
 800cf50:	4310      	orrs	r0, r2
 800cf52:	f84a 0b04 	str.w	r0, [sl], #4
 800cf56:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf5a:	459c      	cmp	ip, r3
 800cf5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf60:	d8f3      	bhi.n	800cf4a <__lshift+0x6e>
 800cf62:	ebac 0304 	sub.w	r3, ip, r4
 800cf66:	3b15      	subs	r3, #21
 800cf68:	f023 0303 	bic.w	r3, r3, #3
 800cf6c:	3304      	adds	r3, #4
 800cf6e:	f104 0015 	add.w	r0, r4, #21
 800cf72:	4560      	cmp	r0, ip
 800cf74:	bf88      	it	hi
 800cf76:	2304      	movhi	r3, #4
 800cf78:	50ca      	str	r2, [r1, r3]
 800cf7a:	b10a      	cbz	r2, 800cf80 <__lshift+0xa4>
 800cf7c:	f108 0602 	add.w	r6, r8, #2
 800cf80:	3e01      	subs	r6, #1
 800cf82:	4638      	mov	r0, r7
 800cf84:	612e      	str	r6, [r5, #16]
 800cf86:	4621      	mov	r1, r4
 800cf88:	f7ff fdca 	bl	800cb20 <_Bfree>
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf92:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf96:	3301      	adds	r3, #1
 800cf98:	e7c5      	b.n	800cf26 <__lshift+0x4a>
 800cf9a:	3904      	subs	r1, #4
 800cf9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfa0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfa4:	459c      	cmp	ip, r3
 800cfa6:	d8f9      	bhi.n	800cf9c <__lshift+0xc0>
 800cfa8:	e7ea      	b.n	800cf80 <__lshift+0xa4>
 800cfaa:	bf00      	nop
 800cfac:	08011a82 	.word	0x08011a82
 800cfb0:	08011af3 	.word	0x08011af3

0800cfb4 <__mcmp>:
 800cfb4:	690a      	ldr	r2, [r1, #16]
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	6900      	ldr	r0, [r0, #16]
 800cfba:	1a80      	subs	r0, r0, r2
 800cfbc:	b530      	push	{r4, r5, lr}
 800cfbe:	d10e      	bne.n	800cfde <__mcmp+0x2a>
 800cfc0:	3314      	adds	r3, #20
 800cfc2:	3114      	adds	r1, #20
 800cfc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cfc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cfcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfd4:	4295      	cmp	r5, r2
 800cfd6:	d003      	beq.n	800cfe0 <__mcmp+0x2c>
 800cfd8:	d205      	bcs.n	800cfe6 <__mcmp+0x32>
 800cfda:	f04f 30ff 	mov.w	r0, #4294967295
 800cfde:	bd30      	pop	{r4, r5, pc}
 800cfe0:	42a3      	cmp	r3, r4
 800cfe2:	d3f3      	bcc.n	800cfcc <__mcmp+0x18>
 800cfe4:	e7fb      	b.n	800cfde <__mcmp+0x2a>
 800cfe6:	2001      	movs	r0, #1
 800cfe8:	e7f9      	b.n	800cfde <__mcmp+0x2a>
	...

0800cfec <__mdiff>:
 800cfec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	4689      	mov	r9, r1
 800cff2:	4606      	mov	r6, r0
 800cff4:	4611      	mov	r1, r2
 800cff6:	4648      	mov	r0, r9
 800cff8:	4614      	mov	r4, r2
 800cffa:	f7ff ffdb 	bl	800cfb4 <__mcmp>
 800cffe:	1e05      	subs	r5, r0, #0
 800d000:	d112      	bne.n	800d028 <__mdiff+0x3c>
 800d002:	4629      	mov	r1, r5
 800d004:	4630      	mov	r0, r6
 800d006:	f7ff fd66 	bl	800cad6 <_Balloc>
 800d00a:	4602      	mov	r2, r0
 800d00c:	b928      	cbnz	r0, 800d01a <__mdiff+0x2e>
 800d00e:	4b3f      	ldr	r3, [pc, #252]	@ (800d10c <__mdiff+0x120>)
 800d010:	f240 2137 	movw	r1, #567	@ 0x237
 800d014:	483e      	ldr	r0, [pc, #248]	@ (800d110 <__mdiff+0x124>)
 800d016:	f001 fd59 	bl	800eacc <__assert_func>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d020:	4610      	mov	r0, r2
 800d022:	b003      	add	sp, #12
 800d024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d028:	bfbc      	itt	lt
 800d02a:	464b      	movlt	r3, r9
 800d02c:	46a1      	movlt	r9, r4
 800d02e:	4630      	mov	r0, r6
 800d030:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d034:	bfba      	itte	lt
 800d036:	461c      	movlt	r4, r3
 800d038:	2501      	movlt	r5, #1
 800d03a:	2500      	movge	r5, #0
 800d03c:	f7ff fd4b 	bl	800cad6 <_Balloc>
 800d040:	4602      	mov	r2, r0
 800d042:	b918      	cbnz	r0, 800d04c <__mdiff+0x60>
 800d044:	4b31      	ldr	r3, [pc, #196]	@ (800d10c <__mdiff+0x120>)
 800d046:	f240 2145 	movw	r1, #581	@ 0x245
 800d04a:	e7e3      	b.n	800d014 <__mdiff+0x28>
 800d04c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d050:	6926      	ldr	r6, [r4, #16]
 800d052:	60c5      	str	r5, [r0, #12]
 800d054:	f109 0310 	add.w	r3, r9, #16
 800d058:	f109 0514 	add.w	r5, r9, #20
 800d05c:	f104 0e14 	add.w	lr, r4, #20
 800d060:	f100 0b14 	add.w	fp, r0, #20
 800d064:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d068:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d06c:	9301      	str	r3, [sp, #4]
 800d06e:	46d9      	mov	r9, fp
 800d070:	f04f 0c00 	mov.w	ip, #0
 800d074:	9b01      	ldr	r3, [sp, #4]
 800d076:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d07a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d07e:	9301      	str	r3, [sp, #4]
 800d080:	fa1f f38a 	uxth.w	r3, sl
 800d084:	4619      	mov	r1, r3
 800d086:	b283      	uxth	r3, r0
 800d088:	1acb      	subs	r3, r1, r3
 800d08a:	0c00      	lsrs	r0, r0, #16
 800d08c:	4463      	add	r3, ip
 800d08e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d092:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d096:	b29b      	uxth	r3, r3
 800d098:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d09c:	4576      	cmp	r6, lr
 800d09e:	f849 3b04 	str.w	r3, [r9], #4
 800d0a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0a6:	d8e5      	bhi.n	800d074 <__mdiff+0x88>
 800d0a8:	1b33      	subs	r3, r6, r4
 800d0aa:	3b15      	subs	r3, #21
 800d0ac:	f023 0303 	bic.w	r3, r3, #3
 800d0b0:	3415      	adds	r4, #21
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	42a6      	cmp	r6, r4
 800d0b6:	bf38      	it	cc
 800d0b8:	2304      	movcc	r3, #4
 800d0ba:	441d      	add	r5, r3
 800d0bc:	445b      	add	r3, fp
 800d0be:	461e      	mov	r6, r3
 800d0c0:	462c      	mov	r4, r5
 800d0c2:	4544      	cmp	r4, r8
 800d0c4:	d30e      	bcc.n	800d0e4 <__mdiff+0xf8>
 800d0c6:	f108 0103 	add.w	r1, r8, #3
 800d0ca:	1b49      	subs	r1, r1, r5
 800d0cc:	f021 0103 	bic.w	r1, r1, #3
 800d0d0:	3d03      	subs	r5, #3
 800d0d2:	45a8      	cmp	r8, r5
 800d0d4:	bf38      	it	cc
 800d0d6:	2100      	movcc	r1, #0
 800d0d8:	440b      	add	r3, r1
 800d0da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0de:	b191      	cbz	r1, 800d106 <__mdiff+0x11a>
 800d0e0:	6117      	str	r7, [r2, #16]
 800d0e2:	e79d      	b.n	800d020 <__mdiff+0x34>
 800d0e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d0e8:	46e6      	mov	lr, ip
 800d0ea:	0c08      	lsrs	r0, r1, #16
 800d0ec:	fa1c fc81 	uxtah	ip, ip, r1
 800d0f0:	4471      	add	r1, lr
 800d0f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0f6:	b289      	uxth	r1, r1
 800d0f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0fc:	f846 1b04 	str.w	r1, [r6], #4
 800d100:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d104:	e7dd      	b.n	800d0c2 <__mdiff+0xd6>
 800d106:	3f01      	subs	r7, #1
 800d108:	e7e7      	b.n	800d0da <__mdiff+0xee>
 800d10a:	bf00      	nop
 800d10c:	08011a82 	.word	0x08011a82
 800d110:	08011af3 	.word	0x08011af3

0800d114 <__ulp>:
 800d114:	b082      	sub	sp, #8
 800d116:	ed8d 0b00 	vstr	d0, [sp]
 800d11a:	9a01      	ldr	r2, [sp, #4]
 800d11c:	4b0f      	ldr	r3, [pc, #60]	@ (800d15c <__ulp+0x48>)
 800d11e:	4013      	ands	r3, r2
 800d120:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d124:	2b00      	cmp	r3, #0
 800d126:	dc08      	bgt.n	800d13a <__ulp+0x26>
 800d128:	425b      	negs	r3, r3
 800d12a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d12e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d132:	da04      	bge.n	800d13e <__ulp+0x2a>
 800d134:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d138:	4113      	asrs	r3, r2
 800d13a:	2200      	movs	r2, #0
 800d13c:	e008      	b.n	800d150 <__ulp+0x3c>
 800d13e:	f1a2 0314 	sub.w	r3, r2, #20
 800d142:	2b1e      	cmp	r3, #30
 800d144:	bfda      	itte	le
 800d146:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d14a:	40da      	lsrle	r2, r3
 800d14c:	2201      	movgt	r2, #1
 800d14e:	2300      	movs	r3, #0
 800d150:	4619      	mov	r1, r3
 800d152:	4610      	mov	r0, r2
 800d154:	ec41 0b10 	vmov	d0, r0, r1
 800d158:	b002      	add	sp, #8
 800d15a:	4770      	bx	lr
 800d15c:	7ff00000 	.word	0x7ff00000

0800d160 <__b2d>:
 800d160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d164:	6906      	ldr	r6, [r0, #16]
 800d166:	f100 0814 	add.w	r8, r0, #20
 800d16a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d16e:	1f37      	subs	r7, r6, #4
 800d170:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d174:	4610      	mov	r0, r2
 800d176:	f7ff fd6d 	bl	800cc54 <__hi0bits>
 800d17a:	f1c0 0320 	rsb	r3, r0, #32
 800d17e:	280a      	cmp	r0, #10
 800d180:	600b      	str	r3, [r1, #0]
 800d182:	491b      	ldr	r1, [pc, #108]	@ (800d1f0 <__b2d+0x90>)
 800d184:	dc15      	bgt.n	800d1b2 <__b2d+0x52>
 800d186:	f1c0 0c0b 	rsb	ip, r0, #11
 800d18a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d18e:	45b8      	cmp	r8, r7
 800d190:	ea43 0501 	orr.w	r5, r3, r1
 800d194:	bf34      	ite	cc
 800d196:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d19a:	2300      	movcs	r3, #0
 800d19c:	3015      	adds	r0, #21
 800d19e:	fa02 f000 	lsl.w	r0, r2, r0
 800d1a2:	fa23 f30c 	lsr.w	r3, r3, ip
 800d1a6:	4303      	orrs	r3, r0
 800d1a8:	461c      	mov	r4, r3
 800d1aa:	ec45 4b10 	vmov	d0, r4, r5
 800d1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b2:	45b8      	cmp	r8, r7
 800d1b4:	bf3a      	itte	cc
 800d1b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d1ba:	f1a6 0708 	subcc.w	r7, r6, #8
 800d1be:	2300      	movcs	r3, #0
 800d1c0:	380b      	subs	r0, #11
 800d1c2:	d012      	beq.n	800d1ea <__b2d+0x8a>
 800d1c4:	f1c0 0120 	rsb	r1, r0, #32
 800d1c8:	fa23 f401 	lsr.w	r4, r3, r1
 800d1cc:	4082      	lsls	r2, r0
 800d1ce:	4322      	orrs	r2, r4
 800d1d0:	4547      	cmp	r7, r8
 800d1d2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d1d6:	bf8c      	ite	hi
 800d1d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d1dc:	2200      	movls	r2, #0
 800d1de:	4083      	lsls	r3, r0
 800d1e0:	40ca      	lsrs	r2, r1
 800d1e2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	e7de      	b.n	800d1a8 <__b2d+0x48>
 800d1ea:	ea42 0501 	orr.w	r5, r2, r1
 800d1ee:	e7db      	b.n	800d1a8 <__b2d+0x48>
 800d1f0:	3ff00000 	.word	0x3ff00000

0800d1f4 <__d2b>:
 800d1f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1f8:	460f      	mov	r7, r1
 800d1fa:	2101      	movs	r1, #1
 800d1fc:	ec59 8b10 	vmov	r8, r9, d0
 800d200:	4616      	mov	r6, r2
 800d202:	f7ff fc68 	bl	800cad6 <_Balloc>
 800d206:	4604      	mov	r4, r0
 800d208:	b930      	cbnz	r0, 800d218 <__d2b+0x24>
 800d20a:	4602      	mov	r2, r0
 800d20c:	4b23      	ldr	r3, [pc, #140]	@ (800d29c <__d2b+0xa8>)
 800d20e:	4824      	ldr	r0, [pc, #144]	@ (800d2a0 <__d2b+0xac>)
 800d210:	f240 310f 	movw	r1, #783	@ 0x30f
 800d214:	f001 fc5a 	bl	800eacc <__assert_func>
 800d218:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d21c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d220:	b10d      	cbz	r5, 800d226 <__d2b+0x32>
 800d222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	f1b8 0300 	subs.w	r3, r8, #0
 800d22c:	d023      	beq.n	800d276 <__d2b+0x82>
 800d22e:	4668      	mov	r0, sp
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	f7ff fd2e 	bl	800cc92 <__lo0bits>
 800d236:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d23a:	b1d0      	cbz	r0, 800d272 <__d2b+0x7e>
 800d23c:	f1c0 0320 	rsb	r3, r0, #32
 800d240:	fa02 f303 	lsl.w	r3, r2, r3
 800d244:	430b      	orrs	r3, r1
 800d246:	40c2      	lsrs	r2, r0
 800d248:	6163      	str	r3, [r4, #20]
 800d24a:	9201      	str	r2, [sp, #4]
 800d24c:	9b01      	ldr	r3, [sp, #4]
 800d24e:	61a3      	str	r3, [r4, #24]
 800d250:	2b00      	cmp	r3, #0
 800d252:	bf0c      	ite	eq
 800d254:	2201      	moveq	r2, #1
 800d256:	2202      	movne	r2, #2
 800d258:	6122      	str	r2, [r4, #16]
 800d25a:	b1a5      	cbz	r5, 800d286 <__d2b+0x92>
 800d25c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d260:	4405      	add	r5, r0
 800d262:	603d      	str	r5, [r7, #0]
 800d264:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d268:	6030      	str	r0, [r6, #0]
 800d26a:	4620      	mov	r0, r4
 800d26c:	b003      	add	sp, #12
 800d26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d272:	6161      	str	r1, [r4, #20]
 800d274:	e7ea      	b.n	800d24c <__d2b+0x58>
 800d276:	a801      	add	r0, sp, #4
 800d278:	f7ff fd0b 	bl	800cc92 <__lo0bits>
 800d27c:	9b01      	ldr	r3, [sp, #4]
 800d27e:	6163      	str	r3, [r4, #20]
 800d280:	3020      	adds	r0, #32
 800d282:	2201      	movs	r2, #1
 800d284:	e7e8      	b.n	800d258 <__d2b+0x64>
 800d286:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d28a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d28e:	6038      	str	r0, [r7, #0]
 800d290:	6918      	ldr	r0, [r3, #16]
 800d292:	f7ff fcdf 	bl	800cc54 <__hi0bits>
 800d296:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d29a:	e7e5      	b.n	800d268 <__d2b+0x74>
 800d29c:	08011a82 	.word	0x08011a82
 800d2a0:	08011af3 	.word	0x08011af3

0800d2a4 <__ratio>:
 800d2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a8:	b085      	sub	sp, #20
 800d2aa:	e9cd 1000 	strd	r1, r0, [sp]
 800d2ae:	a902      	add	r1, sp, #8
 800d2b0:	f7ff ff56 	bl	800d160 <__b2d>
 800d2b4:	9800      	ldr	r0, [sp, #0]
 800d2b6:	a903      	add	r1, sp, #12
 800d2b8:	ec55 4b10 	vmov	r4, r5, d0
 800d2bc:	f7ff ff50 	bl	800d160 <__b2d>
 800d2c0:	9b01      	ldr	r3, [sp, #4]
 800d2c2:	6919      	ldr	r1, [r3, #16]
 800d2c4:	9b00      	ldr	r3, [sp, #0]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	1ac9      	subs	r1, r1, r3
 800d2ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d2ce:	1a9b      	subs	r3, r3, r2
 800d2d0:	ec5b ab10 	vmov	sl, fp, d0
 800d2d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	bfce      	itee	gt
 800d2dc:	462a      	movgt	r2, r5
 800d2de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d2e2:	465a      	movle	r2, fp
 800d2e4:	462f      	mov	r7, r5
 800d2e6:	46d9      	mov	r9, fp
 800d2e8:	bfcc      	ite	gt
 800d2ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d2ee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d2f2:	464b      	mov	r3, r9
 800d2f4:	4652      	mov	r2, sl
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	4639      	mov	r1, r7
 800d2fa:	f7f3 faaf 	bl	800085c <__aeabi_ddiv>
 800d2fe:	ec41 0b10 	vmov	d0, r0, r1
 800d302:	b005      	add	sp, #20
 800d304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d308 <__copybits>:
 800d308:	3901      	subs	r1, #1
 800d30a:	b570      	push	{r4, r5, r6, lr}
 800d30c:	1149      	asrs	r1, r1, #5
 800d30e:	6914      	ldr	r4, [r2, #16]
 800d310:	3101      	adds	r1, #1
 800d312:	f102 0314 	add.w	r3, r2, #20
 800d316:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d31a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d31e:	1f05      	subs	r5, r0, #4
 800d320:	42a3      	cmp	r3, r4
 800d322:	d30c      	bcc.n	800d33e <__copybits+0x36>
 800d324:	1aa3      	subs	r3, r4, r2
 800d326:	3b11      	subs	r3, #17
 800d328:	f023 0303 	bic.w	r3, r3, #3
 800d32c:	3211      	adds	r2, #17
 800d32e:	42a2      	cmp	r2, r4
 800d330:	bf88      	it	hi
 800d332:	2300      	movhi	r3, #0
 800d334:	4418      	add	r0, r3
 800d336:	2300      	movs	r3, #0
 800d338:	4288      	cmp	r0, r1
 800d33a:	d305      	bcc.n	800d348 <__copybits+0x40>
 800d33c:	bd70      	pop	{r4, r5, r6, pc}
 800d33e:	f853 6b04 	ldr.w	r6, [r3], #4
 800d342:	f845 6f04 	str.w	r6, [r5, #4]!
 800d346:	e7eb      	b.n	800d320 <__copybits+0x18>
 800d348:	f840 3b04 	str.w	r3, [r0], #4
 800d34c:	e7f4      	b.n	800d338 <__copybits+0x30>

0800d34e <__any_on>:
 800d34e:	f100 0214 	add.w	r2, r0, #20
 800d352:	6900      	ldr	r0, [r0, #16]
 800d354:	114b      	asrs	r3, r1, #5
 800d356:	4298      	cmp	r0, r3
 800d358:	b510      	push	{r4, lr}
 800d35a:	db11      	blt.n	800d380 <__any_on+0x32>
 800d35c:	dd0a      	ble.n	800d374 <__any_on+0x26>
 800d35e:	f011 011f 	ands.w	r1, r1, #31
 800d362:	d007      	beq.n	800d374 <__any_on+0x26>
 800d364:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d368:	fa24 f001 	lsr.w	r0, r4, r1
 800d36c:	fa00 f101 	lsl.w	r1, r0, r1
 800d370:	428c      	cmp	r4, r1
 800d372:	d10b      	bne.n	800d38c <__any_on+0x3e>
 800d374:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d378:	4293      	cmp	r3, r2
 800d37a:	d803      	bhi.n	800d384 <__any_on+0x36>
 800d37c:	2000      	movs	r0, #0
 800d37e:	bd10      	pop	{r4, pc}
 800d380:	4603      	mov	r3, r0
 800d382:	e7f7      	b.n	800d374 <__any_on+0x26>
 800d384:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d388:	2900      	cmp	r1, #0
 800d38a:	d0f5      	beq.n	800d378 <__any_on+0x2a>
 800d38c:	2001      	movs	r0, #1
 800d38e:	e7f6      	b.n	800d37e <__any_on+0x30>

0800d390 <__ascii_wctomb>:
 800d390:	4603      	mov	r3, r0
 800d392:	4608      	mov	r0, r1
 800d394:	b141      	cbz	r1, 800d3a8 <__ascii_wctomb+0x18>
 800d396:	2aff      	cmp	r2, #255	@ 0xff
 800d398:	d904      	bls.n	800d3a4 <__ascii_wctomb+0x14>
 800d39a:	228a      	movs	r2, #138	@ 0x8a
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a2:	4770      	bx	lr
 800d3a4:	700a      	strb	r2, [r1, #0]
 800d3a6:	2001      	movs	r0, #1
 800d3a8:	4770      	bx	lr
 800d3aa:	0000      	movs	r0, r0
 800d3ac:	0000      	movs	r0, r0
	...

0800d3b0 <_svfprintf_r>:
 800d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b4:	b0d3      	sub	sp, #332	@ 0x14c
 800d3b6:	4693      	mov	fp, r2
 800d3b8:	9106      	str	r1, [sp, #24]
 800d3ba:	461f      	mov	r7, r3
 800d3bc:	9003      	str	r0, [sp, #12]
 800d3be:	f001 faf9 	bl	800e9b4 <_localeconv_r>
 800d3c2:	6803      	ldr	r3, [r0, #0]
 800d3c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7f2 ff5a 	bl	8000280 <strlen>
 800d3cc:	9b06      	ldr	r3, [sp, #24]
 800d3ce:	900e      	str	r0, [sp, #56]	@ 0x38
 800d3d0:	899b      	ldrh	r3, [r3, #12]
 800d3d2:	061a      	lsls	r2, r3, #24
 800d3d4:	d514      	bpl.n	800d400 <_svfprintf_r+0x50>
 800d3d6:	9b06      	ldr	r3, [sp, #24]
 800d3d8:	691b      	ldr	r3, [r3, #16]
 800d3da:	b98b      	cbnz	r3, 800d400 <_svfprintf_r+0x50>
 800d3dc:	9803      	ldr	r0, [sp, #12]
 800d3de:	2140      	movs	r1, #64	@ 0x40
 800d3e0:	f7fd fb6c 	bl	800aabc <_malloc_r>
 800d3e4:	9b06      	ldr	r3, [sp, #24]
 800d3e6:	6018      	str	r0, [r3, #0]
 800d3e8:	6118      	str	r0, [r3, #16]
 800d3ea:	b930      	cbnz	r0, 800d3fa <_svfprintf_r+0x4a>
 800d3ec:	9a03      	ldr	r2, [sp, #12]
 800d3ee:	230c      	movs	r3, #12
 800d3f0:	6013      	str	r3, [r2, #0]
 800d3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d3f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d3f8:	e1f5      	b.n	800d7e6 <_svfprintf_r+0x436>
 800d3fa:	9a06      	ldr	r2, [sp, #24]
 800d3fc:	2340      	movs	r3, #64	@ 0x40
 800d3fe:	6153      	str	r3, [r2, #20]
 800d400:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 800d650 <_svfprintf_r+0x2a0>
 800d404:	2300      	movs	r3, #0
 800d406:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800d40a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d40e:	ac29      	add	r4, sp, #164	@ 0xa4
 800d410:	9426      	str	r4, [sp, #152]	@ 0x98
 800d412:	9304      	str	r3, [sp, #16]
 800d414:	931a      	str	r3, [sp, #104]	@ 0x68
 800d416:	9317      	str	r3, [sp, #92]	@ 0x5c
 800d418:	930a      	str	r3, [sp, #40]	@ 0x28
 800d41a:	9314      	str	r3, [sp, #80]	@ 0x50
 800d41c:	9316      	str	r3, [sp, #88]	@ 0x58
 800d41e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d420:	465b      	mov	r3, fp
 800d422:	461d      	mov	r5, r3
 800d424:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d428:	b10a      	cbz	r2, 800d42e <_svfprintf_r+0x7e>
 800d42a:	2a25      	cmp	r2, #37	@ 0x25
 800d42c:	d1f9      	bne.n	800d422 <_svfprintf_r+0x72>
 800d42e:	ebb5 060b 	subs.w	r6, r5, fp
 800d432:	d00d      	beq.n	800d450 <_svfprintf_r+0xa0>
 800d434:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d436:	4433      	add	r3, r6
 800d438:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d43a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d43c:	3301      	adds	r3, #1
 800d43e:	2b07      	cmp	r3, #7
 800d440:	e9c4 b600 	strd	fp, r6, [r4]
 800d444:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d446:	dc75      	bgt.n	800d534 <_svfprintf_r+0x184>
 800d448:	3408      	adds	r4, #8
 800d44a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d44c:	4433      	add	r3, r6
 800d44e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d450:	782b      	ldrb	r3, [r5, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	f001 8140 	beq.w	800e6d8 <_svfprintf_r+0x1328>
 800d458:	2200      	movs	r2, #0
 800d45a:	1c6b      	adds	r3, r5, #1
 800d45c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800d460:	f04f 36ff 	mov.w	r6, #4294967295
 800d464:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d466:	4615      	mov	r5, r2
 800d468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d46c:	9207      	str	r2, [sp, #28]
 800d46e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d470:	9b07      	ldr	r3, [sp, #28]
 800d472:	3b20      	subs	r3, #32
 800d474:	2b5a      	cmp	r3, #90	@ 0x5a
 800d476:	f200 859d 	bhi.w	800dfb4 <_svfprintf_r+0xc04>
 800d47a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d47e:	009e      	.short	0x009e
 800d480:	059b059b 	.word	0x059b059b
 800d484:	059b00a6 	.word	0x059b00a6
 800d488:	059b059b 	.word	0x059b059b
 800d48c:	059b0086 	.word	0x059b0086
 800d490:	00a9059b 	.word	0x00a9059b
 800d494:	059b00b3 	.word	0x059b00b3
 800d498:	00b500b0 	.word	0x00b500b0
 800d49c:	00d0059b 	.word	0x00d0059b
 800d4a0:	00d300d3 	.word	0x00d300d3
 800d4a4:	00d300d3 	.word	0x00d300d3
 800d4a8:	00d300d3 	.word	0x00d300d3
 800d4ac:	00d300d3 	.word	0x00d300d3
 800d4b0:	059b00d3 	.word	0x059b00d3
 800d4b4:	059b059b 	.word	0x059b059b
 800d4b8:	059b059b 	.word	0x059b059b
 800d4bc:	059b059b 	.word	0x059b059b
 800d4c0:	059b014a 	.word	0x059b014a
 800d4c4:	011b0109 	.word	0x011b0109
 800d4c8:	014a014a 	.word	0x014a014a
 800d4cc:	059b014a 	.word	0x059b014a
 800d4d0:	059b059b 	.word	0x059b059b
 800d4d4:	00e6059b 	.word	0x00e6059b
 800d4d8:	059b059b 	.word	0x059b059b
 800d4dc:	059b0494 	.word	0x059b0494
 800d4e0:	059b059b 	.word	0x059b059b
 800d4e4:	059b04de 	.word	0x059b04de
 800d4e8:	059b04fd 	.word	0x059b04fd
 800d4ec:	0520059b 	.word	0x0520059b
 800d4f0:	059b059b 	.word	0x059b059b
 800d4f4:	059b059b 	.word	0x059b059b
 800d4f8:	059b059b 	.word	0x059b059b
 800d4fc:	059b059b 	.word	0x059b059b
 800d500:	059b014a 	.word	0x059b014a
 800d504:	011d0109 	.word	0x011d0109
 800d508:	014a014a 	.word	0x014a014a
 800d50c:	00ef014a 	.word	0x00ef014a
 800d510:	0103011d 	.word	0x0103011d
 800d514:	00fc059b 	.word	0x00fc059b
 800d518:	0475059b 	.word	0x0475059b
 800d51c:	04cc0496 	.word	0x04cc0496
 800d520:	059b0103 	.word	0x059b0103
 800d524:	009c04de 	.word	0x009c04de
 800d528:	059b04ff 	.word	0x059b04ff
 800d52c:	0065059b 	.word	0x0065059b
 800d530:	009c059b 	.word	0x009c059b
 800d534:	9906      	ldr	r1, [sp, #24]
 800d536:	9803      	ldr	r0, [sp, #12]
 800d538:	aa26      	add	r2, sp, #152	@ 0x98
 800d53a:	f001 f90f 	bl	800e75c <__ssprint_r>
 800d53e:	2800      	cmp	r0, #0
 800d540:	f040 814c 	bne.w	800d7dc <_svfprintf_r+0x42c>
 800d544:	ac29      	add	r4, sp, #164	@ 0xa4
 800d546:	e780      	b.n	800d44a <_svfprintf_r+0x9a>
 800d548:	4b43      	ldr	r3, [pc, #268]	@ (800d658 <_svfprintf_r+0x2a8>)
 800d54a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d54c:	f015 0320 	ands.w	r3, r5, #32
 800d550:	f000 84b8 	beq.w	800dec4 <_svfprintf_r+0xb14>
 800d554:	3707      	adds	r7, #7
 800d556:	f027 0307 	bic.w	r3, r7, #7
 800d55a:	461a      	mov	r2, r3
 800d55c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800d560:	f852 7b08 	ldr.w	r7, [r2], #8
 800d564:	9208      	str	r2, [sp, #32]
 800d566:	07e8      	lsls	r0, r5, #31
 800d568:	d50a      	bpl.n	800d580 <_svfprintf_r+0x1d0>
 800d56a:	ea57 0308 	orrs.w	r3, r7, r8
 800d56e:	d007      	beq.n	800d580 <_svfprintf_r+0x1d0>
 800d570:	2330      	movs	r3, #48	@ 0x30
 800d572:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800d576:	9b07      	ldr	r3, [sp, #28]
 800d578:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800d57c:	f045 0502 	orr.w	r5, r5, #2
 800d580:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800d584:	2302      	movs	r3, #2
 800d586:	f000 bc1f 	b.w	800ddc8 <_svfprintf_r+0xa18>
 800d58a:	9803      	ldr	r0, [sp, #12]
 800d58c:	f001 fa12 	bl	800e9b4 <_localeconv_r>
 800d590:	6843      	ldr	r3, [r0, #4]
 800d592:	9316      	str	r3, [sp, #88]	@ 0x58
 800d594:	4618      	mov	r0, r3
 800d596:	f7f2 fe73 	bl	8000280 <strlen>
 800d59a:	9014      	str	r0, [sp, #80]	@ 0x50
 800d59c:	9803      	ldr	r0, [sp, #12]
 800d59e:	f001 fa09 	bl	800e9b4 <_localeconv_r>
 800d5a2:	6883      	ldr	r3, [r0, #8]
 800d5a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d5a8:	b12b      	cbz	r3, 800d5b6 <_svfprintf_r+0x206>
 800d5aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5ac:	b11b      	cbz	r3, 800d5b6 <_svfprintf_r+0x206>
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	b10b      	cbz	r3, 800d5b6 <_svfprintf_r+0x206>
 800d5b2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800d5b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5b8:	e756      	b.n	800d468 <_svfprintf_r+0xb8>
 800d5ba:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1f9      	bne.n	800d5b6 <_svfprintf_r+0x206>
 800d5c2:	2320      	movs	r3, #32
 800d5c4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800d5c8:	e7f5      	b.n	800d5b6 <_svfprintf_r+0x206>
 800d5ca:	f045 0501 	orr.w	r5, r5, #1
 800d5ce:	e7f2      	b.n	800d5b6 <_svfprintf_r+0x206>
 800d5d0:	f857 3b04 	ldr.w	r3, [r7], #4
 800d5d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	daed      	bge.n	800d5b6 <_svfprintf_r+0x206>
 800d5da:	425b      	negs	r3, r3
 800d5dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d5de:	f045 0504 	orr.w	r5, r5, #4
 800d5e2:	e7e8      	b.n	800d5b6 <_svfprintf_r+0x206>
 800d5e4:	232b      	movs	r3, #43	@ 0x2b
 800d5e6:	e7ed      	b.n	800d5c4 <_svfprintf_r+0x214>
 800d5e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5ee:	9207      	str	r2, [sp, #28]
 800d5f0:	2a2a      	cmp	r2, #42	@ 0x2a
 800d5f2:	d111      	bne.n	800d618 <_svfprintf_r+0x268>
 800d5f4:	f857 6b04 	ldr.w	r6, [r7], #4
 800d5f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5fa:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800d5fe:	e7da      	b.n	800d5b6 <_svfprintf_r+0x206>
 800d600:	fb01 2606 	mla	r6, r1, r6, r2
 800d604:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d608:	9207      	str	r2, [sp, #28]
 800d60a:	9a07      	ldr	r2, [sp, #28]
 800d60c:	3a30      	subs	r2, #48	@ 0x30
 800d60e:	2a09      	cmp	r2, #9
 800d610:	d9f6      	bls.n	800d600 <_svfprintf_r+0x250>
 800d612:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800d616:	e72a      	b.n	800d46e <_svfprintf_r+0xbe>
 800d618:	2600      	movs	r6, #0
 800d61a:	210a      	movs	r1, #10
 800d61c:	e7f5      	b.n	800d60a <_svfprintf_r+0x25a>
 800d61e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800d622:	e7c8      	b.n	800d5b6 <_svfprintf_r+0x206>
 800d624:	2300      	movs	r3, #0
 800d626:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d628:	220a      	movs	r2, #10
 800d62a:	9b07      	ldr	r3, [sp, #28]
 800d62c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d62e:	3b30      	subs	r3, #48	@ 0x30
 800d630:	fb02 3301 	mla	r3, r2, r1, r3
 800d634:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d638:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d63c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d63e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d642:	2b09      	cmp	r3, #9
 800d644:	9107      	str	r1, [sp, #28]
 800d646:	d9f0      	bls.n	800d62a <_svfprintf_r+0x27a>
 800d648:	e712      	b.n	800d470 <_svfprintf_r+0xc0>
 800d64a:	f045 0508 	orr.w	r5, r5, #8
 800d64e:	e7b2      	b.n	800d5b6 <_svfprintf_r+0x206>
	...
 800d658:	08011b5c 	.word	0x08011b5c
 800d65c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b68      	cmp	r3, #104	@ 0x68
 800d662:	bf01      	itttt	eq
 800d664:	9b0b      	ldreq	r3, [sp, #44]	@ 0x2c
 800d666:	3301      	addeq	r3, #1
 800d668:	930b      	streq	r3, [sp, #44]	@ 0x2c
 800d66a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800d66e:	bf18      	it	ne
 800d670:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800d674:	e79f      	b.n	800d5b6 <_svfprintf_r+0x206>
 800d676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	2b6c      	cmp	r3, #108	@ 0x6c
 800d67c:	d105      	bne.n	800d68a <_svfprintf_r+0x2da>
 800d67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d680:	3301      	adds	r3, #1
 800d682:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d684:	f045 0520 	orr.w	r5, r5, #32
 800d688:	e795      	b.n	800d5b6 <_svfprintf_r+0x206>
 800d68a:	f045 0510 	orr.w	r5, r5, #16
 800d68e:	e792      	b.n	800d5b6 <_svfprintf_r+0x206>
 800d690:	463a      	mov	r2, r7
 800d692:	f852 3b04 	ldr.w	r3, [r2], #4
 800d696:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800d69a:	2300      	movs	r3, #0
 800d69c:	9208      	str	r2, [sp, #32]
 800d69e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800d6a2:	469a      	mov	sl, r3
 800d6a4:	2601      	movs	r6, #1
 800d6a6:	4699      	mov	r9, r3
 800d6a8:	4698      	mov	r8, r3
 800d6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ac:	461f      	mov	r7, r3
 800d6ae:	f10d 0be4 	add.w	fp, sp, #228	@ 0xe4
 800d6b2:	e1b4      	b.n	800da1e <_svfprintf_r+0x66e>
 800d6b4:	f045 0510 	orr.w	r5, r5, #16
 800d6b8:	06ab      	lsls	r3, r5, #26
 800d6ba:	d514      	bpl.n	800d6e6 <_svfprintf_r+0x336>
 800d6bc:	3707      	adds	r7, #7
 800d6be:	f027 0307 	bic.w	r3, r7, #7
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800d6c8:	f852 7b08 	ldr.w	r7, [r2], #8
 800d6cc:	9208      	str	r2, [sp, #32]
 800d6ce:	f1b8 0f00 	cmp.w	r8, #0
 800d6d2:	da06      	bge.n	800d6e2 <_svfprintf_r+0x332>
 800d6d4:	427f      	negs	r7, r7
 800d6d6:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800d6da:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 800d6de:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e373      	b.n	800ddce <_svfprintf_r+0xa1e>
 800d6e6:	463a      	mov	r2, r7
 800d6e8:	06ef      	lsls	r7, r5, #27
 800d6ea:	f852 3b04 	ldr.w	r3, [r2], #4
 800d6ee:	9208      	str	r2, [sp, #32]
 800d6f0:	d503      	bpl.n	800d6fa <_svfprintf_r+0x34a>
 800d6f2:	461f      	mov	r7, r3
 800d6f4:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800d6f8:	e7e9      	b.n	800d6ce <_svfprintf_r+0x31e>
 800d6fa:	0668      	lsls	r0, r5, #25
 800d6fc:	d503      	bpl.n	800d706 <_svfprintf_r+0x356>
 800d6fe:	b21f      	sxth	r7, r3
 800d700:	f343 38c0 	sbfx	r8, r3, #15, #1
 800d704:	e7e3      	b.n	800d6ce <_svfprintf_r+0x31e>
 800d706:	05a9      	lsls	r1, r5, #22
 800d708:	d5f3      	bpl.n	800d6f2 <_svfprintf_r+0x342>
 800d70a:	b25f      	sxtb	r7, r3
 800d70c:	f343 18c0 	sbfx	r8, r3, #7, #1
 800d710:	e7dd      	b.n	800d6ce <_svfprintf_r+0x31e>
 800d712:	3707      	adds	r7, #7
 800d714:	f027 0307 	bic.w	r3, r7, #7
 800d718:	ecb3 7b02 	vldmia	r3!, {d7}
 800d71c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d720:	9308      	str	r3, [sp, #32]
 800d722:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d724:	9318      	str	r3, [sp, #96]	@ 0x60
 800d726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d728:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d72c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d72e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 800d732:	4b6e      	ldr	r3, [pc, #440]	@ (800d8ec <_svfprintf_r+0x53c>)
 800d734:	f04f 32ff 	mov.w	r2, #4294967295
 800d738:	f7f3 fa00 	bl	8000b3c <__aeabi_dcmpun>
 800d73c:	bb00      	cbnz	r0, 800d780 <_svfprintf_r+0x3d0>
 800d73e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 800d742:	4b6a      	ldr	r3, [pc, #424]	@ (800d8ec <_svfprintf_r+0x53c>)
 800d744:	f04f 32ff 	mov.w	r2, #4294967295
 800d748:	f7f3 f9da 	bl	8000b00 <__aeabi_dcmple>
 800d74c:	b9c0      	cbnz	r0, 800d780 <_svfprintf_r+0x3d0>
 800d74e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d752:	2200      	movs	r2, #0
 800d754:	2300      	movs	r3, #0
 800d756:	f7f3 f9c9 	bl	8000aec <__aeabi_dcmplt>
 800d75a:	b110      	cbz	r0, 800d762 <_svfprintf_r+0x3b2>
 800d75c:	232d      	movs	r3, #45	@ 0x2d
 800d75e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800d762:	4a63      	ldr	r2, [pc, #396]	@ (800d8f0 <_svfprintf_r+0x540>)
 800d764:	4b63      	ldr	r3, [pc, #396]	@ (800d8f4 <_svfprintf_r+0x544>)
 800d766:	9907      	ldr	r1, [sp, #28]
 800d768:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800d76c:	2947      	cmp	r1, #71	@ 0x47
 800d76e:	bfcc      	ite	gt
 800d770:	4693      	movgt	fp, r2
 800d772:	469b      	movle	fp, r3
 800d774:	f04f 0a00 	mov.w	sl, #0
 800d778:	2603      	movs	r6, #3
 800d77a:	46d1      	mov	r9, sl
 800d77c:	f000 bfe3 	b.w	800e746 <_svfprintf_r+0x1396>
 800d780:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d784:	4610      	mov	r0, r2
 800d786:	4619      	mov	r1, r3
 800d788:	f7f3 f9d8 	bl	8000b3c <__aeabi_dcmpun>
 800d78c:	4682      	mov	sl, r0
 800d78e:	b140      	cbz	r0, 800d7a2 <_svfprintf_r+0x3f2>
 800d790:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d792:	4a59      	ldr	r2, [pc, #356]	@ (800d8f8 <_svfprintf_r+0x548>)
 800d794:	2b00      	cmp	r3, #0
 800d796:	bfbc      	itt	lt
 800d798:	232d      	movlt	r3, #45	@ 0x2d
 800d79a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800d79e:	4b57      	ldr	r3, [pc, #348]	@ (800d8fc <_svfprintf_r+0x54c>)
 800d7a0:	e7e1      	b.n	800d766 <_svfprintf_r+0x3b6>
 800d7a2:	9b07      	ldr	r3, [sp, #28]
 800d7a4:	2b61      	cmp	r3, #97	@ 0x61
 800d7a6:	d022      	beq.n	800d7ee <_svfprintf_r+0x43e>
 800d7a8:	2b41      	cmp	r3, #65	@ 0x41
 800d7aa:	d122      	bne.n	800d7f2 <_svfprintf_r+0x442>
 800d7ac:	2358      	movs	r3, #88	@ 0x58
 800d7ae:	2230      	movs	r2, #48	@ 0x30
 800d7b0:	2e63      	cmp	r6, #99	@ 0x63
 800d7b2:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800d7b6:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800d7ba:	f045 0502 	orr.w	r5, r5, #2
 800d7be:	f340 8081 	ble.w	800d8c4 <_svfprintf_r+0x514>
 800d7c2:	9803      	ldr	r0, [sp, #12]
 800d7c4:	1c71      	adds	r1, r6, #1
 800d7c6:	f7fd f979 	bl	800aabc <_malloc_r>
 800d7ca:	4683      	mov	fp, r0
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d17e      	bne.n	800d8ce <_svfprintf_r+0x51e>
 800d7d0:	9b06      	ldr	r3, [sp, #24]
 800d7d2:	9a06      	ldr	r2, [sp, #24]
 800d7d4:	899b      	ldrh	r3, [r3, #12]
 800d7d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7da:	8193      	strh	r3, [r2, #12]
 800d7dc:	9b06      	ldr	r3, [sp, #24]
 800d7de:	899b      	ldrh	r3, [r3, #12]
 800d7e0:	065b      	lsls	r3, r3, #25
 800d7e2:	f53f ae06 	bmi.w	800d3f2 <_svfprintf_r+0x42>
 800d7e6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d7e8:	b053      	add	sp, #332	@ 0x14c
 800d7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ee:	2378      	movs	r3, #120	@ 0x78
 800d7f0:	e7dd      	b.n	800d7ae <_svfprintf_r+0x3fe>
 800d7f2:	1c72      	adds	r2, r6, #1
 800d7f4:	d06d      	beq.n	800d8d2 <_svfprintf_r+0x522>
 800d7f6:	9b07      	ldr	r3, [sp, #28]
 800d7f8:	f023 0320 	bic.w	r3, r3, #32
 800d7fc:	2b47      	cmp	r3, #71	@ 0x47
 800d7fe:	d101      	bne.n	800d804 <_svfprintf_r+0x454>
 800d800:	2e00      	cmp	r6, #0
 800d802:	d068      	beq.n	800d8d6 <_svfprintf_r+0x526>
 800d804:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800d808:	9311      	str	r3, [sp, #68]	@ 0x44
 800d80a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	da65      	bge.n	800d8dc <_svfprintf_r+0x52c>
 800d810:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d812:	9312      	str	r3, [sp, #72]	@ 0x48
 800d814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d816:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d81a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d81c:	232d      	movs	r3, #45	@ 0x2d
 800d81e:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d820:	9b07      	ldr	r3, [sp, #28]
 800d822:	f023 0820 	bic.w	r8, r3, #32
 800d826:	f1b8 0f41 	cmp.w	r8, #65	@ 0x41
 800d82a:	f040 81d9 	bne.w	800dbe0 <_svfprintf_r+0x830>
 800d82e:	a820      	add	r0, sp, #128	@ 0x80
 800d830:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 800d834:	f001 f8d6 	bl	800e9e4 <frexp>
 800d838:	2200      	movs	r2, #0
 800d83a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d83e:	ec51 0b10 	vmov	r0, r1, d0
 800d842:	f7f2 fee1 	bl	8000608 <__aeabi_dmul>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d84e:	2200      	movs	r2, #0
 800d850:	2300      	movs	r3, #0
 800d852:	f7f3 f941 	bl	8000ad8 <__aeabi_dcmpeq>
 800d856:	b108      	cbz	r0, 800d85c <_svfprintf_r+0x4ac>
 800d858:	2301      	movs	r3, #1
 800d85a:	9320      	str	r3, [sp, #128]	@ 0x80
 800d85c:	4a28      	ldr	r2, [pc, #160]	@ (800d900 <_svfprintf_r+0x550>)
 800d85e:	4b29      	ldr	r3, [pc, #164]	@ (800d904 <_svfprintf_r+0x554>)
 800d860:	9907      	ldr	r1, [sp, #28]
 800d862:	2961      	cmp	r1, #97	@ 0x61
 800d864:	bf08      	it	eq
 800d866:	461a      	moveq	r2, r3
 800d868:	9209      	str	r2, [sp, #36]	@ 0x24
 800d86a:	3e01      	subs	r6, #1
 800d86c:	465f      	mov	r7, fp
 800d86e:	4b26      	ldr	r3, [pc, #152]	@ (800d908 <_svfprintf_r+0x558>)
 800d870:	2200      	movs	r2, #0
 800d872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d876:	f7f2 fec7 	bl	8000608 <__aeabi_dmul>
 800d87a:	4680      	mov	r8, r0
 800d87c:	4689      	mov	r9, r1
 800d87e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800d882:	f7f3 f971 	bl	8000b68 <__aeabi_d2iz>
 800d886:	4680      	mov	r8, r0
 800d888:	f7f2 fe54 	bl	8000534 <__aeabi_i2d>
 800d88c:	4602      	mov	r2, r0
 800d88e:	460b      	mov	r3, r1
 800d890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d894:	f7f2 fd00 	bl	8000298 <__aeabi_dsub>
 800d898:	460b      	mov	r3, r1
 800d89a:	4602      	mov	r2, r0
 800d89c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d8a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8a2:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d8a6:	f807 3b01 	strb.w	r3, [r7], #1
 800d8aa:	1c73      	adds	r3, r6, #1
 800d8ac:	d02e      	beq.n	800d90c <_svfprintf_r+0x55c>
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	f106 38ff 	add.w	r8, r6, #4294967295
 800d8b6:	f7f3 f90f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8ba:	b1a8      	cbz	r0, 800d8e8 <_svfprintf_r+0x538>
 800d8bc:	463b      	mov	r3, r7
 800d8be:	19b9      	adds	r1, r7, r6
 800d8c0:	2030      	movs	r0, #48	@ 0x30
 800d8c2:	e184      	b.n	800dbce <_svfprintf_r+0x81e>
 800d8c4:	f04f 0a00 	mov.w	sl, #0
 800d8c8:	f10d 0be4 	add.w	fp, sp, #228	@ 0xe4
 800d8cc:	e79a      	b.n	800d804 <_svfprintf_r+0x454>
 800d8ce:	4682      	mov	sl, r0
 800d8d0:	e798      	b.n	800d804 <_svfprintf_r+0x454>
 800d8d2:	2606      	movs	r6, #6
 800d8d4:	e796      	b.n	800d804 <_svfprintf_r+0x454>
 800d8d6:	46b2      	mov	sl, r6
 800d8d8:	2601      	movs	r6, #1
 800d8da:	e793      	b.n	800d804 <_svfprintf_r+0x454>
 800d8dc:	ed9d 7b0c 	vldr	d7, [sp, #48]	@ 0x30
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 800d8e6:	e79a      	b.n	800d81e <_svfprintf_r+0x46e>
 800d8e8:	4646      	mov	r6, r8
 800d8ea:	e7c0      	b.n	800d86e <_svfprintf_r+0x4be>
 800d8ec:	7fefffff 	.word	0x7fefffff
 800d8f0:	08011b50 	.word	0x08011b50
 800d8f4:	08011b4c 	.word	0x08011b4c
 800d8f8:	08011b58 	.word	0x08011b58
 800d8fc:	08011b54 	.word	0x08011b54
 800d900:	08011b6d 	.word	0x08011b6d
 800d904:	08011b5c 	.word	0x08011b5c
 800d908:	40300000 	.word	0x40300000
 800d90c:	4baa      	ldr	r3, [pc, #680]	@ (800dbb8 <_svfprintf_r+0x808>)
 800d90e:	2200      	movs	r2, #0
 800d910:	f7f3 f90a 	bl	8000b28 <__aeabi_dcmpgt>
 800d914:	b950      	cbnz	r0, 800d92c <_svfprintf_r+0x57c>
 800d916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d91a:	4ba7      	ldr	r3, [pc, #668]	@ (800dbb8 <_svfprintf_r+0x808>)
 800d91c:	2200      	movs	r2, #0
 800d91e:	f7f3 f8db 	bl	8000ad8 <__aeabi_dcmpeq>
 800d922:	2800      	cmp	r0, #0
 800d924:	d0ca      	beq.n	800d8bc <_svfprintf_r+0x50c>
 800d926:	f018 0f01 	tst.w	r8, #1
 800d92a:	d0c7      	beq.n	800d8bc <_svfprintf_r+0x50c>
 800d92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d92e:	9724      	str	r7, [sp, #144]	@ 0x90
 800d930:	7bd9      	ldrb	r1, [r3, #15]
 800d932:	2030      	movs	r0, #48	@ 0x30
 800d934:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d936:	1e53      	subs	r3, r2, #1
 800d938:	9324      	str	r3, [sp, #144]	@ 0x90
 800d93a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800d93e:	428b      	cmp	r3, r1
 800d940:	f000 8140 	beq.w	800dbc4 <_svfprintf_r+0x814>
 800d944:	2b39      	cmp	r3, #57	@ 0x39
 800d946:	bf0b      	itete	eq
 800d948:	9b09      	ldreq	r3, [sp, #36]	@ 0x24
 800d94a:	3301      	addne	r3, #1
 800d94c:	7a9b      	ldrbeq	r3, [r3, #10]
 800d94e:	b2db      	uxtbne	r3, r3
 800d950:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d954:	eba7 030b 	sub.w	r3, r7, fp
 800d958:	9304      	str	r3, [sp, #16]
 800d95a:	9907      	ldr	r1, [sp, #28]
 800d95c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800d960:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800d962:	f021 0120 	bic.w	r1, r1, #32
 800d966:	2941      	cmp	r1, #65	@ 0x41
 800d968:	bf08      	it	eq
 800d96a:	320f      	addeq	r2, #15
 800d96c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d970:	bf06      	itte	eq
 800d972:	b2d2      	uxtbeq	r2, r2
 800d974:	2101      	moveq	r1, #1
 800d976:	2100      	movne	r1, #0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	9320      	str	r3, [sp, #128]	@ 0x80
 800d97c:	bfb8      	it	lt
 800d97e:	f1c0 0301 	rsblt	r3, r0, #1
 800d982:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800d986:	bfb4      	ite	lt
 800d988:	222d      	movlt	r2, #45	@ 0x2d
 800d98a:	222b      	movge	r2, #43	@ 0x2b
 800d98c:	2b09      	cmp	r3, #9
 800d98e:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800d992:	f340 8192 	ble.w	800dcba <_svfprintf_r+0x90a>
 800d996:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800d99a:	270a      	movs	r7, #10
 800d99c:	4602      	mov	r2, r0
 800d99e:	fbb3 f6f7 	udiv	r6, r3, r7
 800d9a2:	fb07 3116 	mls	r1, r7, r6, r3
 800d9a6:	3130      	adds	r1, #48	@ 0x30
 800d9a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	2963      	cmp	r1, #99	@ 0x63
 800d9b0:	f100 30ff 	add.w	r0, r0, #4294967295
 800d9b4:	4633      	mov	r3, r6
 800d9b6:	dcf1      	bgt.n	800d99c <_svfprintf_r+0x5ec>
 800d9b8:	3330      	adds	r3, #48	@ 0x30
 800d9ba:	1e91      	subs	r1, r2, #2
 800d9bc:	f800 3c01 	strb.w	r3, [r0, #-1]
 800d9c0:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800d9ca:	4283      	cmp	r3, r0
 800d9cc:	f0c0 8170 	bcc.w	800dcb0 <_svfprintf_r+0x900>
 800d9d0:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800d9d4:	1a9b      	subs	r3, r3, r2
 800d9d6:	4281      	cmp	r1, r0
 800d9d8:	bf88      	it	hi
 800d9da:	2300      	movhi	r3, #0
 800d9dc:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800d9e0:	441a      	add	r2, r3
 800d9e2:	ab22      	add	r3, sp, #136	@ 0x88
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	9317      	str	r3, [sp, #92]	@ 0x5c
 800d9e8:	9b04      	ldr	r3, [sp, #16]
 800d9ea:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	eb03 0602 	add.w	r6, r3, r2
 800d9f2:	dc01      	bgt.n	800d9f8 <_svfprintf_r+0x648>
 800d9f4:	07e8      	lsls	r0, r5, #31
 800d9f6:	d501      	bpl.n	800d9fc <_svfprintf_r+0x64c>
 800d9f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9fa:	441e      	add	r6, r3
 800d9fc:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800da00:	f04f 0800 	mov.w	r8, #0
 800da04:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800da08:	9311      	str	r3, [sp, #68]	@ 0x44
 800da0a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 800da0e:	4647      	mov	r7, r8
 800da10:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800da12:	2b00      	cmp	r3, #0
 800da14:	f040 81a4 	bne.w	800dd60 <_svfprintf_r+0x9b0>
 800da18:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800da1a:	f04f 0900 	mov.w	r9, #0
 800da1e:	45b1      	cmp	r9, r6
 800da20:	464b      	mov	r3, r9
 800da22:	bfb8      	it	lt
 800da24:	4633      	movlt	r3, r6
 800da26:	9311      	str	r3, [sp, #68]	@ 0x44
 800da28:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800da2c:	b113      	cbz	r3, 800da34 <_svfprintf_r+0x684>
 800da2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da30:	3301      	adds	r3, #1
 800da32:	9311      	str	r3, [sp, #68]	@ 0x44
 800da34:	f015 0302 	ands.w	r3, r5, #2
 800da38:	931b      	str	r3, [sp, #108]	@ 0x6c
 800da3a:	bf1e      	ittt	ne
 800da3c:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 800da3e:	3302      	addne	r3, #2
 800da40:	9311      	strne	r3, [sp, #68]	@ 0x44
 800da42:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800da46:	931c      	str	r3, [sp, #112]	@ 0x70
 800da48:	d120      	bne.n	800da8c <_svfprintf_r+0x6dc>
 800da4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800da4e:	1a9b      	subs	r3, r3, r2
 800da50:	2b00      	cmp	r3, #0
 800da52:	dd1b      	ble.n	800da8c <_svfprintf_r+0x6dc>
 800da54:	e9dd 2c27 	ldrd	r2, ip, [sp, #156]	@ 0x9c
 800da58:	4958      	ldr	r1, [pc, #352]	@ (800dbbc <_svfprintf_r+0x80c>)
 800da5a:	6021      	str	r1, [r4, #0]
 800da5c:	2b10      	cmp	r3, #16
 800da5e:	f102 0201 	add.w	r2, r2, #1
 800da62:	f104 0008 	add.w	r0, r4, #8
 800da66:	f300 82b1 	bgt.w	800dfcc <_svfprintf_r+0xc1c>
 800da6a:	eb0c 0103 	add.w	r1, ip, r3
 800da6e:	2a07      	cmp	r2, #7
 800da70:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 800da74:	6063      	str	r3, [r4, #4]
 800da76:	f340 82be 	ble.w	800dff6 <_svfprintf_r+0xc46>
 800da7a:	9906      	ldr	r1, [sp, #24]
 800da7c:	9803      	ldr	r0, [sp, #12]
 800da7e:	aa26      	add	r2, sp, #152	@ 0x98
 800da80:	f000 fe6c 	bl	800e75c <__ssprint_r>
 800da84:	2800      	cmp	r0, #0
 800da86:	f040 8605 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800da8a:	ac29      	add	r4, sp, #164	@ 0xa4
 800da8c:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800da90:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800da92:	b16a      	cbz	r2, 800dab0 <_svfprintf_r+0x700>
 800da94:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800da98:	6022      	str	r2, [r4, #0]
 800da9a:	2201      	movs	r2, #1
 800da9c:	4413      	add	r3, r2
 800da9e:	9328      	str	r3, [sp, #160]	@ 0xa0
 800daa0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800daa2:	6062      	str	r2, [r4, #4]
 800daa4:	4413      	add	r3, r2
 800daa6:	2b07      	cmp	r3, #7
 800daa8:	9327      	str	r3, [sp, #156]	@ 0x9c
 800daaa:	f300 82a6 	bgt.w	800dffa <_svfprintf_r+0xc4a>
 800daae:	3408      	adds	r4, #8
 800dab0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800dab2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800dab4:	b162      	cbz	r2, 800dad0 <_svfprintf_r+0x720>
 800dab6:	aa1f      	add	r2, sp, #124	@ 0x7c
 800dab8:	6022      	str	r2, [r4, #0]
 800daba:	2202      	movs	r2, #2
 800dabc:	4413      	add	r3, r2
 800dabe:	9328      	str	r3, [sp, #160]	@ 0xa0
 800dac0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800dac2:	6062      	str	r2, [r4, #4]
 800dac4:	3301      	adds	r3, #1
 800dac6:	2b07      	cmp	r3, #7
 800dac8:	9327      	str	r3, [sp, #156]	@ 0x9c
 800daca:	f300 82a0 	bgt.w	800e00e <_svfprintf_r+0xc5e>
 800dace:	3408      	adds	r4, #8
 800dad0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800dad2:	2b80      	cmp	r3, #128	@ 0x80
 800dad4:	d120      	bne.n	800db18 <_svfprintf_r+0x768>
 800dad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dad8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dada:	1a9b      	subs	r3, r3, r2
 800dadc:	2b00      	cmp	r3, #0
 800dade:	dd1b      	ble.n	800db18 <_svfprintf_r+0x768>
 800dae0:	e9dd 2c27 	ldrd	r2, ip, [sp, #156]	@ 0x9c
 800dae4:	4936      	ldr	r1, [pc, #216]	@ (800dbc0 <_svfprintf_r+0x810>)
 800dae6:	6021      	str	r1, [r4, #0]
 800dae8:	2b10      	cmp	r3, #16
 800daea:	f102 0201 	add.w	r2, r2, #1
 800daee:	f104 0008 	add.w	r0, r4, #8
 800daf2:	f300 8296 	bgt.w	800e022 <_svfprintf_r+0xc72>
 800daf6:	eb0c 0103 	add.w	r1, ip, r3
 800dafa:	2a07      	cmp	r2, #7
 800dafc:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 800db00:	6063      	str	r3, [r4, #4]
 800db02:	f340 82a3 	ble.w	800e04c <_svfprintf_r+0xc9c>
 800db06:	9906      	ldr	r1, [sp, #24]
 800db08:	9803      	ldr	r0, [sp, #12]
 800db0a:	aa26      	add	r2, sp, #152	@ 0x98
 800db0c:	f000 fe26 	bl	800e75c <__ssprint_r>
 800db10:	2800      	cmp	r0, #0
 800db12:	f040 85bf 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800db16:	ac29      	add	r4, sp, #164	@ 0xa4
 800db18:	eba9 0906 	sub.w	r9, r9, r6
 800db1c:	f1b9 0f00 	cmp.w	r9, #0
 800db20:	dd1c      	ble.n	800db5c <_svfprintf_r+0x7ac>
 800db22:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800db26:	4826      	ldr	r0, [pc, #152]	@ (800dbc0 <_svfprintf_r+0x810>)
 800db28:	6020      	str	r0, [r4, #0]
 800db2a:	f1b9 0f10 	cmp.w	r9, #16
 800db2e:	f102 0201 	add.w	r2, r2, #1
 800db32:	f104 0108 	add.w	r1, r4, #8
 800db36:	f300 828b 	bgt.w	800e050 <_svfprintf_r+0xca0>
 800db3a:	444b      	add	r3, r9
 800db3c:	2a07      	cmp	r2, #7
 800db3e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800db42:	f8c4 9004 	str.w	r9, [r4, #4]
 800db46:	f340 8297 	ble.w	800e078 <_svfprintf_r+0xcc8>
 800db4a:	9906      	ldr	r1, [sp, #24]
 800db4c:	9803      	ldr	r0, [sp, #12]
 800db4e:	aa26      	add	r2, sp, #152	@ 0x98
 800db50:	f000 fe04 	bl	800e75c <__ssprint_r>
 800db54:	2800      	cmp	r0, #0
 800db56:	f040 859d 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800db5a:	ac29      	add	r4, sp, #164	@ 0xa4
 800db5c:	05eb      	lsls	r3, r5, #23
 800db5e:	f8dd 90a0 	ldr.w	r9, [sp, #160]	@ 0xa0
 800db62:	f100 828f 	bmi.w	800e084 <_svfprintf_r+0xcd4>
 800db66:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800db68:	3301      	adds	r3, #1
 800db6a:	e9c4 b600 	strd	fp, r6, [r4]
 800db6e:	2b07      	cmp	r3, #7
 800db70:	444e      	add	r6, r9
 800db72:	9628      	str	r6, [sp, #160]	@ 0xa0
 800db74:	9327      	str	r3, [sp, #156]	@ 0x9c
 800db76:	f300 82ca 	bgt.w	800e10e <_svfprintf_r+0xd5e>
 800db7a:	3408      	adds	r4, #8
 800db7c:	076a      	lsls	r2, r5, #29
 800db7e:	f100 856b 	bmi.w	800e658 <_svfprintf_r+0x12a8>
 800db82:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	@ 0x3c
 800db86:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800db88:	428a      	cmp	r2, r1
 800db8a:	bfac      	ite	ge
 800db8c:	189b      	addge	r3, r3, r2
 800db8e:	185b      	addlt	r3, r3, r1
 800db90:	9310      	str	r3, [sp, #64]	@ 0x40
 800db92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800db94:	b13b      	cbz	r3, 800dba6 <_svfprintf_r+0x7f6>
 800db96:	9906      	ldr	r1, [sp, #24]
 800db98:	9803      	ldr	r0, [sp, #12]
 800db9a:	aa26      	add	r2, sp, #152	@ 0x98
 800db9c:	f000 fdde 	bl	800e75c <__ssprint_r>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	f040 8577 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800dba6:	2300      	movs	r3, #0
 800dba8:	9327      	str	r3, [sp, #156]	@ 0x9c
 800dbaa:	f1ba 0f00 	cmp.w	sl, #0
 800dbae:	f040 858d 	bne.w	800e6cc <_svfprintf_r+0x131c>
 800dbb2:	9f08      	ldr	r7, [sp, #32]
 800dbb4:	ac29      	add	r4, sp, #164	@ 0xa4
 800dbb6:	e0e0      	b.n	800dd7a <_svfprintf_r+0x9ca>
 800dbb8:	3fe00000 	.word	0x3fe00000
 800dbbc:	08011e88 	.word	0x08011e88
 800dbc0:	08011e78 	.word	0x08011e78
 800dbc4:	f802 0c01 	strb.w	r0, [r2, #-1]
 800dbc8:	e6b4      	b.n	800d934 <_svfprintf_r+0x584>
 800dbca:	f803 0b01 	strb.w	r0, [r3], #1
 800dbce:	1aca      	subs	r2, r1, r3
 800dbd0:	2a00      	cmp	r2, #0
 800dbd2:	dafa      	bge.n	800dbca <_svfprintf_r+0x81a>
 800dbd4:	1c73      	adds	r3, r6, #1
 800dbd6:	3601      	adds	r6, #1
 800dbd8:	bfb8      	it	lt
 800dbda:	2300      	movlt	r3, #0
 800dbdc:	441f      	add	r7, r3
 800dbde:	e6b9      	b.n	800d954 <_svfprintf_r+0x5a4>
 800dbe0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dbe4:	d005      	beq.n	800dbf2 <_svfprintf_r+0x842>
 800dbe6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dbea:	d12f      	bne.n	800dc4c <_svfprintf_r+0x89c>
 800dbec:	1c77      	adds	r7, r6, #1
 800dbee:	2102      	movs	r1, #2
 800dbf0:	e001      	b.n	800dbf6 <_svfprintf_r+0x846>
 800dbf2:	4637      	mov	r7, r6
 800dbf4:	2103      	movs	r1, #3
 800dbf6:	ab24      	add	r3, sp, #144	@ 0x90
 800dbf8:	9301      	str	r3, [sp, #4]
 800dbfa:	ab21      	add	r3, sp, #132	@ 0x84
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 800dc02:	9803      	ldr	r0, [sp, #12]
 800dc04:	ab20      	add	r3, sp, #128	@ 0x80
 800dc06:	463a      	mov	r2, r7
 800dc08:	f001 f83e 	bl	800ec88 <_dtoa_r>
 800dc0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dc10:	4683      	mov	fp, r0
 800dc12:	d130      	bne.n	800dc76 <_svfprintf_r+0x8c6>
 800dc14:	07ea      	lsls	r2, r5, #31
 800dc16:	d41b      	bmi.n	800dc50 <_svfprintf_r+0x8a0>
 800dc18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800dc1a:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800dc1c:	eba3 030b 	sub.w	r3, r3, fp
 800dc20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dc24:	9304      	str	r3, [sp, #16]
 800dc26:	d03b      	beq.n	800dca0 <_svfprintf_r+0x8f0>
 800dc28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc2c:	f47f ae95 	bne.w	800d95a <_svfprintf_r+0x5aa>
 800dc30:	f005 0301 	and.w	r3, r5, #1
 800dc34:	2f00      	cmp	r7, #0
 800dc36:	ea43 0306 	orr.w	r3, r3, r6
 800dc3a:	dd58      	ble.n	800dcee <_svfprintf_r+0x93e>
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d060      	beq.n	800dd02 <_svfprintf_r+0x952>
 800dc40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc42:	18fb      	adds	r3, r7, r3
 800dc44:	441e      	add	r6, r3
 800dc46:	2366      	movs	r3, #102	@ 0x66
 800dc48:	9307      	str	r3, [sp, #28]
 800dc4a:	e05f      	b.n	800dd0c <_svfprintf_r+0x95c>
 800dc4c:	4637      	mov	r7, r6
 800dc4e:	e7ce      	b.n	800dbee <_svfprintf_r+0x83e>
 800dc50:	eb00 0907 	add.w	r9, r0, r7
 800dc54:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 800dc58:	2200      	movs	r2, #0
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	f7f2 ff3c 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc60:	b108      	cbz	r0, 800dc66 <_svfprintf_r+0x8b6>
 800dc62:	f8cd 9090 	str.w	r9, [sp, #144]	@ 0x90
 800dc66:	2230      	movs	r2, #48	@ 0x30
 800dc68:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800dc6a:	4599      	cmp	r9, r3
 800dc6c:	d9d4      	bls.n	800dc18 <_svfprintf_r+0x868>
 800dc6e:	1c59      	adds	r1, r3, #1
 800dc70:	9124      	str	r1, [sp, #144]	@ 0x90
 800dc72:	701a      	strb	r2, [r3, #0]
 800dc74:	e7f8      	b.n	800dc68 <_svfprintf_r+0x8b8>
 800dc76:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc7a:	eb00 0907 	add.w	r9, r0, r7
 800dc7e:	d1e9      	bne.n	800dc54 <_svfprintf_r+0x8a4>
 800dc80:	7803      	ldrb	r3, [r0, #0]
 800dc82:	2b30      	cmp	r3, #48	@ 0x30
 800dc84:	d109      	bne.n	800dc9a <_svfprintf_r+0x8ea>
 800dc86:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	f7f2 ff23 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc92:	b910      	cbnz	r0, 800dc9a <_svfprintf_r+0x8ea>
 800dc94:	f1c7 0701 	rsb	r7, r7, #1
 800dc98:	9720      	str	r7, [sp, #128]	@ 0x80
 800dc9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dc9c:	4499      	add	r9, r3
 800dc9e:	e7d9      	b.n	800dc54 <_svfprintf_r+0x8a4>
 800dca0:	1cfb      	adds	r3, r7, #3
 800dca2:	db01      	blt.n	800dca8 <_svfprintf_r+0x8f8>
 800dca4:	42be      	cmp	r6, r7
 800dca6:	da15      	bge.n	800dcd4 <_svfprintf_r+0x924>
 800dca8:	9b07      	ldr	r3, [sp, #28]
 800dcaa:	3b02      	subs	r3, #2
 800dcac:	9307      	str	r3, [sp, #28]
 800dcae:	e654      	b.n	800d95a <_svfprintf_r+0x5aa>
 800dcb0:	f813 7b01 	ldrb.w	r7, [r3], #1
 800dcb4:	f806 7f01 	strb.w	r7, [r6, #1]!
 800dcb8:	e687      	b.n	800d9ca <_svfprintf_r+0x61a>
 800dcba:	b941      	cbnz	r1, 800dcce <_svfprintf_r+0x91e>
 800dcbc:	2230      	movs	r2, #48	@ 0x30
 800dcbe:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800dcc2:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800dcc6:	3330      	adds	r3, #48	@ 0x30
 800dcc8:	f802 3b01 	strb.w	r3, [r2], #1
 800dccc:	e689      	b.n	800d9e2 <_svfprintf_r+0x632>
 800dcce:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800dcd2:	e7f8      	b.n	800dcc6 <_svfprintf_r+0x916>
 800dcd4:	9b04      	ldr	r3, [sp, #16]
 800dcd6:	42bb      	cmp	r3, r7
 800dcd8:	dd0d      	ble.n	800dcf6 <_svfprintf_r+0x946>
 800dcda:	9b04      	ldr	r3, [sp, #16]
 800dcdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcde:	2f00      	cmp	r7, #0
 800dce0:	eb03 0602 	add.w	r6, r3, r2
 800dce4:	dc0b      	bgt.n	800dcfe <_svfprintf_r+0x94e>
 800dce6:	f1c7 0301 	rsb	r3, r7, #1
 800dcea:	441e      	add	r6, r3
 800dcec:	e007      	b.n	800dcfe <_svfprintf_r+0x94e>
 800dcee:	b153      	cbz	r3, 800dd06 <_svfprintf_r+0x956>
 800dcf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	e7a6      	b.n	800dc44 <_svfprintf_r+0x894>
 800dcf6:	07e9      	lsls	r1, r5, #31
 800dcf8:	d51d      	bpl.n	800dd36 <_svfprintf_r+0x986>
 800dcfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcfc:	18fe      	adds	r6, r7, r3
 800dcfe:	2367      	movs	r3, #103	@ 0x67
 800dd00:	e7a2      	b.n	800dc48 <_svfprintf_r+0x898>
 800dd02:	463e      	mov	r6, r7
 800dd04:	e79f      	b.n	800dc46 <_svfprintf_r+0x896>
 800dd06:	2366      	movs	r3, #102	@ 0x66
 800dd08:	9307      	str	r3, [sp, #28]
 800dd0a:	2601      	movs	r6, #1
 800dd0c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800dd10:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd12:	d022      	beq.n	800dd5a <_svfprintf_r+0x9aa>
 800dd14:	f04f 0800 	mov.w	r8, #0
 800dd18:	2f00      	cmp	r7, #0
 800dd1a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 800dd1e:	f77f ae77 	ble.w	800da10 <_svfprintf_r+0x660>
 800dd22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	2bff      	cmp	r3, #255	@ 0xff
 800dd28:	d107      	bne.n	800dd3a <_svfprintf_r+0x98a>
 800dd2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dd2e:	4443      	add	r3, r8
 800dd30:	fb02 6603 	mla	r6, r2, r3, r6
 800dd34:	e66c      	b.n	800da10 <_svfprintf_r+0x660>
 800dd36:	463e      	mov	r6, r7
 800dd38:	e7e1      	b.n	800dcfe <_svfprintf_r+0x94e>
 800dd3a:	42bb      	cmp	r3, r7
 800dd3c:	daf5      	bge.n	800dd2a <_svfprintf_r+0x97a>
 800dd3e:	1aff      	subs	r7, r7, r3
 800dd40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd42:	785b      	ldrb	r3, [r3, #1]
 800dd44:	b133      	cbz	r3, 800dd54 <_svfprintf_r+0x9a4>
 800dd46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd48:	3301      	adds	r3, #1
 800dd4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd4e:	3301      	adds	r3, #1
 800dd50:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd52:	e7e6      	b.n	800dd22 <_svfprintf_r+0x972>
 800dd54:	f108 0801 	add.w	r8, r8, #1
 800dd58:	e7e3      	b.n	800dd22 <_svfprintf_r+0x972>
 800dd5a:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 800dd5e:	e657      	b.n	800da10 <_svfprintf_r+0x660>
 800dd60:	232d      	movs	r3, #45	@ 0x2d
 800dd62:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800dd66:	e657      	b.n	800da18 <_svfprintf_r+0x668>
 800dd68:	06aa      	lsls	r2, r5, #26
 800dd6a:	d50a      	bpl.n	800dd82 <_svfprintf_r+0x9d2>
 800dd6c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800dd72:	17d2      	asrs	r2, r2, #31
 800dd74:	e9c3 1200 	strd	r1, r2, [r3]
 800dd78:	3704      	adds	r7, #4
 800dd7a:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 800dd7e:	f7ff bb4f 	b.w	800d420 <_svfprintf_r+0x70>
 800dd82:	06eb      	lsls	r3, r5, #27
 800dd84:	d503      	bpl.n	800dd8e <_svfprintf_r+0x9de>
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	e7f4      	b.n	800dd78 <_svfprintf_r+0x9c8>
 800dd8e:	066e      	lsls	r6, r5, #25
 800dd90:	d503      	bpl.n	800dd9a <_svfprintf_r+0x9ea>
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800dd96:	801a      	strh	r2, [r3, #0]
 800dd98:	e7ee      	b.n	800dd78 <_svfprintf_r+0x9c8>
 800dd9a:	05ad      	lsls	r5, r5, #22
 800dd9c:	d5f3      	bpl.n	800dd86 <_svfprintf_r+0x9d6>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800dda2:	701a      	strb	r2, [r3, #0]
 800dda4:	e7e8      	b.n	800dd78 <_svfprintf_r+0x9c8>
 800dda6:	f045 0510 	orr.w	r5, r5, #16
 800ddaa:	f015 0320 	ands.w	r3, r5, #32
 800ddae:	d01f      	beq.n	800ddf0 <_svfprintf_r+0xa40>
 800ddb0:	3707      	adds	r7, #7
 800ddb2:	f027 0307 	bic.w	r3, r7, #7
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ddbc:	f852 7b08 	ldr.w	r7, [r2], #8
 800ddc0:	9208      	str	r2, [sp, #32]
 800ddc2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800ddce:	2e00      	cmp	r6, #0
 800ddd0:	f2c0 848d 	blt.w	800e6ee <_svfprintf_r+0x133e>
 800ddd4:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800ddd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddda:	ea57 0208 	orrs.w	r2, r7, r8
 800ddde:	f040 848b 	bne.w	800e6f8 <_svfprintf_r+0x1348>
 800dde2:	2e00      	cmp	r6, #0
 800dde4:	f000 80de 	beq.w	800dfa4 <_svfprintf_r+0xbf4>
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	f040 8488 	bne.w	800e6fe <_svfprintf_r+0x134e>
 800ddee:	e083      	b.n	800def8 <_svfprintf_r+0xb48>
 800ddf0:	463a      	mov	r2, r7
 800ddf2:	f015 0810 	ands.w	r8, r5, #16
 800ddf6:	f852 7b04 	ldr.w	r7, [r2], #4
 800ddfa:	9208      	str	r2, [sp, #32]
 800ddfc:	d001      	beq.n	800de02 <_svfprintf_r+0xa52>
 800ddfe:	4698      	mov	r8, r3
 800de00:	e7df      	b.n	800ddc2 <_svfprintf_r+0xa12>
 800de02:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800de06:	d001      	beq.n	800de0c <_svfprintf_r+0xa5c>
 800de08:	b2bf      	uxth	r7, r7
 800de0a:	e7da      	b.n	800ddc2 <_svfprintf_r+0xa12>
 800de0c:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 800de10:	d0d7      	beq.n	800ddc2 <_svfprintf_r+0xa12>
 800de12:	b2ff      	uxtb	r7, r7
 800de14:	e7f3      	b.n	800ddfe <_svfprintf_r+0xa4e>
 800de16:	463b      	mov	r3, r7
 800de18:	2278      	movs	r2, #120	@ 0x78
 800de1a:	f853 7b04 	ldr.w	r7, [r3], #4
 800de1e:	9308      	str	r3, [sp, #32]
 800de20:	f647 0330 	movw	r3, #30768	@ 0x7830
 800de24:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800de28:	4b94      	ldr	r3, [pc, #592]	@ (800e07c <_svfprintf_r+0xccc>)
 800de2a:	931a      	str	r3, [sp, #104]	@ 0x68
 800de2c:	f04f 0800 	mov.w	r8, #0
 800de30:	f045 0502 	orr.w	r5, r5, #2
 800de34:	2302      	movs	r3, #2
 800de36:	9207      	str	r2, [sp, #28]
 800de38:	e7c6      	b.n	800ddc8 <_svfprintf_r+0xa18>
 800de3a:	463b      	mov	r3, r7
 800de3c:	2700      	movs	r7, #0
 800de3e:	f853 bb04 	ldr.w	fp, [r3], #4
 800de42:	9308      	str	r3, [sp, #32]
 800de44:	42be      	cmp	r6, r7
 800de46:	f88d 707b 	strb.w	r7, [sp, #123]	@ 0x7b
 800de4a:	db0f      	blt.n	800de6c <_svfprintf_r+0xabc>
 800de4c:	4632      	mov	r2, r6
 800de4e:	4639      	mov	r1, r7
 800de50:	4658      	mov	r0, fp
 800de52:	f7f2 f9c5 	bl	80001e0 <memchr>
 800de56:	4682      	mov	sl, r0
 800de58:	2800      	cmp	r0, #0
 800de5a:	f43f ac8e 	beq.w	800d77a <_svfprintf_r+0x3ca>
 800de5e:	eba0 060b 	sub.w	r6, r0, fp
 800de62:	46ba      	mov	sl, r7
 800de64:	46b9      	mov	r9, r7
 800de66:	46b8      	mov	r8, r7
 800de68:	9709      	str	r7, [sp, #36]	@ 0x24
 800de6a:	e5d8      	b.n	800da1e <_svfprintf_r+0x66e>
 800de6c:	4658      	mov	r0, fp
 800de6e:	f7f2 fa07 	bl	8000280 <strlen>
 800de72:	46ba      	mov	sl, r7
 800de74:	4606      	mov	r6, r0
 800de76:	e480      	b.n	800d77a <_svfprintf_r+0x3ca>
 800de78:	f045 0510 	orr.w	r5, r5, #16
 800de7c:	f015 0320 	ands.w	r3, r5, #32
 800de80:	d00a      	beq.n	800de98 <_svfprintf_r+0xae8>
 800de82:	3707      	adds	r7, #7
 800de84:	f027 0307 	bic.w	r3, r7, #7
 800de88:	461a      	mov	r2, r3
 800de8a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800de8e:	f852 7b08 	ldr.w	r7, [r2], #8
 800de92:	9208      	str	r2, [sp, #32]
 800de94:	2301      	movs	r3, #1
 800de96:	e797      	b.n	800ddc8 <_svfprintf_r+0xa18>
 800de98:	463a      	mov	r2, r7
 800de9a:	f015 0810 	ands.w	r8, r5, #16
 800de9e:	f852 7b04 	ldr.w	r7, [r2], #4
 800dea2:	9208      	str	r2, [sp, #32]
 800dea4:	d001      	beq.n	800deaa <_svfprintf_r+0xafa>
 800dea6:	4698      	mov	r8, r3
 800dea8:	e7f4      	b.n	800de94 <_svfprintf_r+0xae4>
 800deaa:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800deae:	d001      	beq.n	800deb4 <_svfprintf_r+0xb04>
 800deb0:	b2bf      	uxth	r7, r7
 800deb2:	e7ef      	b.n	800de94 <_svfprintf_r+0xae4>
 800deb4:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 800deb8:	d0ec      	beq.n	800de94 <_svfprintf_r+0xae4>
 800deba:	b2ff      	uxtb	r7, r7
 800debc:	e7f3      	b.n	800dea6 <_svfprintf_r+0xaf6>
 800debe:	4b70      	ldr	r3, [pc, #448]	@ (800e080 <_svfprintf_r+0xcd0>)
 800dec0:	f7ff bb43 	b.w	800d54a <_svfprintf_r+0x19a>
 800dec4:	463a      	mov	r2, r7
 800dec6:	f015 0810 	ands.w	r8, r5, #16
 800deca:	f852 7b04 	ldr.w	r7, [r2], #4
 800dece:	9208      	str	r2, [sp, #32]
 800ded0:	d002      	beq.n	800ded8 <_svfprintf_r+0xb28>
 800ded2:	4698      	mov	r8, r3
 800ded4:	f7ff bb47 	b.w	800d566 <_svfprintf_r+0x1b6>
 800ded8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800dedc:	d002      	beq.n	800dee4 <_svfprintf_r+0xb34>
 800dede:	b2bf      	uxth	r7, r7
 800dee0:	f7ff bb41 	b.w	800d566 <_svfprintf_r+0x1b6>
 800dee4:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 800dee8:	f43f ab3d 	beq.w	800d566 <_svfprintf_r+0x1b6>
 800deec:	b2ff      	uxtb	r7, r7
 800deee:	e7f0      	b.n	800ded2 <_svfprintf_r+0xb22>
 800def0:	2f0a      	cmp	r7, #10
 800def2:	f178 0300 	sbcs.w	r3, r8, #0
 800def6:	d207      	bcs.n	800df08 <_svfprintf_r+0xb58>
 800def8:	3730      	adds	r7, #48	@ 0x30
 800defa:	b2ff      	uxtb	r7, r7
 800defc:	f88d 7147 	strb.w	r7, [sp, #327]	@ 0x147
 800df00:	f20d 1b47 	addw	fp, sp, #327	@ 0x147
 800df04:	f000 bc18 	b.w	800e738 <_svfprintf_r+0x1388>
 800df08:	2300      	movs	r3, #0
 800df0a:	9304      	str	r3, [sp, #16]
 800df0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800df12:	ad52      	add	r5, sp, #328	@ 0x148
 800df14:	9311      	str	r3, [sp, #68]	@ 0x44
 800df16:	220a      	movs	r2, #10
 800df18:	2300      	movs	r3, #0
 800df1a:	4638      	mov	r0, r7
 800df1c:	4641      	mov	r1, r8
 800df1e:	f7f2 ff0b 	bl	8000d38 <__aeabi_uldivmod>
 800df22:	9b04      	ldr	r3, [sp, #16]
 800df24:	3301      	adds	r3, #1
 800df26:	9304      	str	r3, [sp, #16]
 800df28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df2a:	3230      	adds	r2, #48	@ 0x30
 800df2c:	4682      	mov	sl, r0
 800df2e:	4689      	mov	r9, r1
 800df30:	f105 3bff 	add.w	fp, r5, #4294967295
 800df34:	f805 2c01 	strb.w	r2, [r5, #-1]
 800df38:	b303      	cbz	r3, 800df7c <_svfprintf_r+0xbcc>
 800df3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df3c:	781a      	ldrb	r2, [r3, #0]
 800df3e:	9b04      	ldr	r3, [sp, #16]
 800df40:	4293      	cmp	r3, r2
 800df42:	d11b      	bne.n	800df7c <_svfprintf_r+0xbcc>
 800df44:	2bff      	cmp	r3, #255	@ 0xff
 800df46:	d019      	beq.n	800df7c <_svfprintf_r+0xbcc>
 800df48:	2f0a      	cmp	r7, #10
 800df4a:	f178 0800 	sbcs.w	r8, r8, #0
 800df4e:	f0c0 83f3 	bcc.w	800e738 <_svfprintf_r+0x1388>
 800df52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800df54:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800df56:	ebab 0b03 	sub.w	fp, fp, r3
 800df5a:	461a      	mov	r2, r3
 800df5c:	4658      	mov	r0, fp
 800df5e:	f7fe f839 	bl	800bfd4 <strncpy>
 800df62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df64:	785a      	ldrb	r2, [r3, #1]
 800df66:	b13a      	cbz	r2, 800df78 <_svfprintf_r+0xbc8>
 800df68:	3301      	adds	r3, #1
 800df6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800df6c:	2300      	movs	r3, #0
 800df6e:	9304      	str	r3, [sp, #16]
 800df70:	4657      	mov	r7, sl
 800df72:	46c8      	mov	r8, r9
 800df74:	465d      	mov	r5, fp
 800df76:	e7ce      	b.n	800df16 <_svfprintf_r+0xb66>
 800df78:	9204      	str	r2, [sp, #16]
 800df7a:	e7f9      	b.n	800df70 <_svfprintf_r+0xbc0>
 800df7c:	2f0a      	cmp	r7, #10
 800df7e:	f178 0800 	sbcs.w	r8, r8, #0
 800df82:	d2f5      	bcs.n	800df70 <_svfprintf_r+0xbc0>
 800df84:	e3d8      	b.n	800e738 <_svfprintf_r+0x1388>
 800df86:	f007 030f 	and.w	r3, r7, #15
 800df8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800df8c:	093f      	lsrs	r7, r7, #4
 800df8e:	5cd3      	ldrb	r3, [r2, r3]
 800df90:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800df94:	ea47 7708 	orr.w	r7, r7, r8, lsl #28
 800df98:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800df9c:	ea57 0308 	orrs.w	r3, r7, r8
 800dfa0:	d1f1      	bne.n	800df86 <_svfprintf_r+0xbd6>
 800dfa2:	e3c9      	b.n	800e738 <_svfprintf_r+0x1388>
 800dfa4:	b91b      	cbnz	r3, 800dfae <_svfprintf_r+0xbfe>
 800dfa6:	07ea      	lsls	r2, r5, #31
 800dfa8:	d501      	bpl.n	800dfae <_svfprintf_r+0xbfe>
 800dfaa:	2730      	movs	r7, #48	@ 0x30
 800dfac:	e7a6      	b.n	800defc <_svfprintf_r+0xb4c>
 800dfae:	f50d 7ba4 	add.w	fp, sp, #328	@ 0x148
 800dfb2:	e3c1      	b.n	800e738 <_svfprintf_r+0x1388>
 800dfb4:	9b07      	ldr	r3, [sp, #28]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f000 838e 	beq.w	800e6d8 <_svfprintf_r+0x1328>
 800dfbc:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800dfc6:	9708      	str	r7, [sp, #32]
 800dfc8:	f7ff bb6b 	b.w	800d6a2 <_svfprintf_r+0x2f2>
 800dfcc:	2110      	movs	r1, #16
 800dfce:	6061      	str	r1, [r4, #4]
 800dfd0:	2a07      	cmp	r2, #7
 800dfd2:	4461      	add	r1, ip
 800dfd4:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 800dfd8:	dd0a      	ble.n	800dff0 <_svfprintf_r+0xc40>
 800dfda:	9906      	ldr	r1, [sp, #24]
 800dfdc:	9803      	ldr	r0, [sp, #12]
 800dfde:	931d      	str	r3, [sp, #116]	@ 0x74
 800dfe0:	aa26      	add	r2, sp, #152	@ 0x98
 800dfe2:	f000 fbbb 	bl	800e75c <__ssprint_r>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	f040 8354 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800dfec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dfee:	a829      	add	r0, sp, #164	@ 0xa4
 800dff0:	3b10      	subs	r3, #16
 800dff2:	4604      	mov	r4, r0
 800dff4:	e52e      	b.n	800da54 <_svfprintf_r+0x6a4>
 800dff6:	4604      	mov	r4, r0
 800dff8:	e548      	b.n	800da8c <_svfprintf_r+0x6dc>
 800dffa:	9906      	ldr	r1, [sp, #24]
 800dffc:	9803      	ldr	r0, [sp, #12]
 800dffe:	aa26      	add	r2, sp, #152	@ 0x98
 800e000:	f000 fbac 	bl	800e75c <__ssprint_r>
 800e004:	2800      	cmp	r0, #0
 800e006:	f040 8345 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e00a:	ac29      	add	r4, sp, #164	@ 0xa4
 800e00c:	e550      	b.n	800dab0 <_svfprintf_r+0x700>
 800e00e:	9906      	ldr	r1, [sp, #24]
 800e010:	9803      	ldr	r0, [sp, #12]
 800e012:	aa26      	add	r2, sp, #152	@ 0x98
 800e014:	f000 fba2 	bl	800e75c <__ssprint_r>
 800e018:	2800      	cmp	r0, #0
 800e01a:	f040 833b 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e01e:	ac29      	add	r4, sp, #164	@ 0xa4
 800e020:	e556      	b.n	800dad0 <_svfprintf_r+0x720>
 800e022:	2110      	movs	r1, #16
 800e024:	6061      	str	r1, [r4, #4]
 800e026:	2a07      	cmp	r2, #7
 800e028:	4461      	add	r1, ip
 800e02a:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 800e02e:	dd0a      	ble.n	800e046 <_svfprintf_r+0xc96>
 800e030:	9906      	ldr	r1, [sp, #24]
 800e032:	9803      	ldr	r0, [sp, #12]
 800e034:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e036:	aa26      	add	r2, sp, #152	@ 0x98
 800e038:	f000 fb90 	bl	800e75c <__ssprint_r>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	f040 8329 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e042:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e044:	a829      	add	r0, sp, #164	@ 0xa4
 800e046:	3b10      	subs	r3, #16
 800e048:	4604      	mov	r4, r0
 800e04a:	e549      	b.n	800dae0 <_svfprintf_r+0x730>
 800e04c:	4604      	mov	r4, r0
 800e04e:	e563      	b.n	800db18 <_svfprintf_r+0x768>
 800e050:	2010      	movs	r0, #16
 800e052:	4403      	add	r3, r0
 800e054:	2a07      	cmp	r2, #7
 800e056:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800e05a:	6060      	str	r0, [r4, #4]
 800e05c:	dd08      	ble.n	800e070 <_svfprintf_r+0xcc0>
 800e05e:	9906      	ldr	r1, [sp, #24]
 800e060:	9803      	ldr	r0, [sp, #12]
 800e062:	aa26      	add	r2, sp, #152	@ 0x98
 800e064:	f000 fb7a 	bl	800e75c <__ssprint_r>
 800e068:	2800      	cmp	r0, #0
 800e06a:	f040 8313 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e06e:	a929      	add	r1, sp, #164	@ 0xa4
 800e070:	f1a9 0910 	sub.w	r9, r9, #16
 800e074:	460c      	mov	r4, r1
 800e076:	e554      	b.n	800db22 <_svfprintf_r+0x772>
 800e078:	460c      	mov	r4, r1
 800e07a:	e56f      	b.n	800db5c <_svfprintf_r+0x7ac>
 800e07c:	08011b5c 	.word	0x08011b5c
 800e080:	08011b6d 	.word	0x08011b6d
 800e084:	9b07      	ldr	r3, [sp, #28]
 800e086:	2b65      	cmp	r3, #101	@ 0x65
 800e088:	f340 8245 	ble.w	800e516 <_svfprintf_r+0x1166>
 800e08c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e090:	2200      	movs	r2, #0
 800e092:	2300      	movs	r3, #0
 800e094:	f7f2 fd20 	bl	8000ad8 <__aeabi_dcmpeq>
 800e098:	2800      	cmp	r0, #0
 800e09a:	d069      	beq.n	800e170 <_svfprintf_r+0xdc0>
 800e09c:	4b72      	ldr	r3, [pc, #456]	@ (800e268 <_svfprintf_r+0xeb8>)
 800e09e:	6023      	str	r3, [r4, #0]
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	6063      	str	r3, [r4, #4]
 800e0a4:	444b      	add	r3, r9
 800e0a6:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e0a8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	2b07      	cmp	r3, #7
 800e0ae:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e0b0:	dc37      	bgt.n	800e122 <_svfprintf_r+0xd72>
 800e0b2:	3408      	adds	r4, #8
 800e0b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e0b6:	9a04      	ldr	r2, [sp, #16]
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	db02      	blt.n	800e0c2 <_svfprintf_r+0xd12>
 800e0bc:	07ef      	lsls	r7, r5, #31
 800e0be:	f57f ad5d 	bpl.w	800db7c <_svfprintf_r+0x7cc>
 800e0c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e0c4:	6023      	str	r3, [r4, #0]
 800e0c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0ca:	6063      	str	r3, [r4, #4]
 800e0cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e0ce:	4413      	add	r3, r2
 800e0d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e0d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	2b07      	cmp	r3, #7
 800e0d8:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e0da:	dc2c      	bgt.n	800e136 <_svfprintf_r+0xd86>
 800e0dc:	3408      	adds	r4, #8
 800e0de:	9b04      	ldr	r3, [sp, #16]
 800e0e0:	1e5e      	subs	r6, r3, #1
 800e0e2:	2e00      	cmp	r6, #0
 800e0e4:	f77f ad4a 	ble.w	800db7c <_svfprintf_r+0x7cc>
 800e0e8:	4f60      	ldr	r7, [pc, #384]	@ (800e26c <_svfprintf_r+0xebc>)
 800e0ea:	f04f 0810 	mov.w	r8, #16
 800e0ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800e0f2:	2e10      	cmp	r6, #16
 800e0f4:	f103 0301 	add.w	r3, r3, #1
 800e0f8:	f104 0108 	add.w	r1, r4, #8
 800e0fc:	6027      	str	r7, [r4, #0]
 800e0fe:	dc24      	bgt.n	800e14a <_svfprintf_r+0xd9a>
 800e100:	6066      	str	r6, [r4, #4]
 800e102:	2b07      	cmp	r3, #7
 800e104:	4416      	add	r6, r2
 800e106:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800e10a:	f340 82a2 	ble.w	800e652 <_svfprintf_r+0x12a2>
 800e10e:	9906      	ldr	r1, [sp, #24]
 800e110:	9803      	ldr	r0, [sp, #12]
 800e112:	aa26      	add	r2, sp, #152	@ 0x98
 800e114:	f000 fb22 	bl	800e75c <__ssprint_r>
 800e118:	2800      	cmp	r0, #0
 800e11a:	f040 82bb 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e11e:	ac29      	add	r4, sp, #164	@ 0xa4
 800e120:	e52c      	b.n	800db7c <_svfprintf_r+0x7cc>
 800e122:	9906      	ldr	r1, [sp, #24]
 800e124:	9803      	ldr	r0, [sp, #12]
 800e126:	aa26      	add	r2, sp, #152	@ 0x98
 800e128:	f000 fb18 	bl	800e75c <__ssprint_r>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	f040 82b1 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e132:	ac29      	add	r4, sp, #164	@ 0xa4
 800e134:	e7be      	b.n	800e0b4 <_svfprintf_r+0xd04>
 800e136:	9906      	ldr	r1, [sp, #24]
 800e138:	9803      	ldr	r0, [sp, #12]
 800e13a:	aa26      	add	r2, sp, #152	@ 0x98
 800e13c:	f000 fb0e 	bl	800e75c <__ssprint_r>
 800e140:	2800      	cmp	r0, #0
 800e142:	f040 82a7 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e146:	ac29      	add	r4, sp, #164	@ 0xa4
 800e148:	e7c9      	b.n	800e0de <_svfprintf_r+0xd2e>
 800e14a:	3210      	adds	r2, #16
 800e14c:	2b07      	cmp	r3, #7
 800e14e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800e152:	f8c4 8004 	str.w	r8, [r4, #4]
 800e156:	dd08      	ble.n	800e16a <_svfprintf_r+0xdba>
 800e158:	9906      	ldr	r1, [sp, #24]
 800e15a:	9803      	ldr	r0, [sp, #12]
 800e15c:	aa26      	add	r2, sp, #152	@ 0x98
 800e15e:	f000 fafd 	bl	800e75c <__ssprint_r>
 800e162:	2800      	cmp	r0, #0
 800e164:	f040 8296 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e168:	a929      	add	r1, sp, #164	@ 0xa4
 800e16a:	3e10      	subs	r6, #16
 800e16c:	460c      	mov	r4, r1
 800e16e:	e7be      	b.n	800e0ee <_svfprintf_r+0xd3e>
 800e170:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e172:	2b00      	cmp	r3, #0
 800e174:	dc7c      	bgt.n	800e270 <_svfprintf_r+0xec0>
 800e176:	4b3c      	ldr	r3, [pc, #240]	@ (800e268 <_svfprintf_r+0xeb8>)
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	2301      	movs	r3, #1
 800e17c:	6063      	str	r3, [r4, #4]
 800e17e:	444b      	add	r3, r9
 800e180:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e182:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e184:	3301      	adds	r3, #1
 800e186:	2b07      	cmp	r3, #7
 800e188:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e18a:	dc46      	bgt.n	800e21a <_svfprintf_r+0xe6a>
 800e18c:	3408      	adds	r4, #8
 800e18e:	9904      	ldr	r1, [sp, #16]
 800e190:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e192:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800e194:	430b      	orrs	r3, r1
 800e196:	f005 0101 	and.w	r1, r5, #1
 800e19a:	430b      	orrs	r3, r1
 800e19c:	f43f acee 	beq.w	800db7c <_svfprintf_r+0x7cc>
 800e1a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e1a2:	6023      	str	r3, [r4, #0]
 800e1a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1a6:	6063      	str	r3, [r4, #4]
 800e1a8:	441a      	add	r2, r3
 800e1aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e1ac:	9228      	str	r2, [sp, #160]	@ 0xa0
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	2b07      	cmp	r3, #7
 800e1b2:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e1b4:	dc3b      	bgt.n	800e22e <_svfprintf_r+0xe7e>
 800e1b6:	f104 0308 	add.w	r3, r4, #8
 800e1ba:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e1bc:	2e00      	cmp	r6, #0
 800e1be:	da1b      	bge.n	800e1f8 <_svfprintf_r+0xe48>
 800e1c0:	4f2a      	ldr	r7, [pc, #168]	@ (800e26c <_svfprintf_r+0xebc>)
 800e1c2:	4276      	negs	r6, r6
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	2410      	movs	r4, #16
 800e1c8:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800e1cc:	2e10      	cmp	r6, #16
 800e1ce:	f101 0101 	add.w	r1, r1, #1
 800e1d2:	f103 0308 	add.w	r3, r3, #8
 800e1d6:	6017      	str	r7, [r2, #0]
 800e1d8:	dc33      	bgt.n	800e242 <_svfprintf_r+0xe92>
 800e1da:	6056      	str	r6, [r2, #4]
 800e1dc:	2907      	cmp	r1, #7
 800e1de:	4406      	add	r6, r0
 800e1e0:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800e1e4:	dd08      	ble.n	800e1f8 <_svfprintf_r+0xe48>
 800e1e6:	9906      	ldr	r1, [sp, #24]
 800e1e8:	9803      	ldr	r0, [sp, #12]
 800e1ea:	aa26      	add	r2, sp, #152	@ 0x98
 800e1ec:	f000 fab6 	bl	800e75c <__ssprint_r>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	f040 824f 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e1f6:	ab29      	add	r3, sp, #164	@ 0xa4
 800e1f8:	9a04      	ldr	r2, [sp, #16]
 800e1fa:	9904      	ldr	r1, [sp, #16]
 800e1fc:	605a      	str	r2, [r3, #4]
 800e1fe:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800e200:	f8c3 b000 	str.w	fp, [r3]
 800e204:	440a      	add	r2, r1
 800e206:	9228      	str	r2, [sp, #160]	@ 0xa0
 800e208:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800e20a:	3201      	adds	r2, #1
 800e20c:	2a07      	cmp	r2, #7
 800e20e:	9227      	str	r2, [sp, #156]	@ 0x9c
 800e210:	f73f af7d 	bgt.w	800e10e <_svfprintf_r+0xd5e>
 800e214:	f103 0408 	add.w	r4, r3, #8
 800e218:	e4b0      	b.n	800db7c <_svfprintf_r+0x7cc>
 800e21a:	9906      	ldr	r1, [sp, #24]
 800e21c:	9803      	ldr	r0, [sp, #12]
 800e21e:	aa26      	add	r2, sp, #152	@ 0x98
 800e220:	f000 fa9c 	bl	800e75c <__ssprint_r>
 800e224:	2800      	cmp	r0, #0
 800e226:	f040 8235 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e22a:	ac29      	add	r4, sp, #164	@ 0xa4
 800e22c:	e7af      	b.n	800e18e <_svfprintf_r+0xdde>
 800e22e:	9906      	ldr	r1, [sp, #24]
 800e230:	9803      	ldr	r0, [sp, #12]
 800e232:	aa26      	add	r2, sp, #152	@ 0x98
 800e234:	f000 fa92 	bl	800e75c <__ssprint_r>
 800e238:	2800      	cmp	r0, #0
 800e23a:	f040 822b 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e23e:	ab29      	add	r3, sp, #164	@ 0xa4
 800e240:	e7bb      	b.n	800e1ba <_svfprintf_r+0xe0a>
 800e242:	3010      	adds	r0, #16
 800e244:	2907      	cmp	r1, #7
 800e246:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800e24a:	6054      	str	r4, [r2, #4]
 800e24c:	dd08      	ble.n	800e260 <_svfprintf_r+0xeb0>
 800e24e:	9906      	ldr	r1, [sp, #24]
 800e250:	9803      	ldr	r0, [sp, #12]
 800e252:	aa26      	add	r2, sp, #152	@ 0x98
 800e254:	f000 fa82 	bl	800e75c <__ssprint_r>
 800e258:	2800      	cmp	r0, #0
 800e25a:	f040 821b 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e25e:	ab29      	add	r3, sp, #164	@ 0xa4
 800e260:	3e10      	subs	r6, #16
 800e262:	461a      	mov	r2, r3
 800e264:	e7b0      	b.n	800e1c8 <_svfprintf_r+0xe18>
 800e266:	bf00      	nop
 800e268:	08011b7e 	.word	0x08011b7e
 800e26c:	08011e78 	.word	0x08011e78
 800e270:	9b04      	ldr	r3, [sp, #16]
 800e272:	42bb      	cmp	r3, r7
 800e274:	bfa8      	it	ge
 800e276:	463b      	movge	r3, r7
 800e278:	2b00      	cmp	r3, #0
 800e27a:	461e      	mov	r6, r3
 800e27c:	dd0a      	ble.n	800e294 <_svfprintf_r+0xee4>
 800e27e:	e9c4 b300 	strd	fp, r3, [r4]
 800e282:	444b      	add	r3, r9
 800e284:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e286:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e288:	3301      	adds	r3, #1
 800e28a:	2b07      	cmp	r3, #7
 800e28c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e28e:	f300 808e 	bgt.w	800e3ae <_svfprintf_r+0xffe>
 800e292:	3408      	adds	r4, #8
 800e294:	2e00      	cmp	r6, #0
 800e296:	bfac      	ite	ge
 800e298:	1bbe      	subge	r6, r7, r6
 800e29a:	463e      	movlt	r6, r7
 800e29c:	2e00      	cmp	r6, #0
 800e29e:	dd1c      	ble.n	800e2da <_svfprintf_r+0xf2a>
 800e2a0:	f8df 9344 	ldr.w	r9, [pc, #836]	@ 800e5e8 <_svfprintf_r+0x1238>
 800e2a4:	f8c4 9000 	str.w	r9, [r4]
 800e2a8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800e2ac:	2e10      	cmp	r6, #16
 800e2ae:	f103 0301 	add.w	r3, r3, #1
 800e2b2:	f104 0108 	add.w	r1, r4, #8
 800e2b6:	f300 8084 	bgt.w	800e3c2 <_svfprintf_r+0x1012>
 800e2ba:	6066      	str	r6, [r4, #4]
 800e2bc:	2b07      	cmp	r3, #7
 800e2be:	4416      	add	r6, r2
 800e2c0:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800e2c4:	f340 8090 	ble.w	800e3e8 <_svfprintf_r+0x1038>
 800e2c8:	9906      	ldr	r1, [sp, #24]
 800e2ca:	9803      	ldr	r0, [sp, #12]
 800e2cc:	aa26      	add	r2, sp, #152	@ 0x98
 800e2ce:	f000 fa45 	bl	800e75c <__ssprint_r>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	f040 81de 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e2d8:	ac29      	add	r4, sp, #164	@ 0xa4
 800e2da:	056e      	lsls	r6, r5, #21
 800e2dc:	445f      	add	r7, fp
 800e2de:	d50c      	bpl.n	800e2fa <_svfprintf_r+0xf4a>
 800e2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f300 8082 	bgt.w	800e3ec <_svfprintf_r+0x103c>
 800e2e8:	f1b8 0f00 	cmp.w	r8, #0
 800e2ec:	f300 8081 	bgt.w	800e3f2 <_svfprintf_r+0x1042>
 800e2f0:	9b04      	ldr	r3, [sp, #16]
 800e2f2:	445b      	add	r3, fp
 800e2f4:	429f      	cmp	r7, r3
 800e2f6:	bf28      	it	cs
 800e2f8:	461f      	movcs	r7, r3
 800e2fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e2fc:	9a04      	ldr	r2, [sp, #16]
 800e2fe:	4293      	cmp	r3, r2
 800e300:	db01      	blt.n	800e306 <_svfprintf_r+0xf56>
 800e302:	07e8      	lsls	r0, r5, #31
 800e304:	d50e      	bpl.n	800e324 <_svfprintf_r+0xf74>
 800e306:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e308:	6023      	str	r3, [r4, #0]
 800e30a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e30c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e30e:	6063      	str	r3, [r4, #4]
 800e310:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e312:	4413      	add	r3, r2
 800e314:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e316:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e318:	3301      	adds	r3, #1
 800e31a:	2b07      	cmp	r3, #7
 800e31c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e31e:	f300 80e6 	bgt.w	800e4ee <_svfprintf_r+0x113e>
 800e322:	3408      	adds	r4, #8
 800e324:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e326:	9a04      	ldr	r2, [sp, #16]
 800e328:	eba2 0803 	sub.w	r8, r2, r3
 800e32c:	eb0b 0302 	add.w	r3, fp, r2
 800e330:	1bdb      	subs	r3, r3, r7
 800e332:	4598      	cmp	r8, r3
 800e334:	bfa8      	it	ge
 800e336:	4698      	movge	r8, r3
 800e338:	f1b8 0f00 	cmp.w	r8, #0
 800e33c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e33e:	dd0a      	ble.n	800e356 <_svfprintf_r+0xfa6>
 800e340:	4443      	add	r3, r8
 800e342:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e344:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e346:	3301      	adds	r3, #1
 800e348:	2b07      	cmp	r3, #7
 800e34a:	e9c4 7800 	strd	r7, r8, [r4]
 800e34e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e350:	f300 80d7 	bgt.w	800e502 <_svfprintf_r+0x1152>
 800e354:	3408      	adds	r4, #8
 800e356:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e358:	9b04      	ldr	r3, [sp, #16]
 800e35a:	f1b8 0f00 	cmp.w	r8, #0
 800e35e:	eba3 0606 	sub.w	r6, r3, r6
 800e362:	bfa8      	it	ge
 800e364:	eba6 0608 	subge.w	r6, r6, r8
 800e368:	2e00      	cmp	r6, #0
 800e36a:	f77f ac07 	ble.w	800db7c <_svfprintf_r+0x7cc>
 800e36e:	4f9e      	ldr	r7, [pc, #632]	@ (800e5e8 <_svfprintf_r+0x1238>)
 800e370:	f04f 0810 	mov.w	r8, #16
 800e374:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800e378:	2e10      	cmp	r6, #16
 800e37a:	f103 0301 	add.w	r3, r3, #1
 800e37e:	f104 0108 	add.w	r1, r4, #8
 800e382:	6027      	str	r7, [r4, #0]
 800e384:	f77f aebc 	ble.w	800e100 <_svfprintf_r+0xd50>
 800e388:	3210      	adds	r2, #16
 800e38a:	2b07      	cmp	r3, #7
 800e38c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800e390:	f8c4 8004 	str.w	r8, [r4, #4]
 800e394:	dd08      	ble.n	800e3a8 <_svfprintf_r+0xff8>
 800e396:	9906      	ldr	r1, [sp, #24]
 800e398:	9803      	ldr	r0, [sp, #12]
 800e39a:	aa26      	add	r2, sp, #152	@ 0x98
 800e39c:	f000 f9de 	bl	800e75c <__ssprint_r>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	f040 8177 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e3a6:	a929      	add	r1, sp, #164	@ 0xa4
 800e3a8:	3e10      	subs	r6, #16
 800e3aa:	460c      	mov	r4, r1
 800e3ac:	e7e2      	b.n	800e374 <_svfprintf_r+0xfc4>
 800e3ae:	9906      	ldr	r1, [sp, #24]
 800e3b0:	9803      	ldr	r0, [sp, #12]
 800e3b2:	aa26      	add	r2, sp, #152	@ 0x98
 800e3b4:	f000 f9d2 	bl	800e75c <__ssprint_r>
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	f040 816b 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e3be:	ac29      	add	r4, sp, #164	@ 0xa4
 800e3c0:	e768      	b.n	800e294 <_svfprintf_r+0xee4>
 800e3c2:	2010      	movs	r0, #16
 800e3c4:	4402      	add	r2, r0
 800e3c6:	2b07      	cmp	r3, #7
 800e3c8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800e3cc:	6060      	str	r0, [r4, #4]
 800e3ce:	dd08      	ble.n	800e3e2 <_svfprintf_r+0x1032>
 800e3d0:	9906      	ldr	r1, [sp, #24]
 800e3d2:	9803      	ldr	r0, [sp, #12]
 800e3d4:	aa26      	add	r2, sp, #152	@ 0x98
 800e3d6:	f000 f9c1 	bl	800e75c <__ssprint_r>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	f040 815a 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e3e0:	a929      	add	r1, sp, #164	@ 0xa4
 800e3e2:	3e10      	subs	r6, #16
 800e3e4:	460c      	mov	r4, r1
 800e3e6:	e75d      	b.n	800e2a4 <_svfprintf_r+0xef4>
 800e3e8:	460c      	mov	r4, r1
 800e3ea:	e776      	b.n	800e2da <_svfprintf_r+0xf2a>
 800e3ec:	f1b8 0f00 	cmp.w	r8, #0
 800e3f0:	dd4d      	ble.n	800e48e <_svfprintf_r+0x10de>
 800e3f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e3f6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e3f8:	6023      	str	r3, [r4, #0]
 800e3fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e3fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e3fe:	6063      	str	r3, [r4, #4]
 800e400:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e402:	4413      	add	r3, r2
 800e404:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e406:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e408:	3301      	adds	r3, #1
 800e40a:	2b07      	cmp	r3, #7
 800e40c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e40e:	dc45      	bgt.n	800e49c <_svfprintf_r+0x10ec>
 800e410:	3408      	adds	r4, #8
 800e412:	9b04      	ldr	r3, [sp, #16]
 800e414:	eb0b 0903 	add.w	r9, fp, r3
 800e418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	eba9 0907 	sub.w	r9, r9, r7
 800e420:	4599      	cmp	r9, r3
 800e422:	bfa8      	it	ge
 800e424:	4699      	movge	r9, r3
 800e426:	f1b9 0f00 	cmp.w	r9, #0
 800e42a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e42c:	dd09      	ble.n	800e442 <_svfprintf_r+0x1092>
 800e42e:	444b      	add	r3, r9
 800e430:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e432:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e434:	3301      	adds	r3, #1
 800e436:	2b07      	cmp	r3, #7
 800e438:	e9c4 7900 	strd	r7, r9, [r4]
 800e43c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e43e:	dc37      	bgt.n	800e4b0 <_svfprintf_r+0x1100>
 800e440:	3408      	adds	r4, #8
 800e442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e444:	781e      	ldrb	r6, [r3, #0]
 800e446:	f1b9 0f00 	cmp.w	r9, #0
 800e44a:	bfa8      	it	ge
 800e44c:	eba6 0609 	subge.w	r6, r6, r9
 800e450:	2e00      	cmp	r6, #0
 800e452:	dd18      	ble.n	800e486 <_svfprintf_r+0x10d6>
 800e454:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800e458:	4863      	ldr	r0, [pc, #396]	@ (800e5e8 <_svfprintf_r+0x1238>)
 800e45a:	6020      	str	r0, [r4, #0]
 800e45c:	2e10      	cmp	r6, #16
 800e45e:	f103 0301 	add.w	r3, r3, #1
 800e462:	f104 0108 	add.w	r1, r4, #8
 800e466:	dc2d      	bgt.n	800e4c4 <_svfprintf_r+0x1114>
 800e468:	6066      	str	r6, [r4, #4]
 800e46a:	2b07      	cmp	r3, #7
 800e46c:	4416      	add	r6, r2
 800e46e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800e472:	dd3a      	ble.n	800e4ea <_svfprintf_r+0x113a>
 800e474:	9906      	ldr	r1, [sp, #24]
 800e476:	9803      	ldr	r0, [sp, #12]
 800e478:	aa26      	add	r2, sp, #152	@ 0x98
 800e47a:	f000 f96f 	bl	800e75c <__ssprint_r>
 800e47e:	2800      	cmp	r0, #0
 800e480:	f040 8108 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e484:	ac29      	add	r4, sp, #164	@ 0xa4
 800e486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	441f      	add	r7, r3
 800e48c:	e728      	b.n	800e2e0 <_svfprintf_r+0xf30>
 800e48e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e490:	3b01      	subs	r3, #1
 800e492:	930a      	str	r3, [sp, #40]	@ 0x28
 800e494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e496:	3b01      	subs	r3, #1
 800e498:	9309      	str	r3, [sp, #36]	@ 0x24
 800e49a:	e7ac      	b.n	800e3f6 <_svfprintf_r+0x1046>
 800e49c:	9906      	ldr	r1, [sp, #24]
 800e49e:	9803      	ldr	r0, [sp, #12]
 800e4a0:	aa26      	add	r2, sp, #152	@ 0x98
 800e4a2:	f000 f95b 	bl	800e75c <__ssprint_r>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f040 80f4 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e4ac:	ac29      	add	r4, sp, #164	@ 0xa4
 800e4ae:	e7b0      	b.n	800e412 <_svfprintf_r+0x1062>
 800e4b0:	9906      	ldr	r1, [sp, #24]
 800e4b2:	9803      	ldr	r0, [sp, #12]
 800e4b4:	aa26      	add	r2, sp, #152	@ 0x98
 800e4b6:	f000 f951 	bl	800e75c <__ssprint_r>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	f040 80ea 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e4c0:	ac29      	add	r4, sp, #164	@ 0xa4
 800e4c2:	e7be      	b.n	800e442 <_svfprintf_r+0x1092>
 800e4c4:	2010      	movs	r0, #16
 800e4c6:	4402      	add	r2, r0
 800e4c8:	2b07      	cmp	r3, #7
 800e4ca:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800e4ce:	6060      	str	r0, [r4, #4]
 800e4d0:	dd08      	ble.n	800e4e4 <_svfprintf_r+0x1134>
 800e4d2:	9906      	ldr	r1, [sp, #24]
 800e4d4:	9803      	ldr	r0, [sp, #12]
 800e4d6:	aa26      	add	r2, sp, #152	@ 0x98
 800e4d8:	f000 f940 	bl	800e75c <__ssprint_r>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	f040 80d9 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e4e2:	a929      	add	r1, sp, #164	@ 0xa4
 800e4e4:	3e10      	subs	r6, #16
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	e7b4      	b.n	800e454 <_svfprintf_r+0x10a4>
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	e7cb      	b.n	800e486 <_svfprintf_r+0x10d6>
 800e4ee:	9906      	ldr	r1, [sp, #24]
 800e4f0:	9803      	ldr	r0, [sp, #12]
 800e4f2:	aa26      	add	r2, sp, #152	@ 0x98
 800e4f4:	f000 f932 	bl	800e75c <__ssprint_r>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	f040 80cb 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e4fe:	ac29      	add	r4, sp, #164	@ 0xa4
 800e500:	e710      	b.n	800e324 <_svfprintf_r+0xf74>
 800e502:	9906      	ldr	r1, [sp, #24]
 800e504:	9803      	ldr	r0, [sp, #12]
 800e506:	aa26      	add	r2, sp, #152	@ 0x98
 800e508:	f000 f928 	bl	800e75c <__ssprint_r>
 800e50c:	2800      	cmp	r0, #0
 800e50e:	f040 80c1 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e512:	ac29      	add	r4, sp, #164	@ 0xa4
 800e514:	e71f      	b.n	800e356 <_svfprintf_r+0xfa6>
 800e516:	9904      	ldr	r1, [sp, #16]
 800e518:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800e51a:	2901      	cmp	r1, #1
 800e51c:	f109 0301 	add.w	r3, r9, #1
 800e520:	f102 0201 	add.w	r2, r2, #1
 800e524:	f104 0608 	add.w	r6, r4, #8
 800e528:	dc02      	bgt.n	800e530 <_svfprintf_r+0x1180>
 800e52a:	07e9      	lsls	r1, r5, #31
 800e52c:	f140 8086 	bpl.w	800e63c <_svfprintf_r+0x128c>
 800e530:	2101      	movs	r1, #1
 800e532:	2a07      	cmp	r2, #7
 800e534:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800e538:	f8c4 b000 	str.w	fp, [r4]
 800e53c:	6061      	str	r1, [r4, #4]
 800e53e:	dd08      	ble.n	800e552 <_svfprintf_r+0x11a2>
 800e540:	9906      	ldr	r1, [sp, #24]
 800e542:	9803      	ldr	r0, [sp, #12]
 800e544:	aa26      	add	r2, sp, #152	@ 0x98
 800e546:	f000 f909 	bl	800e75c <__ssprint_r>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	f040 80a2 	bne.w	800e694 <_svfprintf_r+0x12e4>
 800e550:	ae29      	add	r6, sp, #164	@ 0xa4
 800e552:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e554:	6033      	str	r3, [r6, #0]
 800e556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e558:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e55a:	6073      	str	r3, [r6, #4]
 800e55c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e55e:	4413      	add	r3, r2
 800e560:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e562:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e564:	3301      	adds	r3, #1
 800e566:	2b07      	cmp	r3, #7
 800e568:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e56a:	dc33      	bgt.n	800e5d4 <_svfprintf_r+0x1224>
 800e56c:	3608      	adds	r6, #8
 800e56e:	9b04      	ldr	r3, [sp, #16]
 800e570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e574:	1e5c      	subs	r4, r3, #1
 800e576:	2200      	movs	r2, #0
 800e578:	2300      	movs	r3, #0
 800e57a:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800e57e:	f7f2 faab 	bl	8000ad8 <__aeabi_dcmpeq>
 800e582:	2800      	cmp	r0, #0
 800e584:	d132      	bne.n	800e5ec <_svfprintf_r+0x123c>
 800e586:	f10b 0201 	add.w	r2, fp, #1
 800e58a:	e9c6 2400 	strd	r2, r4, [r6]
 800e58e:	9a04      	ldr	r2, [sp, #16]
 800e590:	f108 0301 	add.w	r3, r8, #1
 800e594:	3f01      	subs	r7, #1
 800e596:	4417      	add	r7, r2
 800e598:	2b07      	cmp	r3, #7
 800e59a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800e59e:	dd56      	ble.n	800e64e <_svfprintf_r+0x129e>
 800e5a0:	9906      	ldr	r1, [sp, #24]
 800e5a2:	9803      	ldr	r0, [sp, #12]
 800e5a4:	aa26      	add	r2, sp, #152	@ 0x98
 800e5a6:	f000 f8d9 	bl	800e75c <__ssprint_r>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d172      	bne.n	800e694 <_svfprintf_r+0x12e4>
 800e5ae:	ae29      	add	r6, sp, #164	@ 0xa4
 800e5b0:	ab22      	add	r3, sp, #136	@ 0x88
 800e5b2:	6033      	str	r3, [r6, #0]
 800e5b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e5b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e5b8:	6073      	str	r3, [r6, #4]
 800e5ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e5bc:	4413      	add	r3, r2
 800e5be:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e5c0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	2b07      	cmp	r3, #7
 800e5c6:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e5c8:	f73f ada1 	bgt.w	800e10e <_svfprintf_r+0xd5e>
 800e5cc:	f106 0408 	add.w	r4, r6, #8
 800e5d0:	f7ff bad4 	b.w	800db7c <_svfprintf_r+0x7cc>
 800e5d4:	9906      	ldr	r1, [sp, #24]
 800e5d6:	9803      	ldr	r0, [sp, #12]
 800e5d8:	aa26      	add	r2, sp, #152	@ 0x98
 800e5da:	f000 f8bf 	bl	800e75c <__ssprint_r>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d158      	bne.n	800e694 <_svfprintf_r+0x12e4>
 800e5e2:	ae29      	add	r6, sp, #164	@ 0xa4
 800e5e4:	e7c3      	b.n	800e56e <_svfprintf_r+0x11be>
 800e5e6:	bf00      	nop
 800e5e8:	08011e78 	.word	0x08011e78
 800e5ec:	9b04      	ldr	r3, [sp, #16]
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	ddde      	ble.n	800e5b0 <_svfprintf_r+0x1200>
 800e5f2:	4f58      	ldr	r7, [pc, #352]	@ (800e754 <_svfprintf_r+0x13a4>)
 800e5f4:	f04f 0810 	mov.w	r8, #16
 800e5f8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800e5fc:	2c10      	cmp	r4, #16
 800e5fe:	f103 0301 	add.w	r3, r3, #1
 800e602:	f106 0108 	add.w	r1, r6, #8
 800e606:	6037      	str	r7, [r6, #0]
 800e608:	dc07      	bgt.n	800e61a <_svfprintf_r+0x126a>
 800e60a:	6074      	str	r4, [r6, #4]
 800e60c:	2b07      	cmp	r3, #7
 800e60e:	4414      	add	r4, r2
 800e610:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800e614:	dcc4      	bgt.n	800e5a0 <_svfprintf_r+0x11f0>
 800e616:	460e      	mov	r6, r1
 800e618:	e7ca      	b.n	800e5b0 <_svfprintf_r+0x1200>
 800e61a:	3210      	adds	r2, #16
 800e61c:	2b07      	cmp	r3, #7
 800e61e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800e622:	f8c6 8004 	str.w	r8, [r6, #4]
 800e626:	dd06      	ble.n	800e636 <_svfprintf_r+0x1286>
 800e628:	9906      	ldr	r1, [sp, #24]
 800e62a:	9803      	ldr	r0, [sp, #12]
 800e62c:	aa26      	add	r2, sp, #152	@ 0x98
 800e62e:	f000 f895 	bl	800e75c <__ssprint_r>
 800e632:	bb78      	cbnz	r0, 800e694 <_svfprintf_r+0x12e4>
 800e634:	a929      	add	r1, sp, #164	@ 0xa4
 800e636:	3c10      	subs	r4, #16
 800e638:	460e      	mov	r6, r1
 800e63a:	e7dd      	b.n	800e5f8 <_svfprintf_r+0x1248>
 800e63c:	2101      	movs	r1, #1
 800e63e:	2a07      	cmp	r2, #7
 800e640:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800e644:	f8c4 b000 	str.w	fp, [r4]
 800e648:	6061      	str	r1, [r4, #4]
 800e64a:	ddb1      	ble.n	800e5b0 <_svfprintf_r+0x1200>
 800e64c:	e7a8      	b.n	800e5a0 <_svfprintf_r+0x11f0>
 800e64e:	3608      	adds	r6, #8
 800e650:	e7ae      	b.n	800e5b0 <_svfprintf_r+0x1200>
 800e652:	460c      	mov	r4, r1
 800e654:	f7ff ba92 	b.w	800db7c <_svfprintf_r+0x7cc>
 800e658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e65a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e65c:	1a9d      	subs	r5, r3, r2
 800e65e:	2d00      	cmp	r5, #0
 800e660:	f77f aa8f 	ble.w	800db82 <_svfprintf_r+0x7d2>
 800e664:	4e3c      	ldr	r6, [pc, #240]	@ (800e758 <_svfprintf_r+0x13a8>)
 800e666:	2710      	movs	r7, #16
 800e668:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800e66c:	2d10      	cmp	r5, #16
 800e66e:	f103 0301 	add.w	r3, r3, #1
 800e672:	6026      	str	r6, [r4, #0]
 800e674:	dc18      	bgt.n	800e6a8 <_svfprintf_r+0x12f8>
 800e676:	6065      	str	r5, [r4, #4]
 800e678:	2b07      	cmp	r3, #7
 800e67a:	4415      	add	r5, r2
 800e67c:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 800e680:	f77f aa7f 	ble.w	800db82 <_svfprintf_r+0x7d2>
 800e684:	9906      	ldr	r1, [sp, #24]
 800e686:	9803      	ldr	r0, [sp, #12]
 800e688:	aa26      	add	r2, sp, #152	@ 0x98
 800e68a:	f000 f867 	bl	800e75c <__ssprint_r>
 800e68e:	2800      	cmp	r0, #0
 800e690:	f43f aa77 	beq.w	800db82 <_svfprintf_r+0x7d2>
 800e694:	f1ba 0f00 	cmp.w	sl, #0
 800e698:	f43f a8a0 	beq.w	800d7dc <_svfprintf_r+0x42c>
 800e69c:	9803      	ldr	r0, [sp, #12]
 800e69e:	4651      	mov	r1, sl
 800e6a0:	f7fd fe0e 	bl	800c2c0 <_free_r>
 800e6a4:	f7ff b89a 	b.w	800d7dc <_svfprintf_r+0x42c>
 800e6a8:	3210      	adds	r2, #16
 800e6aa:	2b07      	cmp	r3, #7
 800e6ac:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800e6b0:	6067      	str	r7, [r4, #4]
 800e6b2:	dc02      	bgt.n	800e6ba <_svfprintf_r+0x130a>
 800e6b4:	3408      	adds	r4, #8
 800e6b6:	3d10      	subs	r5, #16
 800e6b8:	e7d6      	b.n	800e668 <_svfprintf_r+0x12b8>
 800e6ba:	9906      	ldr	r1, [sp, #24]
 800e6bc:	9803      	ldr	r0, [sp, #12]
 800e6be:	aa26      	add	r2, sp, #152	@ 0x98
 800e6c0:	f000 f84c 	bl	800e75c <__ssprint_r>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d1e5      	bne.n	800e694 <_svfprintf_r+0x12e4>
 800e6c8:	ac29      	add	r4, sp, #164	@ 0xa4
 800e6ca:	e7f4      	b.n	800e6b6 <_svfprintf_r+0x1306>
 800e6cc:	9803      	ldr	r0, [sp, #12]
 800e6ce:	4651      	mov	r1, sl
 800e6d0:	f7fd fdf6 	bl	800c2c0 <_free_r>
 800e6d4:	f7ff ba6d 	b.w	800dbb2 <_svfprintf_r+0x802>
 800e6d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f43f a87e 	beq.w	800d7dc <_svfprintf_r+0x42c>
 800e6e0:	9906      	ldr	r1, [sp, #24]
 800e6e2:	9803      	ldr	r0, [sp, #12]
 800e6e4:	aa26      	add	r2, sp, #152	@ 0x98
 800e6e6:	f000 f839 	bl	800e75c <__ssprint_r>
 800e6ea:	f7ff b877 	b.w	800d7dc <_svfprintf_r+0x42c>
 800e6ee:	ea57 0208 	orrs.w	r2, r7, r8
 800e6f2:	9509      	str	r5, [sp, #36]	@ 0x24
 800e6f4:	f43f ab78 	beq.w	800dde8 <_svfprintf_r+0xa38>
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	f43f abf9 	beq.w	800def0 <_svfprintf_r+0xb40>
 800e6fe:	2b02      	cmp	r3, #2
 800e700:	f50d 7ba4 	add.w	fp, sp, #328	@ 0x148
 800e704:	f43f ac3f 	beq.w	800df86 <_svfprintf_r+0xbd6>
 800e708:	f007 0307 	and.w	r3, r7, #7
 800e70c:	08ff      	lsrs	r7, r7, #3
 800e70e:	ea47 7748 	orr.w	r7, r7, r8, lsl #29
 800e712:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800e716:	3330      	adds	r3, #48	@ 0x30
 800e718:	ea57 0108 	orrs.w	r1, r7, r8
 800e71c:	465a      	mov	r2, fp
 800e71e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800e722:	d1f1      	bne.n	800e708 <_svfprintf_r+0x1358>
 800e724:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e726:	07c9      	lsls	r1, r1, #31
 800e728:	d506      	bpl.n	800e738 <_svfprintf_r+0x1388>
 800e72a:	2b30      	cmp	r3, #48	@ 0x30
 800e72c:	d004      	beq.n	800e738 <_svfprintf_r+0x1388>
 800e72e:	2330      	movs	r3, #48	@ 0x30
 800e730:	f80b 3c01 	strb.w	r3, [fp, #-1]
 800e734:	f1a2 0b02 	sub.w	fp, r2, #2
 800e738:	ab52      	add	r3, sp, #328	@ 0x148
 800e73a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e73c:	46b1      	mov	r9, r6
 800e73e:	f04f 0a00 	mov.w	sl, #0
 800e742:	eba3 060b 	sub.w	r6, r3, fp
 800e746:	46d0      	mov	r8, sl
 800e748:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800e74c:	4657      	mov	r7, sl
 800e74e:	f7ff b966 	b.w	800da1e <_svfprintf_r+0x66e>
 800e752:	bf00      	nop
 800e754:	08011e78 	.word	0x08011e78
 800e758:	08011e88 	.word	0x08011e88

0800e75c <__ssprint_r>:
 800e75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e760:	6815      	ldr	r5, [r2, #0]
 800e762:	4606      	mov	r6, r0
 800e764:	460f      	mov	r7, r1
 800e766:	4614      	mov	r4, r2
 800e768:	68a3      	ldr	r3, [r4, #8]
 800e76a:	3508      	adds	r5, #8
 800e76c:	b92b      	cbnz	r3, 800e77a <__ssprint_r+0x1e>
 800e76e:	2000      	movs	r0, #0
 800e770:	2300      	movs	r3, #0
 800e772:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800e776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e77a:	6863      	ldr	r3, [r4, #4]
 800e77c:	1e5a      	subs	r2, r3, #1
 800e77e:	2b00      	cmp	r3, #0
 800e780:	6062      	str	r2, [r4, #4]
 800e782:	ddf4      	ble.n	800e76e <__ssprint_r+0x12>
 800e784:	f855 8c04 	ldr.w	r8, [r5, #-4]
 800e788:	f1b8 0f00 	cmp.w	r8, #0
 800e78c:	d0ec      	beq.n	800e768 <__ssprint_r+0xc>
 800e78e:	4643      	mov	r3, r8
 800e790:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800e794:	4639      	mov	r1, r7
 800e796:	4630      	mov	r0, r6
 800e798:	f001 fd13 	bl	80101c2 <__ssputs_r>
 800e79c:	1c43      	adds	r3, r0, #1
 800e79e:	d0e7      	beq.n	800e770 <__ssprint_r+0x14>
 800e7a0:	68a2      	ldr	r2, [r4, #8]
 800e7a2:	eba2 0208 	sub.w	r2, r2, r8
 800e7a6:	60a2      	str	r2, [r4, #8]
 800e7a8:	e7de      	b.n	800e768 <__ssprint_r+0xc>

0800e7aa <_fclose_r>:
 800e7aa:	b570      	push	{r4, r5, r6, lr}
 800e7ac:	4605      	mov	r5, r0
 800e7ae:	460c      	mov	r4, r1
 800e7b0:	b1b9      	cbz	r1, 800e7e2 <_fclose_r+0x38>
 800e7b2:	b118      	cbz	r0, 800e7bc <_fclose_r+0x12>
 800e7b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e7b6:	b90b      	cbnz	r3, 800e7bc <_fclose_r+0x12>
 800e7b8:	f7fd fb4a 	bl	800be50 <__sinit>
 800e7bc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c2:	07d6      	lsls	r6, r2, #31
 800e7c4:	d404      	bmi.n	800e7d0 <_fclose_r+0x26>
 800e7c6:	0598      	lsls	r0, r3, #22
 800e7c8:	d40e      	bmi.n	800e7e8 <_fclose_r+0x3e>
 800e7ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7cc:	f7fd fcde 	bl	800c18c <__retarget_lock_acquire_recursive>
 800e7d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d4:	b943      	cbnz	r3, 800e7e8 <_fclose_r+0x3e>
 800e7d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7d8:	07d9      	lsls	r1, r3, #31
 800e7da:	d402      	bmi.n	800e7e2 <_fclose_r+0x38>
 800e7dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7de:	f7fd fcd6 	bl	800c18e <__retarget_lock_release_recursive>
 800e7e2:	2600      	movs	r6, #0
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	bd70      	pop	{r4, r5, r6, pc}
 800e7e8:	4621      	mov	r1, r4
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	f000 f834 	bl	800e858 <__sflush_r>
 800e7f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e7f2:	4606      	mov	r6, r0
 800e7f4:	b133      	cbz	r3, 800e804 <_fclose_r+0x5a>
 800e7f6:	69e1      	ldr	r1, [r4, #28]
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	4798      	blx	r3
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	bfb8      	it	lt
 800e800:	f04f 36ff 	movlt.w	r6, #4294967295
 800e804:	89a3      	ldrh	r3, [r4, #12]
 800e806:	061a      	lsls	r2, r3, #24
 800e808:	d503      	bpl.n	800e812 <_fclose_r+0x68>
 800e80a:	6921      	ldr	r1, [r4, #16]
 800e80c:	4628      	mov	r0, r5
 800e80e:	f7fd fd57 	bl	800c2c0 <_free_r>
 800e812:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e814:	b141      	cbz	r1, 800e828 <_fclose_r+0x7e>
 800e816:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e81a:	4299      	cmp	r1, r3
 800e81c:	d002      	beq.n	800e824 <_fclose_r+0x7a>
 800e81e:	4628      	mov	r0, r5
 800e820:	f7fd fd4e 	bl	800c2c0 <_free_r>
 800e824:	2300      	movs	r3, #0
 800e826:	6323      	str	r3, [r4, #48]	@ 0x30
 800e828:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e82a:	b121      	cbz	r1, 800e836 <_fclose_r+0x8c>
 800e82c:	4628      	mov	r0, r5
 800e82e:	f7fd fd47 	bl	800c2c0 <_free_r>
 800e832:	2300      	movs	r3, #0
 800e834:	6463      	str	r3, [r4, #68]	@ 0x44
 800e836:	f7fd faff 	bl	800be38 <__sfp_lock_acquire>
 800e83a:	2300      	movs	r3, #0
 800e83c:	81a3      	strh	r3, [r4, #12]
 800e83e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e840:	07db      	lsls	r3, r3, #31
 800e842:	d402      	bmi.n	800e84a <_fclose_r+0xa0>
 800e844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e846:	f7fd fca2 	bl	800c18e <__retarget_lock_release_recursive>
 800e84a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e84c:	f7fd fc9d 	bl	800c18a <__retarget_lock_close_recursive>
 800e850:	f7fd faf8 	bl	800be44 <__sfp_lock_release>
 800e854:	e7c6      	b.n	800e7e4 <_fclose_r+0x3a>
	...

0800e858 <__sflush_r>:
 800e858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e85c:	4605      	mov	r5, r0
 800e85e:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800e862:	0706      	lsls	r6, r0, #28
 800e864:	460c      	mov	r4, r1
 800e866:	d457      	bmi.n	800e918 <__sflush_r+0xc0>
 800e868:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800e86c:	818b      	strh	r3, [r1, #12]
 800e86e:	684b      	ldr	r3, [r1, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	dc02      	bgt.n	800e87a <__sflush_r+0x22>
 800e874:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800e876:	2b00      	cmp	r3, #0
 800e878:	dd4c      	ble.n	800e914 <__sflush_r+0xbc>
 800e87a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e87c:	2e00      	cmp	r6, #0
 800e87e:	d049      	beq.n	800e914 <__sflush_r+0xbc>
 800e880:	2300      	movs	r3, #0
 800e882:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800e886:	682f      	ldr	r7, [r5, #0]
 800e888:	69e1      	ldr	r1, [r4, #28]
 800e88a:	602b      	str	r3, [r5, #0]
 800e88c:	d034      	beq.n	800e8f8 <__sflush_r+0xa0>
 800e88e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800e890:	89a3      	ldrh	r3, [r4, #12]
 800e892:	0759      	lsls	r1, r3, #29
 800e894:	d505      	bpl.n	800e8a2 <__sflush_r+0x4a>
 800e896:	6863      	ldr	r3, [r4, #4]
 800e898:	1ad2      	subs	r2, r2, r3
 800e89a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e89c:	b10b      	cbz	r3, 800e8a2 <__sflush_r+0x4a>
 800e89e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e8a0:	1ad2      	subs	r2, r2, r3
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e8a6:	69e1      	ldr	r1, [r4, #28]
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	47b0      	blx	r6
 800e8ac:	1c43      	adds	r3, r0, #1
 800e8ae:	d106      	bne.n	800e8be <__sflush_r+0x66>
 800e8b0:	682a      	ldr	r2, [r5, #0]
 800e8b2:	2a1d      	cmp	r2, #29
 800e8b4:	d848      	bhi.n	800e948 <__sflush_r+0xf0>
 800e8b6:	4b2b      	ldr	r3, [pc, #172]	@ (800e964 <__sflush_r+0x10c>)
 800e8b8:	40d3      	lsrs	r3, r2
 800e8ba:	07de      	lsls	r6, r3, #31
 800e8bc:	d544      	bpl.n	800e948 <__sflush_r+0xf0>
 800e8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8c2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e8c6:	81a2      	strh	r2, [r4, #12]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	6062      	str	r2, [r4, #4]
 800e8cc:	04d9      	lsls	r1, r3, #19
 800e8ce:	6922      	ldr	r2, [r4, #16]
 800e8d0:	6022      	str	r2, [r4, #0]
 800e8d2:	d504      	bpl.n	800e8de <__sflush_r+0x86>
 800e8d4:	1c42      	adds	r2, r0, #1
 800e8d6:	d101      	bne.n	800e8dc <__sflush_r+0x84>
 800e8d8:	682b      	ldr	r3, [r5, #0]
 800e8da:	b903      	cbnz	r3, 800e8de <__sflush_r+0x86>
 800e8dc:	6520      	str	r0, [r4, #80]	@ 0x50
 800e8de:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e8e0:	602f      	str	r7, [r5, #0]
 800e8e2:	b1b9      	cbz	r1, 800e914 <__sflush_r+0xbc>
 800e8e4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e8e8:	4299      	cmp	r1, r3
 800e8ea:	d002      	beq.n	800e8f2 <__sflush_r+0x9a>
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	f7fd fce7 	bl	800c2c0 <_free_r>
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800e8f6:	e00d      	b.n	800e914 <__sflush_r+0xbc>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	47b0      	blx	r6
 800e8fe:	4602      	mov	r2, r0
 800e900:	1c50      	adds	r0, r2, #1
 800e902:	d1c5      	bne.n	800e890 <__sflush_r+0x38>
 800e904:	682b      	ldr	r3, [r5, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d0c2      	beq.n	800e890 <__sflush_r+0x38>
 800e90a:	2b1d      	cmp	r3, #29
 800e90c:	d001      	beq.n	800e912 <__sflush_r+0xba>
 800e90e:	2b16      	cmp	r3, #22
 800e910:	d11a      	bne.n	800e948 <__sflush_r+0xf0>
 800e912:	602f      	str	r7, [r5, #0]
 800e914:	2000      	movs	r0, #0
 800e916:	e01e      	b.n	800e956 <__sflush_r+0xfe>
 800e918:	690f      	ldr	r7, [r1, #16]
 800e91a:	2f00      	cmp	r7, #0
 800e91c:	d0fa      	beq.n	800e914 <__sflush_r+0xbc>
 800e91e:	0783      	lsls	r3, r0, #30
 800e920:	680e      	ldr	r6, [r1, #0]
 800e922:	bf08      	it	eq
 800e924:	694b      	ldreq	r3, [r1, #20]
 800e926:	600f      	str	r7, [r1, #0]
 800e928:	bf18      	it	ne
 800e92a:	2300      	movne	r3, #0
 800e92c:	eba6 0807 	sub.w	r8, r6, r7
 800e930:	608b      	str	r3, [r1, #8]
 800e932:	f1b8 0f00 	cmp.w	r8, #0
 800e936:	dded      	ble.n	800e914 <__sflush_r+0xbc>
 800e938:	69e1      	ldr	r1, [r4, #28]
 800e93a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800e93c:	4643      	mov	r3, r8
 800e93e:	463a      	mov	r2, r7
 800e940:	4628      	mov	r0, r5
 800e942:	47b0      	blx	r6
 800e944:	2800      	cmp	r0, #0
 800e946:	dc08      	bgt.n	800e95a <__sflush_r+0x102>
 800e948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e94c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e950:	81a3      	strh	r3, [r4, #12]
 800e952:	f04f 30ff 	mov.w	r0, #4294967295
 800e956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95a:	4407      	add	r7, r0
 800e95c:	eba8 0800 	sub.w	r8, r8, r0
 800e960:	e7e7      	b.n	800e932 <__sflush_r+0xda>
 800e962:	bf00      	nop
 800e964:	20400001 	.word	0x20400001

0800e968 <_fflush_r>:
 800e968:	b538      	push	{r3, r4, r5, lr}
 800e96a:	460c      	mov	r4, r1
 800e96c:	4605      	mov	r5, r0
 800e96e:	b118      	cbz	r0, 800e978 <_fflush_r+0x10>
 800e970:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e972:	b90b      	cbnz	r3, 800e978 <_fflush_r+0x10>
 800e974:	f7fd fa6c 	bl	800be50 <__sinit>
 800e978:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800e97c:	b1b8      	cbz	r0, 800e9ae <_fflush_r+0x46>
 800e97e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e980:	07db      	lsls	r3, r3, #31
 800e982:	d404      	bmi.n	800e98e <_fflush_r+0x26>
 800e984:	0581      	lsls	r1, r0, #22
 800e986:	d402      	bmi.n	800e98e <_fflush_r+0x26>
 800e988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e98a:	f7fd fbff 	bl	800c18c <__retarget_lock_acquire_recursive>
 800e98e:	4628      	mov	r0, r5
 800e990:	4621      	mov	r1, r4
 800e992:	f7ff ff61 	bl	800e858 <__sflush_r>
 800e996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e998:	07da      	lsls	r2, r3, #31
 800e99a:	4605      	mov	r5, r0
 800e99c:	d405      	bmi.n	800e9aa <_fflush_r+0x42>
 800e99e:	89a3      	ldrh	r3, [r4, #12]
 800e9a0:	059b      	lsls	r3, r3, #22
 800e9a2:	d402      	bmi.n	800e9aa <_fflush_r+0x42>
 800e9a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e9a6:	f7fd fbf2 	bl	800c18e <__retarget_lock_release_recursive>
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	bd38      	pop	{r3, r4, r5, pc}
 800e9ae:	4605      	mov	r5, r0
 800e9b0:	e7fb      	b.n	800e9aa <_fflush_r+0x42>
	...

0800e9b4 <_localeconv_r>:
 800e9b4:	4800      	ldr	r0, [pc, #0]	@ (800e9b8 <_localeconv_r+0x4>)
 800e9b6:	4770      	bx	lr
 800e9b8:	20000540 	.word	0x20000540

0800e9bc <__libc_fini_array>:
 800e9bc:	b538      	push	{r3, r4, r5, lr}
 800e9be:	4d07      	ldr	r5, [pc, #28]	@ (800e9dc <__libc_fini_array+0x20>)
 800e9c0:	4c07      	ldr	r4, [pc, #28]	@ (800e9e0 <__libc_fini_array+0x24>)
 800e9c2:	1b64      	subs	r4, r4, r5
 800e9c4:	10a4      	asrs	r4, r4, #2
 800e9c6:	b91c      	cbnz	r4, 800e9d0 <__libc_fini_array+0x14>
 800e9c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9cc:	f002 bf66 	b.w	801189c <_fini>
 800e9d0:	3c01      	subs	r4, #1
 800e9d2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800e9d6:	4798      	blx	r3
 800e9d8:	e7f5      	b.n	800e9c6 <__libc_fini_array+0xa>
 800e9da:	bf00      	nop
 800e9dc:	08011f18 	.word	0x08011f18
 800e9e0:	08011f1c 	.word	0x08011f1c

0800e9e4 <frexp>:
 800e9e4:	b570      	push	{r4, r5, r6, lr}
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	ec55 4b10 	vmov	r4, r5, d0
 800e9ec:	6001      	str	r1, [r0, #0]
 800e9ee:	4914      	ldr	r1, [pc, #80]	@ (800ea40 <frexp+0x5c>)
 800e9f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e9f4:	428b      	cmp	r3, r1
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	d81e      	bhi.n	800ea3a <frexp+0x56>
 800e9fc:	4621      	mov	r1, r4
 800e9fe:	4319      	orrs	r1, r3
 800ea00:	d01b      	beq.n	800ea3a <frexp+0x56>
 800ea02:	4910      	ldr	r1, [pc, #64]	@ (800ea44 <frexp+0x60>)
 800ea04:	4029      	ands	r1, r5
 800ea06:	b961      	cbnz	r1, 800ea22 <frexp+0x3e>
 800ea08:	4b0f      	ldr	r3, [pc, #60]	@ (800ea48 <frexp+0x64>)
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	4629      	mov	r1, r5
 800ea10:	f7f1 fdfa 	bl	8000608 <__aeabi_dmul>
 800ea14:	460a      	mov	r2, r1
 800ea16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ea1a:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800ea1e:	4604      	mov	r4, r0
 800ea20:	6031      	str	r1, [r6, #0]
 800ea22:	6831      	ldr	r1, [r6, #0]
 800ea24:	151b      	asrs	r3, r3, #20
 800ea26:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800ea2a:	f36f 521e 	bfc	r2, #20, #11
 800ea2e:	4419      	add	r1, r3
 800ea30:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ea34:	6031      	str	r1, [r6, #0]
 800ea36:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800ea3a:	ec45 4b10 	vmov	d0, r4, r5
 800ea3e:	bd70      	pop	{r4, r5, r6, pc}
 800ea40:	7fefffff 	.word	0x7fefffff
 800ea44:	7ff00000 	.word	0x7ff00000
 800ea48:	43500000 	.word	0x43500000

0800ea4c <__register_exitproc>:
 800ea4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea50:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800eac8 <__register_exitproc+0x7c>
 800ea54:	4606      	mov	r6, r0
 800ea56:	f8da 0000 	ldr.w	r0, [sl]
 800ea5a:	4698      	mov	r8, r3
 800ea5c:	460f      	mov	r7, r1
 800ea5e:	4691      	mov	r9, r2
 800ea60:	f7fd fb94 	bl	800c18c <__retarget_lock_acquire_recursive>
 800ea64:	4b16      	ldr	r3, [pc, #88]	@ (800eac0 <__register_exitproc+0x74>)
 800ea66:	681c      	ldr	r4, [r3, #0]
 800ea68:	b90c      	cbnz	r4, 800ea6e <__register_exitproc+0x22>
 800ea6a:	4c16      	ldr	r4, [pc, #88]	@ (800eac4 <__register_exitproc+0x78>)
 800ea6c:	601c      	str	r4, [r3, #0]
 800ea6e:	6865      	ldr	r5, [r4, #4]
 800ea70:	f8da 0000 	ldr.w	r0, [sl]
 800ea74:	2d1f      	cmp	r5, #31
 800ea76:	dd05      	ble.n	800ea84 <__register_exitproc+0x38>
 800ea78:	f7fd fb89 	bl	800c18e <__retarget_lock_release_recursive>
 800ea7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea84:	b19e      	cbz	r6, 800eaae <__register_exitproc+0x62>
 800ea86:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800ea90:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800ea94:	40aa      	lsls	r2, r5
 800ea96:	4313      	orrs	r3, r2
 800ea98:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800ea9c:	2e02      	cmp	r6, #2
 800ea9e:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800eaa2:	bf02      	ittt	eq
 800eaa4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800eaa8:	4313      	orreq	r3, r2
 800eaaa:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800eaae:	1c6b      	adds	r3, r5, #1
 800eab0:	3502      	adds	r5, #2
 800eab2:	6063      	str	r3, [r4, #4]
 800eab4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800eab8:	f7fd fb69 	bl	800c18e <__retarget_lock_release_recursive>
 800eabc:	2000      	movs	r0, #0
 800eabe:	e7df      	b.n	800ea80 <__register_exitproc+0x34>
 800eac0:	20001108 	.word	0x20001108
 800eac4:	2000110c 	.word	0x2000110c
 800eac8:	20000700 	.word	0x20000700

0800eacc <__assert_func>:
 800eacc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eace:	4614      	mov	r4, r2
 800ead0:	461a      	mov	r2, r3
 800ead2:	4b09      	ldr	r3, [pc, #36]	@ (800eaf8 <__assert_func+0x2c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4605      	mov	r5, r0
 800ead8:	68d8      	ldr	r0, [r3, #12]
 800eada:	b14c      	cbz	r4, 800eaf0 <__assert_func+0x24>
 800eadc:	4b07      	ldr	r3, [pc, #28]	@ (800eafc <__assert_func+0x30>)
 800eade:	9100      	str	r1, [sp, #0]
 800eae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eae4:	4906      	ldr	r1, [pc, #24]	@ (800eb00 <__assert_func+0x34>)
 800eae6:	462b      	mov	r3, r5
 800eae8:	f000 fe84 	bl	800f7f4 <fiprintf>
 800eaec:	f001 fd80 	bl	80105f0 <abort>
 800eaf0:	4b04      	ldr	r3, [pc, #16]	@ (800eb04 <__assert_func+0x38>)
 800eaf2:	461c      	mov	r4, r3
 800eaf4:	e7f3      	b.n	800eade <__assert_func+0x12>
 800eaf6:	bf00      	nop
 800eaf8:	200005bc 	.word	0x200005bc
 800eafc:	08011b80 	.word	0x08011b80
 800eb00:	08011b8d 	.word	0x08011b8d
 800eb04:	08011bbb 	.word	0x08011bbb

0800eb08 <_calloc_r>:
 800eb08:	b538      	push	{r3, r4, r5, lr}
 800eb0a:	fba1 1502 	umull	r1, r5, r1, r2
 800eb0e:	b935      	cbnz	r5, 800eb1e <_calloc_r+0x16>
 800eb10:	f7fb ffd4 	bl	800aabc <_malloc_r>
 800eb14:	4604      	mov	r4, r0
 800eb16:	b938      	cbnz	r0, 800eb28 <_calloc_r+0x20>
 800eb18:	2400      	movs	r4, #0
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	bd38      	pop	{r3, r4, r5, pc}
 800eb1e:	f7fd fb09 	bl	800c134 <__errno>
 800eb22:	230c      	movs	r3, #12
 800eb24:	6003      	str	r3, [r0, #0]
 800eb26:	e7f7      	b.n	800eb18 <_calloc_r+0x10>
 800eb28:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800eb2c:	f022 0203 	bic.w	r2, r2, #3
 800eb30:	3a04      	subs	r2, #4
 800eb32:	2a24      	cmp	r2, #36	@ 0x24
 800eb34:	d819      	bhi.n	800eb6a <_calloc_r+0x62>
 800eb36:	2a13      	cmp	r2, #19
 800eb38:	d915      	bls.n	800eb66 <_calloc_r+0x5e>
 800eb3a:	2a1b      	cmp	r2, #27
 800eb3c:	e9c0 5500 	strd	r5, r5, [r0]
 800eb40:	d806      	bhi.n	800eb50 <_calloc_r+0x48>
 800eb42:	f100 0308 	add.w	r3, r0, #8
 800eb46:	2200      	movs	r2, #0
 800eb48:	e9c3 2200 	strd	r2, r2, [r3]
 800eb4c:	609a      	str	r2, [r3, #8]
 800eb4e:	e7e4      	b.n	800eb1a <_calloc_r+0x12>
 800eb50:	2a24      	cmp	r2, #36	@ 0x24
 800eb52:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800eb56:	bf11      	iteee	ne
 800eb58:	f100 0310 	addne.w	r3, r0, #16
 800eb5c:	6105      	streq	r5, [r0, #16]
 800eb5e:	f100 0318 	addeq.w	r3, r0, #24
 800eb62:	6145      	streq	r5, [r0, #20]
 800eb64:	e7ef      	b.n	800eb46 <_calloc_r+0x3e>
 800eb66:	4603      	mov	r3, r0
 800eb68:	e7ed      	b.n	800eb46 <_calloc_r+0x3e>
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	f7fd fa0b 	bl	800bf86 <memset>
 800eb70:	e7d3      	b.n	800eb1a <_calloc_r+0x12>

0800eb72 <quorem>:
 800eb72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb76:	6903      	ldr	r3, [r0, #16]
 800eb78:	690c      	ldr	r4, [r1, #16]
 800eb7a:	42a3      	cmp	r3, r4
 800eb7c:	4607      	mov	r7, r0
 800eb7e:	db7e      	blt.n	800ec7e <quorem+0x10c>
 800eb80:	3c01      	subs	r4, #1
 800eb82:	f101 0814 	add.w	r8, r1, #20
 800eb86:	00a3      	lsls	r3, r4, #2
 800eb88:	f100 0514 	add.w	r5, r0, #20
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb92:	9301      	str	r3, [sp, #4]
 800eb94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eba4:	fbb2 f6f3 	udiv	r6, r2, r3
 800eba8:	d32e      	bcc.n	800ec08 <quorem+0x96>
 800ebaa:	f04f 0a00 	mov.w	sl, #0
 800ebae:	46c4      	mov	ip, r8
 800ebb0:	46ae      	mov	lr, r5
 800ebb2:	46d3      	mov	fp, sl
 800ebb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ebb8:	b298      	uxth	r0, r3
 800ebba:	fb06 a000 	mla	r0, r6, r0, sl
 800ebbe:	0c02      	lsrs	r2, r0, #16
 800ebc0:	0c1b      	lsrs	r3, r3, #16
 800ebc2:	fb06 2303 	mla	r3, r6, r3, r2
 800ebc6:	f8de 2000 	ldr.w	r2, [lr]
 800ebca:	b280      	uxth	r0, r0
 800ebcc:	b292      	uxth	r2, r2
 800ebce:	1a12      	subs	r2, r2, r0
 800ebd0:	445a      	add	r2, fp
 800ebd2:	f8de 0000 	ldr.w	r0, [lr]
 800ebd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ebe0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ebe4:	b292      	uxth	r2, r2
 800ebe6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ebea:	45e1      	cmp	r9, ip
 800ebec:	f84e 2b04 	str.w	r2, [lr], #4
 800ebf0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ebf4:	d2de      	bcs.n	800ebb4 <quorem+0x42>
 800ebf6:	9b00      	ldr	r3, [sp, #0]
 800ebf8:	58eb      	ldr	r3, [r5, r3]
 800ebfa:	b92b      	cbnz	r3, 800ec08 <quorem+0x96>
 800ebfc:	9b01      	ldr	r3, [sp, #4]
 800ebfe:	3b04      	subs	r3, #4
 800ec00:	429d      	cmp	r5, r3
 800ec02:	461a      	mov	r2, r3
 800ec04:	d32f      	bcc.n	800ec66 <quorem+0xf4>
 800ec06:	613c      	str	r4, [r7, #16]
 800ec08:	4638      	mov	r0, r7
 800ec0a:	f7fe f9d3 	bl	800cfb4 <__mcmp>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	db25      	blt.n	800ec5e <quorem+0xec>
 800ec12:	4629      	mov	r1, r5
 800ec14:	2000      	movs	r0, #0
 800ec16:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec1a:	f8d1 c000 	ldr.w	ip, [r1]
 800ec1e:	fa1f fe82 	uxth.w	lr, r2
 800ec22:	fa1f f38c 	uxth.w	r3, ip
 800ec26:	eba3 030e 	sub.w	r3, r3, lr
 800ec2a:	4403      	add	r3, r0
 800ec2c:	0c12      	lsrs	r2, r2, #16
 800ec2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ec32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec3c:	45c1      	cmp	r9, r8
 800ec3e:	f841 3b04 	str.w	r3, [r1], #4
 800ec42:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ec46:	d2e6      	bcs.n	800ec16 <quorem+0xa4>
 800ec48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec50:	b922      	cbnz	r2, 800ec5c <quorem+0xea>
 800ec52:	3b04      	subs	r3, #4
 800ec54:	429d      	cmp	r5, r3
 800ec56:	461a      	mov	r2, r3
 800ec58:	d30b      	bcc.n	800ec72 <quorem+0x100>
 800ec5a:	613c      	str	r4, [r7, #16]
 800ec5c:	3601      	adds	r6, #1
 800ec5e:	4630      	mov	r0, r6
 800ec60:	b003      	add	sp, #12
 800ec62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec66:	6812      	ldr	r2, [r2, #0]
 800ec68:	3b04      	subs	r3, #4
 800ec6a:	2a00      	cmp	r2, #0
 800ec6c:	d1cb      	bne.n	800ec06 <quorem+0x94>
 800ec6e:	3c01      	subs	r4, #1
 800ec70:	e7c6      	b.n	800ec00 <quorem+0x8e>
 800ec72:	6812      	ldr	r2, [r2, #0]
 800ec74:	3b04      	subs	r3, #4
 800ec76:	2a00      	cmp	r2, #0
 800ec78:	d1ef      	bne.n	800ec5a <quorem+0xe8>
 800ec7a:	3c01      	subs	r4, #1
 800ec7c:	e7ea      	b.n	800ec54 <quorem+0xe2>
 800ec7e:	2000      	movs	r0, #0
 800ec80:	e7ee      	b.n	800ec60 <quorem+0xee>
 800ec82:	0000      	movs	r0, r0
 800ec84:	0000      	movs	r0, r0
	...

0800ec88 <_dtoa_r>:
 800ec88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8c:	b097      	sub	sp, #92	@ 0x5c
 800ec8e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ec92:	9107      	str	r1, [sp, #28]
 800ec94:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800ec96:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ec98:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec9a:	ec55 4b10 	vmov	r4, r5, d0
 800ec9e:	4681      	mov	r9, r0
 800eca0:	9311      	str	r3, [sp, #68]	@ 0x44
 800eca2:	b149      	cbz	r1, 800ecb8 <_dtoa_r+0x30>
 800eca4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eca6:	604a      	str	r2, [r1, #4]
 800eca8:	2301      	movs	r3, #1
 800ecaa:	4093      	lsls	r3, r2
 800ecac:	608b      	str	r3, [r1, #8]
 800ecae:	f7fd ff37 	bl	800cb20 <_Bfree>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 800ecb8:	1e2b      	subs	r3, r5, #0
 800ecba:	bfb9      	ittee	lt
 800ecbc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ecc0:	9305      	strlt	r3, [sp, #20]
 800ecc2:	2300      	movge	r3, #0
 800ecc4:	6033      	strge	r3, [r6, #0]
 800ecc6:	9f05      	ldr	r7, [sp, #20]
 800ecc8:	4b99      	ldr	r3, [pc, #612]	@ (800ef30 <_dtoa_r+0x2a8>)
 800ecca:	bfbc      	itt	lt
 800eccc:	2201      	movlt	r2, #1
 800ecce:	6032      	strlt	r2, [r6, #0]
 800ecd0:	43bb      	bics	r3, r7
 800ecd2:	d114      	bne.n	800ecfe <_dtoa_r+0x76>
 800ecd4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ecd6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ecda:	6013      	str	r3, [r2, #0]
 800ecdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ece0:	4323      	orrs	r3, r4
 800ece2:	f000 8557 	beq.w	800f794 <_dtoa_r+0xb0c>
 800ece6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ece8:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ef48 <_dtoa_r+0x2c0>
 800ecec:	b11b      	cbz	r3, 800ecf6 <_dtoa_r+0x6e>
 800ecee:	f10a 0303 	add.w	r3, sl, #3
 800ecf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ecf4:	6013      	str	r3, [r2, #0]
 800ecf6:	4650      	mov	r0, sl
 800ecf8:	b017      	add	sp, #92	@ 0x5c
 800ecfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ed02:	2200      	movs	r2, #0
 800ed04:	ec51 0b17 	vmov	r0, r1, d7
 800ed08:	2300      	movs	r3, #0
 800ed0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ed0e:	f7f1 fee3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed12:	4680      	mov	r8, r0
 800ed14:	b150      	cbz	r0, 800ed2c <_dtoa_r+0xa4>
 800ed16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ed18:	2301      	movs	r3, #1
 800ed1a:	6013      	str	r3, [r2, #0]
 800ed1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ed1e:	b113      	cbz	r3, 800ed26 <_dtoa_r+0x9e>
 800ed20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ed22:	4b84      	ldr	r3, [pc, #528]	@ (800ef34 <_dtoa_r+0x2ac>)
 800ed24:	6013      	str	r3, [r2, #0]
 800ed26:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800ef4c <_dtoa_r+0x2c4>
 800ed2a:	e7e4      	b.n	800ecf6 <_dtoa_r+0x6e>
 800ed2c:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ed30:	aa14      	add	r2, sp, #80	@ 0x50
 800ed32:	a915      	add	r1, sp, #84	@ 0x54
 800ed34:	4648      	mov	r0, r9
 800ed36:	f7fe fa5d 	bl	800d1f4 <__d2b>
 800ed3a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ed3e:	9002      	str	r0, [sp, #8]
 800ed40:	2e00      	cmp	r6, #0
 800ed42:	d078      	beq.n	800ee36 <_dtoa_r+0x1ae>
 800ed44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed46:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ed4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ed52:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ed56:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ed5a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ed5e:	4619      	mov	r1, r3
 800ed60:	2200      	movs	r2, #0
 800ed62:	4b75      	ldr	r3, [pc, #468]	@ (800ef38 <_dtoa_r+0x2b0>)
 800ed64:	f7f1 fa98 	bl	8000298 <__aeabi_dsub>
 800ed68:	a36b      	add	r3, pc, #428	@ (adr r3, 800ef18 <_dtoa_r+0x290>)
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	f7f1 fc4b 	bl	8000608 <__aeabi_dmul>
 800ed72:	a36b      	add	r3, pc, #428	@ (adr r3, 800ef20 <_dtoa_r+0x298>)
 800ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed78:	f7f1 fa90 	bl	800029c <__adddf3>
 800ed7c:	4604      	mov	r4, r0
 800ed7e:	4630      	mov	r0, r6
 800ed80:	460d      	mov	r5, r1
 800ed82:	f7f1 fbd7 	bl	8000534 <__aeabi_i2d>
 800ed86:	a368      	add	r3, pc, #416	@ (adr r3, 800ef28 <_dtoa_r+0x2a0>)
 800ed88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8c:	f7f1 fc3c 	bl	8000608 <__aeabi_dmul>
 800ed90:	4602      	mov	r2, r0
 800ed92:	460b      	mov	r3, r1
 800ed94:	4620      	mov	r0, r4
 800ed96:	4629      	mov	r1, r5
 800ed98:	f7f1 fa80 	bl	800029c <__adddf3>
 800ed9c:	4604      	mov	r4, r0
 800ed9e:	460d      	mov	r5, r1
 800eda0:	f7f1 fee2 	bl	8000b68 <__aeabi_d2iz>
 800eda4:	2200      	movs	r2, #0
 800eda6:	4607      	mov	r7, r0
 800eda8:	2300      	movs	r3, #0
 800edaa:	4620      	mov	r0, r4
 800edac:	4629      	mov	r1, r5
 800edae:	f7f1 fe9d 	bl	8000aec <__aeabi_dcmplt>
 800edb2:	b140      	cbz	r0, 800edc6 <_dtoa_r+0x13e>
 800edb4:	4638      	mov	r0, r7
 800edb6:	f7f1 fbbd 	bl	8000534 <__aeabi_i2d>
 800edba:	4622      	mov	r2, r4
 800edbc:	462b      	mov	r3, r5
 800edbe:	f7f1 fe8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800edc2:	b900      	cbnz	r0, 800edc6 <_dtoa_r+0x13e>
 800edc4:	3f01      	subs	r7, #1
 800edc6:	2f16      	cmp	r7, #22
 800edc8:	d852      	bhi.n	800ee70 <_dtoa_r+0x1e8>
 800edca:	4b5c      	ldr	r3, [pc, #368]	@ (800ef3c <_dtoa_r+0x2b4>)
 800edcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800edd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800edd8:	f7f1 fe88 	bl	8000aec <__aeabi_dcmplt>
 800eddc:	2800      	cmp	r0, #0
 800edde:	d049      	beq.n	800ee74 <_dtoa_r+0x1ec>
 800ede0:	3f01      	subs	r7, #1
 800ede2:	2300      	movs	r3, #0
 800ede4:	9310      	str	r3, [sp, #64]	@ 0x40
 800ede6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ede8:	1b9b      	subs	r3, r3, r6
 800edea:	1e5a      	subs	r2, r3, #1
 800edec:	bf45      	ittet	mi
 800edee:	f1c3 0301 	rsbmi	r3, r3, #1
 800edf2:	9300      	strmi	r3, [sp, #0]
 800edf4:	2300      	movpl	r3, #0
 800edf6:	2300      	movmi	r3, #0
 800edf8:	9206      	str	r2, [sp, #24]
 800edfa:	bf54      	ite	pl
 800edfc:	9300      	strpl	r3, [sp, #0]
 800edfe:	9306      	strmi	r3, [sp, #24]
 800ee00:	2f00      	cmp	r7, #0
 800ee02:	db39      	blt.n	800ee78 <_dtoa_r+0x1f0>
 800ee04:	9b06      	ldr	r3, [sp, #24]
 800ee06:	970d      	str	r7, [sp, #52]	@ 0x34
 800ee08:	443b      	add	r3, r7
 800ee0a:	9306      	str	r3, [sp, #24]
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	9308      	str	r3, [sp, #32]
 800ee10:	9b07      	ldr	r3, [sp, #28]
 800ee12:	2b09      	cmp	r3, #9
 800ee14:	d864      	bhi.n	800eee0 <_dtoa_r+0x258>
 800ee16:	2b05      	cmp	r3, #5
 800ee18:	bfc4      	itt	gt
 800ee1a:	3b04      	subgt	r3, #4
 800ee1c:	9307      	strgt	r3, [sp, #28]
 800ee1e:	9b07      	ldr	r3, [sp, #28]
 800ee20:	f1a3 0302 	sub.w	r3, r3, #2
 800ee24:	bfcc      	ite	gt
 800ee26:	2400      	movgt	r4, #0
 800ee28:	2401      	movle	r4, #1
 800ee2a:	2b03      	cmp	r3, #3
 800ee2c:	d864      	bhi.n	800eef8 <_dtoa_r+0x270>
 800ee2e:	e8df f003 	tbb	[pc, r3]
 800ee32:	5553      	.short	0x5553
 800ee34:	2b37      	.short	0x2b37
 800ee36:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ee3a:	441e      	add	r6, r3
 800ee3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ee40:	2b20      	cmp	r3, #32
 800ee42:	bfc1      	itttt	gt
 800ee44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ee48:	409f      	lslgt	r7, r3
 800ee4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ee4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ee52:	bfd6      	itet	le
 800ee54:	f1c3 0320 	rsble	r3, r3, #32
 800ee58:	ea47 0003 	orrgt.w	r0, r7, r3
 800ee5c:	fa04 f003 	lslle.w	r0, r4, r3
 800ee60:	f7f1 fb58 	bl	8000514 <__aeabi_ui2d>
 800ee64:	2201      	movs	r2, #1
 800ee66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ee6a:	3e01      	subs	r6, #1
 800ee6c:	9212      	str	r2, [sp, #72]	@ 0x48
 800ee6e:	e776      	b.n	800ed5e <_dtoa_r+0xd6>
 800ee70:	2301      	movs	r3, #1
 800ee72:	e7b7      	b.n	800ede4 <_dtoa_r+0x15c>
 800ee74:	9010      	str	r0, [sp, #64]	@ 0x40
 800ee76:	e7b6      	b.n	800ede6 <_dtoa_r+0x15e>
 800ee78:	9b00      	ldr	r3, [sp, #0]
 800ee7a:	1bdb      	subs	r3, r3, r7
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	427b      	negs	r3, r7
 800ee80:	9308      	str	r3, [sp, #32]
 800ee82:	2300      	movs	r3, #0
 800ee84:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee86:	e7c3      	b.n	800ee10 <_dtoa_r+0x188>
 800ee88:	2301      	movs	r3, #1
 800ee8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee8e:	eb07 0b03 	add.w	fp, r7, r3
 800ee92:	f10b 0301 	add.w	r3, fp, #1
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	9303      	str	r3, [sp, #12]
 800ee9a:	bfb8      	it	lt
 800ee9c:	2301      	movlt	r3, #1
 800ee9e:	e006      	b.n	800eeae <_dtoa_r+0x226>
 800eea0:	2301      	movs	r3, #1
 800eea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eea4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	dd29      	ble.n	800eefe <_dtoa_r+0x276>
 800eeaa:	469b      	mov	fp, r3
 800eeac:	9303      	str	r3, [sp, #12]
 800eeae:	2100      	movs	r1, #0
 800eeb0:	2204      	movs	r2, #4
 800eeb2:	f102 0014 	add.w	r0, r2, #20
 800eeb6:	4298      	cmp	r0, r3
 800eeb8:	d929      	bls.n	800ef0e <_dtoa_r+0x286>
 800eeba:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 800eebe:	4648      	mov	r0, r9
 800eec0:	f7fd fe09 	bl	800cad6 <_Balloc>
 800eec4:	4682      	mov	sl, r0
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d142      	bne.n	800ef50 <_dtoa_r+0x2c8>
 800eeca:	4b1d      	ldr	r3, [pc, #116]	@ (800ef40 <_dtoa_r+0x2b8>)
 800eecc:	4602      	mov	r2, r0
 800eece:	f240 11af 	movw	r1, #431	@ 0x1af
 800eed2:	481c      	ldr	r0, [pc, #112]	@ (800ef44 <_dtoa_r+0x2bc>)
 800eed4:	f7ff fdfa 	bl	800eacc <__assert_func>
 800eed8:	2300      	movs	r3, #0
 800eeda:	e7e2      	b.n	800eea2 <_dtoa_r+0x21a>
 800eedc:	2300      	movs	r3, #0
 800eede:	e7d4      	b.n	800ee8a <_dtoa_r+0x202>
 800eee0:	2401      	movs	r4, #1
 800eee2:	2300      	movs	r3, #0
 800eee4:	9307      	str	r3, [sp, #28]
 800eee6:	9409      	str	r4, [sp, #36]	@ 0x24
 800eee8:	f04f 3bff 	mov.w	fp, #4294967295
 800eeec:	2200      	movs	r2, #0
 800eeee:	f8cd b00c 	str.w	fp, [sp, #12]
 800eef2:	2312      	movs	r3, #18
 800eef4:	920c      	str	r2, [sp, #48]	@ 0x30
 800eef6:	e7da      	b.n	800eeae <_dtoa_r+0x226>
 800eef8:	2301      	movs	r3, #1
 800eefa:	9309      	str	r3, [sp, #36]	@ 0x24
 800eefc:	e7f4      	b.n	800eee8 <_dtoa_r+0x260>
 800eefe:	f04f 0b01 	mov.w	fp, #1
 800ef02:	f8cd b00c 	str.w	fp, [sp, #12]
 800ef06:	465b      	mov	r3, fp
 800ef08:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ef0c:	e7cf      	b.n	800eeae <_dtoa_r+0x226>
 800ef0e:	3101      	adds	r1, #1
 800ef10:	0052      	lsls	r2, r2, #1
 800ef12:	e7ce      	b.n	800eeb2 <_dtoa_r+0x22a>
 800ef14:	f3af 8000 	nop.w
 800ef18:	636f4361 	.word	0x636f4361
 800ef1c:	3fd287a7 	.word	0x3fd287a7
 800ef20:	8b60c8b3 	.word	0x8b60c8b3
 800ef24:	3fc68a28 	.word	0x3fc68a28
 800ef28:	509f79fb 	.word	0x509f79fb
 800ef2c:	3fd34413 	.word	0x3fd34413
 800ef30:	7ff00000 	.word	0x7ff00000
 800ef34:	08011b7f 	.word	0x08011b7f
 800ef38:	3ff80000 	.word	0x3ff80000
 800ef3c:	08011db0 	.word	0x08011db0
 800ef40:	08011a82 	.word	0x08011a82
 800ef44:	08011bc9 	.word	0x08011bc9
 800ef48:	08011bc5 	.word	0x08011bc5
 800ef4c:	08011b7e 	.word	0x08011b7e
 800ef50:	9b03      	ldr	r3, [sp, #12]
 800ef52:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 800ef56:	2b0e      	cmp	r3, #14
 800ef58:	f200 80a1 	bhi.w	800f09e <_dtoa_r+0x416>
 800ef5c:	2c00      	cmp	r4, #0
 800ef5e:	f000 809e 	beq.w	800f09e <_dtoa_r+0x416>
 800ef62:	2f00      	cmp	r7, #0
 800ef64:	dd33      	ble.n	800efce <_dtoa_r+0x346>
 800ef66:	4b9c      	ldr	r3, [pc, #624]	@ (800f1d8 <_dtoa_r+0x550>)
 800ef68:	f007 020f 	and.w	r2, r7, #15
 800ef6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef70:	ed93 7b00 	vldr	d7, [r3]
 800ef74:	05f8      	lsls	r0, r7, #23
 800ef76:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ef7a:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ef7e:	d516      	bpl.n	800efae <_dtoa_r+0x326>
 800ef80:	4b96      	ldr	r3, [pc, #600]	@ (800f1dc <_dtoa_r+0x554>)
 800ef82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ef86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef8a:	f7f1 fc67 	bl	800085c <__aeabi_ddiv>
 800ef8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef92:	f004 040f 	and.w	r4, r4, #15
 800ef96:	2603      	movs	r6, #3
 800ef98:	4d90      	ldr	r5, [pc, #576]	@ (800f1dc <_dtoa_r+0x554>)
 800ef9a:	b954      	cbnz	r4, 800efb2 <_dtoa_r+0x32a>
 800ef9c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800efa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efa4:	f7f1 fc5a 	bl	800085c <__aeabi_ddiv>
 800efa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efac:	e028      	b.n	800f000 <_dtoa_r+0x378>
 800efae:	2602      	movs	r6, #2
 800efb0:	e7f2      	b.n	800ef98 <_dtoa_r+0x310>
 800efb2:	07e1      	lsls	r1, r4, #31
 800efb4:	d508      	bpl.n	800efc8 <_dtoa_r+0x340>
 800efb6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800efba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800efbe:	f7f1 fb23 	bl	8000608 <__aeabi_dmul>
 800efc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800efc6:	3601      	adds	r6, #1
 800efc8:	1064      	asrs	r4, r4, #1
 800efca:	3508      	adds	r5, #8
 800efcc:	e7e5      	b.n	800ef9a <_dtoa_r+0x312>
 800efce:	f000 80af 	beq.w	800f130 <_dtoa_r+0x4a8>
 800efd2:	427c      	negs	r4, r7
 800efd4:	4b80      	ldr	r3, [pc, #512]	@ (800f1d8 <_dtoa_r+0x550>)
 800efd6:	4d81      	ldr	r5, [pc, #516]	@ (800f1dc <_dtoa_r+0x554>)
 800efd8:	f004 020f 	and.w	r2, r4, #15
 800efdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800efe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800efe8:	f7f1 fb0e 	bl	8000608 <__aeabi_dmul>
 800efec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eff0:	1124      	asrs	r4, r4, #4
 800eff2:	2300      	movs	r3, #0
 800eff4:	2602      	movs	r6, #2
 800eff6:	2c00      	cmp	r4, #0
 800eff8:	f040 808f 	bne.w	800f11a <_dtoa_r+0x492>
 800effc:	2b00      	cmp	r3, #0
 800effe:	d1d3      	bne.n	800efa8 <_dtoa_r+0x320>
 800f000:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f002:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f006:	2b00      	cmp	r3, #0
 800f008:	f000 8094 	beq.w	800f134 <_dtoa_r+0x4ac>
 800f00c:	4b74      	ldr	r3, [pc, #464]	@ (800f1e0 <_dtoa_r+0x558>)
 800f00e:	2200      	movs	r2, #0
 800f010:	4620      	mov	r0, r4
 800f012:	4629      	mov	r1, r5
 800f014:	f7f1 fd6a 	bl	8000aec <__aeabi_dcmplt>
 800f018:	2800      	cmp	r0, #0
 800f01a:	f000 808b 	beq.w	800f134 <_dtoa_r+0x4ac>
 800f01e:	9b03      	ldr	r3, [sp, #12]
 800f020:	2b00      	cmp	r3, #0
 800f022:	f000 8087 	beq.w	800f134 <_dtoa_r+0x4ac>
 800f026:	f1bb 0f00 	cmp.w	fp, #0
 800f02a:	dd34      	ble.n	800f096 <_dtoa_r+0x40e>
 800f02c:	4620      	mov	r0, r4
 800f02e:	4b6d      	ldr	r3, [pc, #436]	@ (800f1e4 <_dtoa_r+0x55c>)
 800f030:	2200      	movs	r2, #0
 800f032:	4629      	mov	r1, r5
 800f034:	f7f1 fae8 	bl	8000608 <__aeabi_dmul>
 800f038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f03c:	f107 38ff 	add.w	r8, r7, #4294967295
 800f040:	3601      	adds	r6, #1
 800f042:	465c      	mov	r4, fp
 800f044:	4630      	mov	r0, r6
 800f046:	f7f1 fa75 	bl	8000534 <__aeabi_i2d>
 800f04a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f04e:	f7f1 fadb 	bl	8000608 <__aeabi_dmul>
 800f052:	4b65      	ldr	r3, [pc, #404]	@ (800f1e8 <_dtoa_r+0x560>)
 800f054:	2200      	movs	r2, #0
 800f056:	f7f1 f921 	bl	800029c <__adddf3>
 800f05a:	4605      	mov	r5, r0
 800f05c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f060:	2c00      	cmp	r4, #0
 800f062:	d16a      	bne.n	800f13a <_dtoa_r+0x4b2>
 800f064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f068:	4b60      	ldr	r3, [pc, #384]	@ (800f1ec <_dtoa_r+0x564>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	f7f1 f914 	bl	8000298 <__aeabi_dsub>
 800f070:	4602      	mov	r2, r0
 800f072:	460b      	mov	r3, r1
 800f074:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f078:	462a      	mov	r2, r5
 800f07a:	4633      	mov	r3, r6
 800f07c:	f7f1 fd54 	bl	8000b28 <__aeabi_dcmpgt>
 800f080:	2800      	cmp	r0, #0
 800f082:	f040 8297 	bne.w	800f5b4 <_dtoa_r+0x92c>
 800f086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f08a:	462a      	mov	r2, r5
 800f08c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f090:	f7f1 fd2c 	bl	8000aec <__aeabi_dcmplt>
 800f094:	bb38      	cbnz	r0, 800f0e6 <_dtoa_r+0x45e>
 800f096:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f09a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f09e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f2c0 8156 	blt.w	800f352 <_dtoa_r+0x6ca>
 800f0a6:	2f0e      	cmp	r7, #14
 800f0a8:	f300 8153 	bgt.w	800f352 <_dtoa_r+0x6ca>
 800f0ac:	4b4a      	ldr	r3, [pc, #296]	@ (800f1d8 <_dtoa_r+0x550>)
 800f0ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f0b2:	ed93 7b00 	vldr	d7, [r3]
 800f0b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	ed8d 7b00 	vstr	d7, [sp]
 800f0be:	f280 80e4 	bge.w	800f28a <_dtoa_r+0x602>
 800f0c2:	9b03      	ldr	r3, [sp, #12]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f300 80e0 	bgt.w	800f28a <_dtoa_r+0x602>
 800f0ca:	d10c      	bne.n	800f0e6 <_dtoa_r+0x45e>
 800f0cc:	4b47      	ldr	r3, [pc, #284]	@ (800f1ec <_dtoa_r+0x564>)
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	ec51 0b17 	vmov	r0, r1, d7
 800f0d4:	f7f1 fa98 	bl	8000608 <__aeabi_dmul>
 800f0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0dc:	f7f1 fd1a 	bl	8000b14 <__aeabi_dcmpge>
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	f000 8265 	beq.w	800f5b0 <_dtoa_r+0x928>
 800f0e6:	2400      	movs	r4, #0
 800f0e8:	4625      	mov	r5, r4
 800f0ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0ec:	4656      	mov	r6, sl
 800f0ee:	ea6f 0803 	mvn.w	r8, r3
 800f0f2:	2700      	movs	r7, #0
 800f0f4:	4621      	mov	r1, r4
 800f0f6:	4648      	mov	r0, r9
 800f0f8:	f7fd fd12 	bl	800cb20 <_Bfree>
 800f0fc:	2d00      	cmp	r5, #0
 800f0fe:	f000 80bc 	beq.w	800f27a <_dtoa_r+0x5f2>
 800f102:	b12f      	cbz	r7, 800f110 <_dtoa_r+0x488>
 800f104:	42af      	cmp	r7, r5
 800f106:	d003      	beq.n	800f110 <_dtoa_r+0x488>
 800f108:	4639      	mov	r1, r7
 800f10a:	4648      	mov	r0, r9
 800f10c:	f7fd fd08 	bl	800cb20 <_Bfree>
 800f110:	4629      	mov	r1, r5
 800f112:	4648      	mov	r0, r9
 800f114:	f7fd fd04 	bl	800cb20 <_Bfree>
 800f118:	e0af      	b.n	800f27a <_dtoa_r+0x5f2>
 800f11a:	07e2      	lsls	r2, r4, #31
 800f11c:	d505      	bpl.n	800f12a <_dtoa_r+0x4a2>
 800f11e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f122:	f7f1 fa71 	bl	8000608 <__aeabi_dmul>
 800f126:	3601      	adds	r6, #1
 800f128:	2301      	movs	r3, #1
 800f12a:	1064      	asrs	r4, r4, #1
 800f12c:	3508      	adds	r5, #8
 800f12e:	e762      	b.n	800eff6 <_dtoa_r+0x36e>
 800f130:	2602      	movs	r6, #2
 800f132:	e765      	b.n	800f000 <_dtoa_r+0x378>
 800f134:	9c03      	ldr	r4, [sp, #12]
 800f136:	46b8      	mov	r8, r7
 800f138:	e784      	b.n	800f044 <_dtoa_r+0x3bc>
 800f13a:	4b27      	ldr	r3, [pc, #156]	@ (800f1d8 <_dtoa_r+0x550>)
 800f13c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f13e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f142:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f146:	4454      	add	r4, sl
 800f148:	2900      	cmp	r1, #0
 800f14a:	d053      	beq.n	800f1f4 <_dtoa_r+0x56c>
 800f14c:	4928      	ldr	r1, [pc, #160]	@ (800f1f0 <_dtoa_r+0x568>)
 800f14e:	2000      	movs	r0, #0
 800f150:	f7f1 fb84 	bl	800085c <__aeabi_ddiv>
 800f154:	4633      	mov	r3, r6
 800f156:	462a      	mov	r2, r5
 800f158:	f7f1 f89e 	bl	8000298 <__aeabi_dsub>
 800f15c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f160:	4656      	mov	r6, sl
 800f162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f166:	f7f1 fcff 	bl	8000b68 <__aeabi_d2iz>
 800f16a:	4605      	mov	r5, r0
 800f16c:	f7f1 f9e2 	bl	8000534 <__aeabi_i2d>
 800f170:	4602      	mov	r2, r0
 800f172:	460b      	mov	r3, r1
 800f174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f178:	f7f1 f88e 	bl	8000298 <__aeabi_dsub>
 800f17c:	3530      	adds	r5, #48	@ 0x30
 800f17e:	4602      	mov	r2, r0
 800f180:	460b      	mov	r3, r1
 800f182:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f186:	f806 5b01 	strb.w	r5, [r6], #1
 800f18a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f18e:	f7f1 fcad 	bl	8000aec <__aeabi_dcmplt>
 800f192:	2800      	cmp	r0, #0
 800f194:	d171      	bne.n	800f27a <_dtoa_r+0x5f2>
 800f196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f19a:	4911      	ldr	r1, [pc, #68]	@ (800f1e0 <_dtoa_r+0x558>)
 800f19c:	2000      	movs	r0, #0
 800f19e:	f7f1 f87b 	bl	8000298 <__aeabi_dsub>
 800f1a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f1a6:	f7f1 fca1 	bl	8000aec <__aeabi_dcmplt>
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	f040 80b3 	bne.w	800f316 <_dtoa_r+0x68e>
 800f1b0:	42a6      	cmp	r6, r4
 800f1b2:	f43f af70 	beq.w	800f096 <_dtoa_r+0x40e>
 800f1b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f1ba:	4b0a      	ldr	r3, [pc, #40]	@ (800f1e4 <_dtoa_r+0x55c>)
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f7f1 fa23 	bl	8000608 <__aeabi_dmul>
 800f1c2:	4b08      	ldr	r3, [pc, #32]	@ (800f1e4 <_dtoa_r+0x55c>)
 800f1c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1ce:	f7f1 fa1b 	bl	8000608 <__aeabi_dmul>
 800f1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1d6:	e7c4      	b.n	800f162 <_dtoa_r+0x4da>
 800f1d8:	08011db0 	.word	0x08011db0
 800f1dc:	08011d88 	.word	0x08011d88
 800f1e0:	3ff00000 	.word	0x3ff00000
 800f1e4:	40240000 	.word	0x40240000
 800f1e8:	401c0000 	.word	0x401c0000
 800f1ec:	40140000 	.word	0x40140000
 800f1f0:	3fe00000 	.word	0x3fe00000
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	f7f1 fa06 	bl	8000608 <__aeabi_dmul>
 800f1fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f200:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f202:	4656      	mov	r6, sl
 800f204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f208:	f7f1 fcae 	bl	8000b68 <__aeabi_d2iz>
 800f20c:	4605      	mov	r5, r0
 800f20e:	f7f1 f991 	bl	8000534 <__aeabi_i2d>
 800f212:	4602      	mov	r2, r0
 800f214:	460b      	mov	r3, r1
 800f216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f21a:	f7f1 f83d 	bl	8000298 <__aeabi_dsub>
 800f21e:	3530      	adds	r5, #48	@ 0x30
 800f220:	f806 5b01 	strb.w	r5, [r6], #1
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	42a6      	cmp	r6, r4
 800f22a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f22e:	f04f 0200 	mov.w	r2, #0
 800f232:	d124      	bne.n	800f27e <_dtoa_r+0x5f6>
 800f234:	4baf      	ldr	r3, [pc, #700]	@ (800f4f4 <_dtoa_r+0x86c>)
 800f236:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f23a:	f7f1 f82f 	bl	800029c <__adddf3>
 800f23e:	4602      	mov	r2, r0
 800f240:	460b      	mov	r3, r1
 800f242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f246:	f7f1 fc6f 	bl	8000b28 <__aeabi_dcmpgt>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d163      	bne.n	800f316 <_dtoa_r+0x68e>
 800f24e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f252:	49a8      	ldr	r1, [pc, #672]	@ (800f4f4 <_dtoa_r+0x86c>)
 800f254:	2000      	movs	r0, #0
 800f256:	f7f1 f81f 	bl	8000298 <__aeabi_dsub>
 800f25a:	4602      	mov	r2, r0
 800f25c:	460b      	mov	r3, r1
 800f25e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f262:	f7f1 fc43 	bl	8000aec <__aeabi_dcmplt>
 800f266:	2800      	cmp	r0, #0
 800f268:	f43f af15 	beq.w	800f096 <_dtoa_r+0x40e>
 800f26c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f26e:	1e73      	subs	r3, r6, #1
 800f270:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f272:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f276:	2b30      	cmp	r3, #48	@ 0x30
 800f278:	d0f8      	beq.n	800f26c <_dtoa_r+0x5e4>
 800f27a:	4647      	mov	r7, r8
 800f27c:	e03b      	b.n	800f2f6 <_dtoa_r+0x66e>
 800f27e:	4b9e      	ldr	r3, [pc, #632]	@ (800f4f8 <_dtoa_r+0x870>)
 800f280:	f7f1 f9c2 	bl	8000608 <__aeabi_dmul>
 800f284:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f288:	e7bc      	b.n	800f204 <_dtoa_r+0x57c>
 800f28a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f28e:	4656      	mov	r6, sl
 800f290:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f294:	4620      	mov	r0, r4
 800f296:	4629      	mov	r1, r5
 800f298:	f7f1 fae0 	bl	800085c <__aeabi_ddiv>
 800f29c:	f7f1 fc64 	bl	8000b68 <__aeabi_d2iz>
 800f2a0:	4680      	mov	r8, r0
 800f2a2:	f7f1 f947 	bl	8000534 <__aeabi_i2d>
 800f2a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2aa:	f7f1 f9ad 	bl	8000608 <__aeabi_dmul>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	4620      	mov	r0, r4
 800f2b4:	4629      	mov	r1, r5
 800f2b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f2ba:	f7f0 ffed 	bl	8000298 <__aeabi_dsub>
 800f2be:	f806 4b01 	strb.w	r4, [r6], #1
 800f2c2:	9d03      	ldr	r5, [sp, #12]
 800f2c4:	eba6 040a 	sub.w	r4, r6, sl
 800f2c8:	42a5      	cmp	r5, r4
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	d133      	bne.n	800f338 <_dtoa_r+0x6b0>
 800f2d0:	f7f0 ffe4 	bl	800029c <__adddf3>
 800f2d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2d8:	4604      	mov	r4, r0
 800f2da:	460d      	mov	r5, r1
 800f2dc:	f7f1 fc24 	bl	8000b28 <__aeabi_dcmpgt>
 800f2e0:	b9c0      	cbnz	r0, 800f314 <_dtoa_r+0x68c>
 800f2e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	f7f1 fbf5 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2ee:	b110      	cbz	r0, 800f2f6 <_dtoa_r+0x66e>
 800f2f0:	f018 0f01 	tst.w	r8, #1
 800f2f4:	d10e      	bne.n	800f314 <_dtoa_r+0x68c>
 800f2f6:	9902      	ldr	r1, [sp, #8]
 800f2f8:	4648      	mov	r0, r9
 800f2fa:	f7fd fc11 	bl	800cb20 <_Bfree>
 800f2fe:	2300      	movs	r3, #0
 800f300:	7033      	strb	r3, [r6, #0]
 800f302:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f304:	3701      	adds	r7, #1
 800f306:	601f      	str	r7, [r3, #0]
 800f308:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	f43f acf3 	beq.w	800ecf6 <_dtoa_r+0x6e>
 800f310:	601e      	str	r6, [r3, #0]
 800f312:	e4f0      	b.n	800ecf6 <_dtoa_r+0x6e>
 800f314:	46b8      	mov	r8, r7
 800f316:	4633      	mov	r3, r6
 800f318:	461e      	mov	r6, r3
 800f31a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f31e:	2a39      	cmp	r2, #57	@ 0x39
 800f320:	d106      	bne.n	800f330 <_dtoa_r+0x6a8>
 800f322:	459a      	cmp	sl, r3
 800f324:	d1f8      	bne.n	800f318 <_dtoa_r+0x690>
 800f326:	2230      	movs	r2, #48	@ 0x30
 800f328:	f108 0801 	add.w	r8, r8, #1
 800f32c:	f88a 2000 	strb.w	r2, [sl]
 800f330:	781a      	ldrb	r2, [r3, #0]
 800f332:	3201      	adds	r2, #1
 800f334:	701a      	strb	r2, [r3, #0]
 800f336:	e7a0      	b.n	800f27a <_dtoa_r+0x5f2>
 800f338:	4b6f      	ldr	r3, [pc, #444]	@ (800f4f8 <_dtoa_r+0x870>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	f7f1 f964 	bl	8000608 <__aeabi_dmul>
 800f340:	2200      	movs	r2, #0
 800f342:	2300      	movs	r3, #0
 800f344:	4604      	mov	r4, r0
 800f346:	460d      	mov	r5, r1
 800f348:	f7f1 fbc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d09f      	beq.n	800f290 <_dtoa_r+0x608>
 800f350:	e7d1      	b.n	800f2f6 <_dtoa_r+0x66e>
 800f352:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f354:	2a00      	cmp	r2, #0
 800f356:	f000 80ea 	beq.w	800f52e <_dtoa_r+0x8a6>
 800f35a:	9a07      	ldr	r2, [sp, #28]
 800f35c:	2a01      	cmp	r2, #1
 800f35e:	f300 80cd 	bgt.w	800f4fc <_dtoa_r+0x874>
 800f362:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f364:	2a00      	cmp	r2, #0
 800f366:	f000 80c1 	beq.w	800f4ec <_dtoa_r+0x864>
 800f36a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f36e:	9c08      	ldr	r4, [sp, #32]
 800f370:	9e00      	ldr	r6, [sp, #0]
 800f372:	9a00      	ldr	r2, [sp, #0]
 800f374:	441a      	add	r2, r3
 800f376:	9200      	str	r2, [sp, #0]
 800f378:	9a06      	ldr	r2, [sp, #24]
 800f37a:	2101      	movs	r1, #1
 800f37c:	441a      	add	r2, r3
 800f37e:	4648      	mov	r0, r9
 800f380:	9206      	str	r2, [sp, #24]
 800f382:	f7fd fcb3 	bl	800ccec <__i2b>
 800f386:	4605      	mov	r5, r0
 800f388:	b166      	cbz	r6, 800f3a4 <_dtoa_r+0x71c>
 800f38a:	9b06      	ldr	r3, [sp, #24]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	dd09      	ble.n	800f3a4 <_dtoa_r+0x71c>
 800f390:	42b3      	cmp	r3, r6
 800f392:	9a00      	ldr	r2, [sp, #0]
 800f394:	bfa8      	it	ge
 800f396:	4633      	movge	r3, r6
 800f398:	1ad2      	subs	r2, r2, r3
 800f39a:	9200      	str	r2, [sp, #0]
 800f39c:	9a06      	ldr	r2, [sp, #24]
 800f39e:	1af6      	subs	r6, r6, r3
 800f3a0:	1ad3      	subs	r3, r2, r3
 800f3a2:	9306      	str	r3, [sp, #24]
 800f3a4:	9b08      	ldr	r3, [sp, #32]
 800f3a6:	b30b      	cbz	r3, 800f3ec <_dtoa_r+0x764>
 800f3a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f000 80c6 	beq.w	800f53c <_dtoa_r+0x8b4>
 800f3b0:	2c00      	cmp	r4, #0
 800f3b2:	f000 80c0 	beq.w	800f536 <_dtoa_r+0x8ae>
 800f3b6:	4629      	mov	r1, r5
 800f3b8:	4622      	mov	r2, r4
 800f3ba:	4648      	mov	r0, r9
 800f3bc:	f7fd fd4e 	bl	800ce5c <__pow5mult>
 800f3c0:	9a02      	ldr	r2, [sp, #8]
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	4605      	mov	r5, r0
 800f3c6:	4648      	mov	r0, r9
 800f3c8:	f7fd fca6 	bl	800cd18 <__multiply>
 800f3cc:	9902      	ldr	r1, [sp, #8]
 800f3ce:	4680      	mov	r8, r0
 800f3d0:	4648      	mov	r0, r9
 800f3d2:	f7fd fba5 	bl	800cb20 <_Bfree>
 800f3d6:	9b08      	ldr	r3, [sp, #32]
 800f3d8:	1b1b      	subs	r3, r3, r4
 800f3da:	9308      	str	r3, [sp, #32]
 800f3dc:	f000 80b1 	beq.w	800f542 <_dtoa_r+0x8ba>
 800f3e0:	9a08      	ldr	r2, [sp, #32]
 800f3e2:	4641      	mov	r1, r8
 800f3e4:	4648      	mov	r0, r9
 800f3e6:	f7fd fd39 	bl	800ce5c <__pow5mult>
 800f3ea:	9002      	str	r0, [sp, #8]
 800f3ec:	2101      	movs	r1, #1
 800f3ee:	4648      	mov	r0, r9
 800f3f0:	f7fd fc7c 	bl	800ccec <__i2b>
 800f3f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f3f6:	4604      	mov	r4, r0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f000 81d5 	beq.w	800f7a8 <_dtoa_r+0xb20>
 800f3fe:	461a      	mov	r2, r3
 800f400:	4601      	mov	r1, r0
 800f402:	4648      	mov	r0, r9
 800f404:	f7fd fd2a 	bl	800ce5c <__pow5mult>
 800f408:	9b07      	ldr	r3, [sp, #28]
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	4604      	mov	r4, r0
 800f40e:	f300 809f 	bgt.w	800f550 <_dtoa_r+0x8c8>
 800f412:	9b04      	ldr	r3, [sp, #16]
 800f414:	2b00      	cmp	r3, #0
 800f416:	f040 8097 	bne.w	800f548 <_dtoa_r+0x8c0>
 800f41a:	9b05      	ldr	r3, [sp, #20]
 800f41c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f420:	2b00      	cmp	r3, #0
 800f422:	f040 8093 	bne.w	800f54c <_dtoa_r+0x8c4>
 800f426:	9b05      	ldr	r3, [sp, #20]
 800f428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f42c:	0d1b      	lsrs	r3, r3, #20
 800f42e:	051b      	lsls	r3, r3, #20
 800f430:	b133      	cbz	r3, 800f440 <_dtoa_r+0x7b8>
 800f432:	9b00      	ldr	r3, [sp, #0]
 800f434:	3301      	adds	r3, #1
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	9b06      	ldr	r3, [sp, #24]
 800f43a:	3301      	adds	r3, #1
 800f43c:	9306      	str	r3, [sp, #24]
 800f43e:	2301      	movs	r3, #1
 800f440:	9308      	str	r3, [sp, #32]
 800f442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f444:	2b00      	cmp	r3, #0
 800f446:	f000 81b5 	beq.w	800f7b4 <_dtoa_r+0xb2c>
 800f44a:	6923      	ldr	r3, [r4, #16]
 800f44c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f450:	6918      	ldr	r0, [r3, #16]
 800f452:	f7fd fbff 	bl	800cc54 <__hi0bits>
 800f456:	f1c0 0020 	rsb	r0, r0, #32
 800f45a:	9b06      	ldr	r3, [sp, #24]
 800f45c:	4418      	add	r0, r3
 800f45e:	f010 001f 	ands.w	r0, r0, #31
 800f462:	f000 8082 	beq.w	800f56a <_dtoa_r+0x8e2>
 800f466:	f1c0 0320 	rsb	r3, r0, #32
 800f46a:	2b04      	cmp	r3, #4
 800f46c:	dd73      	ble.n	800f556 <_dtoa_r+0x8ce>
 800f46e:	9b00      	ldr	r3, [sp, #0]
 800f470:	f1c0 001c 	rsb	r0, r0, #28
 800f474:	4403      	add	r3, r0
 800f476:	9300      	str	r3, [sp, #0]
 800f478:	9b06      	ldr	r3, [sp, #24]
 800f47a:	4403      	add	r3, r0
 800f47c:	4406      	add	r6, r0
 800f47e:	9306      	str	r3, [sp, #24]
 800f480:	9b00      	ldr	r3, [sp, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	dd05      	ble.n	800f492 <_dtoa_r+0x80a>
 800f486:	9902      	ldr	r1, [sp, #8]
 800f488:	461a      	mov	r2, r3
 800f48a:	4648      	mov	r0, r9
 800f48c:	f7fd fd26 	bl	800cedc <__lshift>
 800f490:	9002      	str	r0, [sp, #8]
 800f492:	9b06      	ldr	r3, [sp, #24]
 800f494:	2b00      	cmp	r3, #0
 800f496:	dd05      	ble.n	800f4a4 <_dtoa_r+0x81c>
 800f498:	4621      	mov	r1, r4
 800f49a:	461a      	mov	r2, r3
 800f49c:	4648      	mov	r0, r9
 800f49e:	f7fd fd1d 	bl	800cedc <__lshift>
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d061      	beq.n	800f56e <_dtoa_r+0x8e6>
 800f4aa:	9802      	ldr	r0, [sp, #8]
 800f4ac:	4621      	mov	r1, r4
 800f4ae:	f7fd fd81 	bl	800cfb4 <__mcmp>
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	da5b      	bge.n	800f56e <_dtoa_r+0x8e6>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	9902      	ldr	r1, [sp, #8]
 800f4ba:	220a      	movs	r2, #10
 800f4bc:	4648      	mov	r0, r9
 800f4be:	f7fd fb39 	bl	800cb34 <__multadd>
 800f4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4c4:	9002      	str	r0, [sp, #8]
 800f4c6:	f107 38ff 	add.w	r8, r7, #4294967295
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	f000 8174 	beq.w	800f7b8 <_dtoa_r+0xb30>
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	220a      	movs	r2, #10
 800f4d6:	4648      	mov	r0, r9
 800f4d8:	f7fd fb2c 	bl	800cb34 <__multadd>
 800f4dc:	f1bb 0f00 	cmp.w	fp, #0
 800f4e0:	4605      	mov	r5, r0
 800f4e2:	dc6f      	bgt.n	800f5c4 <_dtoa_r+0x93c>
 800f4e4:	9b07      	ldr	r3, [sp, #28]
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	dc49      	bgt.n	800f57e <_dtoa_r+0x8f6>
 800f4ea:	e06b      	b.n	800f5c4 <_dtoa_r+0x93c>
 800f4ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f4ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f4f2:	e73c      	b.n	800f36e <_dtoa_r+0x6e6>
 800f4f4:	3fe00000 	.word	0x3fe00000
 800f4f8:	40240000 	.word	0x40240000
 800f4fc:	9b03      	ldr	r3, [sp, #12]
 800f4fe:	1e5c      	subs	r4, r3, #1
 800f500:	9b08      	ldr	r3, [sp, #32]
 800f502:	42a3      	cmp	r3, r4
 800f504:	db09      	blt.n	800f51a <_dtoa_r+0x892>
 800f506:	1b1c      	subs	r4, r3, r4
 800f508:	9b03      	ldr	r3, [sp, #12]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f6bf af30 	bge.w	800f370 <_dtoa_r+0x6e8>
 800f510:	9b00      	ldr	r3, [sp, #0]
 800f512:	9a03      	ldr	r2, [sp, #12]
 800f514:	1a9e      	subs	r6, r3, r2
 800f516:	2300      	movs	r3, #0
 800f518:	e72b      	b.n	800f372 <_dtoa_r+0x6ea>
 800f51a:	9b08      	ldr	r3, [sp, #32]
 800f51c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f51e:	9408      	str	r4, [sp, #32]
 800f520:	1ae3      	subs	r3, r4, r3
 800f522:	441a      	add	r2, r3
 800f524:	9e00      	ldr	r6, [sp, #0]
 800f526:	9b03      	ldr	r3, [sp, #12]
 800f528:	920d      	str	r2, [sp, #52]	@ 0x34
 800f52a:	2400      	movs	r4, #0
 800f52c:	e721      	b.n	800f372 <_dtoa_r+0x6ea>
 800f52e:	9c08      	ldr	r4, [sp, #32]
 800f530:	9e00      	ldr	r6, [sp, #0]
 800f532:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f534:	e728      	b.n	800f388 <_dtoa_r+0x700>
 800f536:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f53a:	e751      	b.n	800f3e0 <_dtoa_r+0x758>
 800f53c:	9a08      	ldr	r2, [sp, #32]
 800f53e:	9902      	ldr	r1, [sp, #8]
 800f540:	e750      	b.n	800f3e4 <_dtoa_r+0x75c>
 800f542:	f8cd 8008 	str.w	r8, [sp, #8]
 800f546:	e751      	b.n	800f3ec <_dtoa_r+0x764>
 800f548:	2300      	movs	r3, #0
 800f54a:	e779      	b.n	800f440 <_dtoa_r+0x7b8>
 800f54c:	9b04      	ldr	r3, [sp, #16]
 800f54e:	e777      	b.n	800f440 <_dtoa_r+0x7b8>
 800f550:	2300      	movs	r3, #0
 800f552:	9308      	str	r3, [sp, #32]
 800f554:	e779      	b.n	800f44a <_dtoa_r+0x7c2>
 800f556:	d093      	beq.n	800f480 <_dtoa_r+0x7f8>
 800f558:	9a00      	ldr	r2, [sp, #0]
 800f55a:	331c      	adds	r3, #28
 800f55c:	441a      	add	r2, r3
 800f55e:	9200      	str	r2, [sp, #0]
 800f560:	9a06      	ldr	r2, [sp, #24]
 800f562:	441a      	add	r2, r3
 800f564:	441e      	add	r6, r3
 800f566:	9206      	str	r2, [sp, #24]
 800f568:	e78a      	b.n	800f480 <_dtoa_r+0x7f8>
 800f56a:	4603      	mov	r3, r0
 800f56c:	e7f4      	b.n	800f558 <_dtoa_r+0x8d0>
 800f56e:	9b03      	ldr	r3, [sp, #12]
 800f570:	2b00      	cmp	r3, #0
 800f572:	46b8      	mov	r8, r7
 800f574:	dc20      	bgt.n	800f5b8 <_dtoa_r+0x930>
 800f576:	469b      	mov	fp, r3
 800f578:	9b07      	ldr	r3, [sp, #28]
 800f57a:	2b02      	cmp	r3, #2
 800f57c:	dd1e      	ble.n	800f5bc <_dtoa_r+0x934>
 800f57e:	f1bb 0f00 	cmp.w	fp, #0
 800f582:	f47f adb2 	bne.w	800f0ea <_dtoa_r+0x462>
 800f586:	4621      	mov	r1, r4
 800f588:	465b      	mov	r3, fp
 800f58a:	2205      	movs	r2, #5
 800f58c:	4648      	mov	r0, r9
 800f58e:	f7fd fad1 	bl	800cb34 <__multadd>
 800f592:	4601      	mov	r1, r0
 800f594:	4604      	mov	r4, r0
 800f596:	9802      	ldr	r0, [sp, #8]
 800f598:	f7fd fd0c 	bl	800cfb4 <__mcmp>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	f77f ada4 	ble.w	800f0ea <_dtoa_r+0x462>
 800f5a2:	4656      	mov	r6, sl
 800f5a4:	2331      	movs	r3, #49	@ 0x31
 800f5a6:	f806 3b01 	strb.w	r3, [r6], #1
 800f5aa:	f108 0801 	add.w	r8, r8, #1
 800f5ae:	e5a0      	b.n	800f0f2 <_dtoa_r+0x46a>
 800f5b0:	9c03      	ldr	r4, [sp, #12]
 800f5b2:	46b8      	mov	r8, r7
 800f5b4:	4625      	mov	r5, r4
 800f5b6:	e7f4      	b.n	800f5a2 <_dtoa_r+0x91a>
 800f5b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	f000 80fe 	beq.w	800f7c0 <_dtoa_r+0xb38>
 800f5c4:	2e00      	cmp	r6, #0
 800f5c6:	dd05      	ble.n	800f5d4 <_dtoa_r+0x94c>
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	4632      	mov	r2, r6
 800f5cc:	4648      	mov	r0, r9
 800f5ce:	f7fd fc85 	bl	800cedc <__lshift>
 800f5d2:	4605      	mov	r5, r0
 800f5d4:	9b08      	ldr	r3, [sp, #32]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d05b      	beq.n	800f692 <_dtoa_r+0xa0a>
 800f5da:	6869      	ldr	r1, [r5, #4]
 800f5dc:	4648      	mov	r0, r9
 800f5de:	f7fd fa7a 	bl	800cad6 <_Balloc>
 800f5e2:	4606      	mov	r6, r0
 800f5e4:	b920      	cbnz	r0, 800f5f0 <_dtoa_r+0x968>
 800f5e6:	4b81      	ldr	r3, [pc, #516]	@ (800f7ec <_dtoa_r+0xb64>)
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f5ee:	e470      	b.n	800eed2 <_dtoa_r+0x24a>
 800f5f0:	692a      	ldr	r2, [r5, #16]
 800f5f2:	3202      	adds	r2, #2
 800f5f4:	0092      	lsls	r2, r2, #2
 800f5f6:	f105 010c 	add.w	r1, r5, #12
 800f5fa:	300c      	adds	r0, #12
 800f5fc:	f7fc fddc 	bl	800c1b8 <memcpy>
 800f600:	2201      	movs	r2, #1
 800f602:	4631      	mov	r1, r6
 800f604:	4648      	mov	r0, r9
 800f606:	f7fd fc69 	bl	800cedc <__lshift>
 800f60a:	f10a 0301 	add.w	r3, sl, #1
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	eb0a 030b 	add.w	r3, sl, fp
 800f614:	9308      	str	r3, [sp, #32]
 800f616:	9b04      	ldr	r3, [sp, #16]
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	462f      	mov	r7, r5
 800f61e:	9306      	str	r3, [sp, #24]
 800f620:	4605      	mov	r5, r0
 800f622:	9b00      	ldr	r3, [sp, #0]
 800f624:	9802      	ldr	r0, [sp, #8]
 800f626:	4621      	mov	r1, r4
 800f628:	f103 3bff 	add.w	fp, r3, #4294967295
 800f62c:	f7ff faa1 	bl	800eb72 <quorem>
 800f630:	4603      	mov	r3, r0
 800f632:	3330      	adds	r3, #48	@ 0x30
 800f634:	9003      	str	r0, [sp, #12]
 800f636:	4639      	mov	r1, r7
 800f638:	9802      	ldr	r0, [sp, #8]
 800f63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f63c:	f7fd fcba 	bl	800cfb4 <__mcmp>
 800f640:	462a      	mov	r2, r5
 800f642:	9004      	str	r0, [sp, #16]
 800f644:	4621      	mov	r1, r4
 800f646:	4648      	mov	r0, r9
 800f648:	f7fd fcd0 	bl	800cfec <__mdiff>
 800f64c:	68c2      	ldr	r2, [r0, #12]
 800f64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f650:	4606      	mov	r6, r0
 800f652:	bb02      	cbnz	r2, 800f696 <_dtoa_r+0xa0e>
 800f654:	4601      	mov	r1, r0
 800f656:	9802      	ldr	r0, [sp, #8]
 800f658:	f7fd fcac 	bl	800cfb4 <__mcmp>
 800f65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f65e:	4602      	mov	r2, r0
 800f660:	4631      	mov	r1, r6
 800f662:	4648      	mov	r0, r9
 800f664:	920c      	str	r2, [sp, #48]	@ 0x30
 800f666:	9309      	str	r3, [sp, #36]	@ 0x24
 800f668:	f7fd fa5a 	bl	800cb20 <_Bfree>
 800f66c:	9b07      	ldr	r3, [sp, #28]
 800f66e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f670:	9e00      	ldr	r6, [sp, #0]
 800f672:	ea42 0103 	orr.w	r1, r2, r3
 800f676:	9b06      	ldr	r3, [sp, #24]
 800f678:	4319      	orrs	r1, r3
 800f67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f67c:	d10d      	bne.n	800f69a <_dtoa_r+0xa12>
 800f67e:	2b39      	cmp	r3, #57	@ 0x39
 800f680:	d027      	beq.n	800f6d2 <_dtoa_r+0xa4a>
 800f682:	9a04      	ldr	r2, [sp, #16]
 800f684:	2a00      	cmp	r2, #0
 800f686:	dd01      	ble.n	800f68c <_dtoa_r+0xa04>
 800f688:	9b03      	ldr	r3, [sp, #12]
 800f68a:	3331      	adds	r3, #49	@ 0x31
 800f68c:	f88b 3000 	strb.w	r3, [fp]
 800f690:	e530      	b.n	800f0f4 <_dtoa_r+0x46c>
 800f692:	4628      	mov	r0, r5
 800f694:	e7b9      	b.n	800f60a <_dtoa_r+0x982>
 800f696:	2201      	movs	r2, #1
 800f698:	e7e2      	b.n	800f660 <_dtoa_r+0x9d8>
 800f69a:	9904      	ldr	r1, [sp, #16]
 800f69c:	2900      	cmp	r1, #0
 800f69e:	db04      	blt.n	800f6aa <_dtoa_r+0xa22>
 800f6a0:	9807      	ldr	r0, [sp, #28]
 800f6a2:	4301      	orrs	r1, r0
 800f6a4:	9806      	ldr	r0, [sp, #24]
 800f6a6:	4301      	orrs	r1, r0
 800f6a8:	d120      	bne.n	800f6ec <_dtoa_r+0xa64>
 800f6aa:	2a00      	cmp	r2, #0
 800f6ac:	ddee      	ble.n	800f68c <_dtoa_r+0xa04>
 800f6ae:	9902      	ldr	r1, [sp, #8]
 800f6b0:	9300      	str	r3, [sp, #0]
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	4648      	mov	r0, r9
 800f6b6:	f7fd fc11 	bl	800cedc <__lshift>
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	9002      	str	r0, [sp, #8]
 800f6be:	f7fd fc79 	bl	800cfb4 <__mcmp>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	9b00      	ldr	r3, [sp, #0]
 800f6c6:	dc02      	bgt.n	800f6ce <_dtoa_r+0xa46>
 800f6c8:	d1e0      	bne.n	800f68c <_dtoa_r+0xa04>
 800f6ca:	07da      	lsls	r2, r3, #31
 800f6cc:	d5de      	bpl.n	800f68c <_dtoa_r+0xa04>
 800f6ce:	2b39      	cmp	r3, #57	@ 0x39
 800f6d0:	d1da      	bne.n	800f688 <_dtoa_r+0xa00>
 800f6d2:	2339      	movs	r3, #57	@ 0x39
 800f6d4:	f88b 3000 	strb.w	r3, [fp]
 800f6d8:	4633      	mov	r3, r6
 800f6da:	461e      	mov	r6, r3
 800f6dc:	3b01      	subs	r3, #1
 800f6de:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f6e2:	2a39      	cmp	r2, #57	@ 0x39
 800f6e4:	d04e      	beq.n	800f784 <_dtoa_r+0xafc>
 800f6e6:	3201      	adds	r2, #1
 800f6e8:	701a      	strb	r2, [r3, #0]
 800f6ea:	e503      	b.n	800f0f4 <_dtoa_r+0x46c>
 800f6ec:	2a00      	cmp	r2, #0
 800f6ee:	dd03      	ble.n	800f6f8 <_dtoa_r+0xa70>
 800f6f0:	2b39      	cmp	r3, #57	@ 0x39
 800f6f2:	d0ee      	beq.n	800f6d2 <_dtoa_r+0xa4a>
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	e7c9      	b.n	800f68c <_dtoa_r+0xa04>
 800f6f8:	9a00      	ldr	r2, [sp, #0]
 800f6fa:	9908      	ldr	r1, [sp, #32]
 800f6fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f700:	428a      	cmp	r2, r1
 800f702:	d028      	beq.n	800f756 <_dtoa_r+0xace>
 800f704:	9902      	ldr	r1, [sp, #8]
 800f706:	2300      	movs	r3, #0
 800f708:	220a      	movs	r2, #10
 800f70a:	4648      	mov	r0, r9
 800f70c:	f7fd fa12 	bl	800cb34 <__multadd>
 800f710:	42af      	cmp	r7, r5
 800f712:	9002      	str	r0, [sp, #8]
 800f714:	f04f 0300 	mov.w	r3, #0
 800f718:	f04f 020a 	mov.w	r2, #10
 800f71c:	4639      	mov	r1, r7
 800f71e:	4648      	mov	r0, r9
 800f720:	d107      	bne.n	800f732 <_dtoa_r+0xaaa>
 800f722:	f7fd fa07 	bl	800cb34 <__multadd>
 800f726:	4607      	mov	r7, r0
 800f728:	4605      	mov	r5, r0
 800f72a:	9b00      	ldr	r3, [sp, #0]
 800f72c:	3301      	adds	r3, #1
 800f72e:	9300      	str	r3, [sp, #0]
 800f730:	e777      	b.n	800f622 <_dtoa_r+0x99a>
 800f732:	f7fd f9ff 	bl	800cb34 <__multadd>
 800f736:	4629      	mov	r1, r5
 800f738:	4607      	mov	r7, r0
 800f73a:	2300      	movs	r3, #0
 800f73c:	220a      	movs	r2, #10
 800f73e:	4648      	mov	r0, r9
 800f740:	f7fd f9f8 	bl	800cb34 <__multadd>
 800f744:	4605      	mov	r5, r0
 800f746:	e7f0      	b.n	800f72a <_dtoa_r+0xaa2>
 800f748:	f1bb 0f00 	cmp.w	fp, #0
 800f74c:	bfcc      	ite	gt
 800f74e:	465e      	movgt	r6, fp
 800f750:	2601      	movle	r6, #1
 800f752:	4456      	add	r6, sl
 800f754:	2700      	movs	r7, #0
 800f756:	9902      	ldr	r1, [sp, #8]
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	2201      	movs	r2, #1
 800f75c:	4648      	mov	r0, r9
 800f75e:	f7fd fbbd 	bl	800cedc <__lshift>
 800f762:	4621      	mov	r1, r4
 800f764:	9002      	str	r0, [sp, #8]
 800f766:	f7fd fc25 	bl	800cfb4 <__mcmp>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	dcb4      	bgt.n	800f6d8 <_dtoa_r+0xa50>
 800f76e:	d102      	bne.n	800f776 <_dtoa_r+0xaee>
 800f770:	9b00      	ldr	r3, [sp, #0]
 800f772:	07db      	lsls	r3, r3, #31
 800f774:	d4b0      	bmi.n	800f6d8 <_dtoa_r+0xa50>
 800f776:	4633      	mov	r3, r6
 800f778:	461e      	mov	r6, r3
 800f77a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f77e:	2a30      	cmp	r2, #48	@ 0x30
 800f780:	d0fa      	beq.n	800f778 <_dtoa_r+0xaf0>
 800f782:	e4b7      	b.n	800f0f4 <_dtoa_r+0x46c>
 800f784:	459a      	cmp	sl, r3
 800f786:	d1a8      	bne.n	800f6da <_dtoa_r+0xa52>
 800f788:	2331      	movs	r3, #49	@ 0x31
 800f78a:	f108 0801 	add.w	r8, r8, #1
 800f78e:	f88a 3000 	strb.w	r3, [sl]
 800f792:	e4af      	b.n	800f0f4 <_dtoa_r+0x46c>
 800f794:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f796:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f7f0 <_dtoa_r+0xb68>
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	f43f aaab 	beq.w	800ecf6 <_dtoa_r+0x6e>
 800f7a0:	f10a 0308 	add.w	r3, sl, #8
 800f7a4:	f7ff baa5 	b.w	800ecf2 <_dtoa_r+0x6a>
 800f7a8:	9b07      	ldr	r3, [sp, #28]
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	f77f ae31 	ble.w	800f412 <_dtoa_r+0x78a>
 800f7b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f7b2:	9308      	str	r3, [sp, #32]
 800f7b4:	2001      	movs	r0, #1
 800f7b6:	e650      	b.n	800f45a <_dtoa_r+0x7d2>
 800f7b8:	f1bb 0f00 	cmp.w	fp, #0
 800f7bc:	f77f aedc 	ble.w	800f578 <_dtoa_r+0x8f0>
 800f7c0:	4656      	mov	r6, sl
 800f7c2:	9802      	ldr	r0, [sp, #8]
 800f7c4:	4621      	mov	r1, r4
 800f7c6:	f7ff f9d4 	bl	800eb72 <quorem>
 800f7ca:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f7ce:	f806 3b01 	strb.w	r3, [r6], #1
 800f7d2:	eba6 020a 	sub.w	r2, r6, sl
 800f7d6:	4593      	cmp	fp, r2
 800f7d8:	ddb6      	ble.n	800f748 <_dtoa_r+0xac0>
 800f7da:	9902      	ldr	r1, [sp, #8]
 800f7dc:	2300      	movs	r3, #0
 800f7de:	220a      	movs	r2, #10
 800f7e0:	4648      	mov	r0, r9
 800f7e2:	f7fd f9a7 	bl	800cb34 <__multadd>
 800f7e6:	9002      	str	r0, [sp, #8]
 800f7e8:	e7eb      	b.n	800f7c2 <_dtoa_r+0xb3a>
 800f7ea:	bf00      	nop
 800f7ec:	08011a82 	.word	0x08011a82
 800f7f0:	08011bbc 	.word	0x08011bbc

0800f7f4 <fiprintf>:
 800f7f4:	b40e      	push	{r1, r2, r3}
 800f7f6:	b503      	push	{r0, r1, lr}
 800f7f8:	4601      	mov	r1, r0
 800f7fa:	ab03      	add	r3, sp, #12
 800f7fc:	4805      	ldr	r0, [pc, #20]	@ (800f814 <fiprintf+0x20>)
 800f7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800f802:	6800      	ldr	r0, [r0, #0]
 800f804:	9301      	str	r3, [sp, #4]
 800f806:	f000 f807 	bl	800f818 <_vfiprintf_r>
 800f80a:	b002      	add	sp, #8
 800f80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f810:	b003      	add	sp, #12
 800f812:	4770      	bx	lr
 800f814:	200005bc 	.word	0x200005bc

0800f818 <_vfiprintf_r>:
 800f818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81c:	b0bb      	sub	sp, #236	@ 0xec
 800f81e:	460f      	mov	r7, r1
 800f820:	4693      	mov	fp, r2
 800f822:	461c      	mov	r4, r3
 800f824:	461d      	mov	r5, r3
 800f826:	9000      	str	r0, [sp, #0]
 800f828:	b118      	cbz	r0, 800f832 <_vfiprintf_r+0x1a>
 800f82a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f82c:	b90b      	cbnz	r3, 800f832 <_vfiprintf_r+0x1a>
 800f82e:	f7fc fb0f 	bl	800be50 <__sinit>
 800f832:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f834:	07da      	lsls	r2, r3, #31
 800f836:	d405      	bmi.n	800f844 <_vfiprintf_r+0x2c>
 800f838:	89bb      	ldrh	r3, [r7, #12]
 800f83a:	059b      	lsls	r3, r3, #22
 800f83c:	d402      	bmi.n	800f844 <_vfiprintf_r+0x2c>
 800f83e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f840:	f7fc fca4 	bl	800c18c <__retarget_lock_acquire_recursive>
 800f844:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f848:	049e      	lsls	r6, r3, #18
 800f84a:	d406      	bmi.n	800f85a <_vfiprintf_r+0x42>
 800f84c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f84e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f852:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f856:	81bb      	strh	r3, [r7, #12]
 800f858:	667a      	str	r2, [r7, #100]	@ 0x64
 800f85a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f85c:	0498      	lsls	r0, r3, #18
 800f85e:	d508      	bpl.n	800f872 <_vfiprintf_r+0x5a>
 800f860:	07d9      	lsls	r1, r3, #31
 800f862:	d512      	bpl.n	800f88a <_vfiprintf_r+0x72>
 800f864:	f04f 33ff 	mov.w	r3, #4294967295
 800f868:	9303      	str	r3, [sp, #12]
 800f86a:	9803      	ldr	r0, [sp, #12]
 800f86c:	b03b      	add	sp, #236	@ 0xec
 800f86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f872:	89bb      	ldrh	r3, [r7, #12]
 800f874:	071a      	lsls	r2, r3, #28
 800f876:	d501      	bpl.n	800f87c <_vfiprintf_r+0x64>
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	b96b      	cbnz	r3, 800f898 <_vfiprintf_r+0x80>
 800f87c:	9800      	ldr	r0, [sp, #0]
 800f87e:	4639      	mov	r1, r7
 800f880:	f000 fe46 	bl	8010510 <__swsetup_r>
 800f884:	b140      	cbz	r0, 800f898 <_vfiprintf_r+0x80>
 800f886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f888:	e7ea      	b.n	800f860 <_vfiprintf_r+0x48>
 800f88a:	89bb      	ldrh	r3, [r7, #12]
 800f88c:	059b      	lsls	r3, r3, #22
 800f88e:	d4e9      	bmi.n	800f864 <_vfiprintf_r+0x4c>
 800f890:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f892:	f7fc fc7c 	bl	800c18e <__retarget_lock_release_recursive>
 800f896:	e7e5      	b.n	800f864 <_vfiprintf_r+0x4c>
 800f898:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f89c:	f003 021a 	and.w	r2, r3, #26
 800f8a0:	2a0a      	cmp	r2, #10
 800f8a2:	d114      	bne.n	800f8ce <_vfiprintf_r+0xb6>
 800f8a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f8a8:	2a00      	cmp	r2, #0
 800f8aa:	db10      	blt.n	800f8ce <_vfiprintf_r+0xb6>
 800f8ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f8ae:	07d6      	lsls	r6, r2, #31
 800f8b0:	d404      	bmi.n	800f8bc <_vfiprintf_r+0xa4>
 800f8b2:	059d      	lsls	r5, r3, #22
 800f8b4:	d402      	bmi.n	800f8bc <_vfiprintf_r+0xa4>
 800f8b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f8b8:	f7fc fc69 	bl	800c18e <__retarget_lock_release_recursive>
 800f8bc:	9800      	ldr	r0, [sp, #0]
 800f8be:	4623      	mov	r3, r4
 800f8c0:	465a      	mov	r2, fp
 800f8c2:	4639      	mov	r1, r7
 800f8c4:	b03b      	add	sp, #236	@ 0xec
 800f8c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ca:	f000 bc2d 	b.w	8010128 <__sbprintf>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800f8d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f8d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f8dc:	ae11      	add	r6, sp, #68	@ 0x44
 800f8de:	960e      	str	r6, [sp, #56]	@ 0x38
 800f8e0:	9303      	str	r3, [sp, #12]
 800f8e2:	465b      	mov	r3, fp
 800f8e4:	461c      	mov	r4, r3
 800f8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8ea:	b10a      	cbz	r2, 800f8f0 <_vfiprintf_r+0xd8>
 800f8ec:	2a25      	cmp	r2, #37	@ 0x25
 800f8ee:	d1f9      	bne.n	800f8e4 <_vfiprintf_r+0xcc>
 800f8f0:	ebb4 080b 	subs.w	r8, r4, fp
 800f8f4:	d00d      	beq.n	800f912 <_vfiprintf_r+0xfa>
 800f8f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f8f8:	4443      	add	r3, r8
 800f8fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800f8fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8fe:	3301      	adds	r3, #1
 800f900:	2b07      	cmp	r3, #7
 800f902:	e9c6 b800 	strd	fp, r8, [r6]
 800f906:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f908:	dc75      	bgt.n	800f9f6 <_vfiprintf_r+0x1de>
 800f90a:	3608      	adds	r6, #8
 800f90c:	9b03      	ldr	r3, [sp, #12]
 800f90e:	4443      	add	r3, r8
 800f910:	9303      	str	r3, [sp, #12]
 800f912:	7823      	ldrb	r3, [r4, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	f000 83c9 	beq.w	80100ac <_vfiprintf_r+0x894>
 800f91a:	2300      	movs	r3, #0
 800f91c:	f04f 32ff 	mov.w	r2, #4294967295
 800f920:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800f924:	3401      	adds	r4, #1
 800f926:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800f92a:	469a      	mov	sl, r3
 800f92c:	46a3      	mov	fp, r4
 800f92e:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800f932:	f1a3 0220 	sub.w	r2, r3, #32
 800f936:	2a5a      	cmp	r2, #90	@ 0x5a
 800f938:	f200 8312 	bhi.w	800ff60 <_vfiprintf_r+0x748>
 800f93c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f940:	0310009a 	.word	0x0310009a
 800f944:	00a20310 	.word	0x00a20310
 800f948:	03100310 	.word	0x03100310
 800f94c:	00820310 	.word	0x00820310
 800f950:	03100310 	.word	0x03100310
 800f954:	00af00a5 	.word	0x00af00a5
 800f958:	00ac0310 	.word	0x00ac0310
 800f95c:	031000b1 	.word	0x031000b1
 800f960:	00d000cd 	.word	0x00d000cd
 800f964:	00d000d0 	.word	0x00d000d0
 800f968:	00d000d0 	.word	0x00d000d0
 800f96c:	00d000d0 	.word	0x00d000d0
 800f970:	00d000d0 	.word	0x00d000d0
 800f974:	03100310 	.word	0x03100310
 800f978:	03100310 	.word	0x03100310
 800f97c:	03100310 	.word	0x03100310
 800f980:	03100310 	.word	0x03100310
 800f984:	00f60310 	.word	0x00f60310
 800f988:	03100103 	.word	0x03100103
 800f98c:	03100310 	.word	0x03100310
 800f990:	03100310 	.word	0x03100310
 800f994:	03100310 	.word	0x03100310
 800f998:	03100310 	.word	0x03100310
 800f99c:	01510310 	.word	0x01510310
 800f9a0:	03100310 	.word	0x03100310
 800f9a4:	01980310 	.word	0x01980310
 800f9a8:	02770310 	.word	0x02770310
 800f9ac:	03100310 	.word	0x03100310
 800f9b0:	03100297 	.word	0x03100297
 800f9b4:	03100310 	.word	0x03100310
 800f9b8:	03100310 	.word	0x03100310
 800f9bc:	03100310 	.word	0x03100310
 800f9c0:	03100310 	.word	0x03100310
 800f9c4:	00f60310 	.word	0x00f60310
 800f9c8:	03100105 	.word	0x03100105
 800f9cc:	03100310 	.word	0x03100310
 800f9d0:	010500df 	.word	0x010500df
 800f9d4:	031000f0 	.word	0x031000f0
 800f9d8:	031000ea 	.word	0x031000ea
 800f9dc:	01530131 	.word	0x01530131
 800f9e0:	00f00188 	.word	0x00f00188
 800f9e4:	01980310 	.word	0x01980310
 800f9e8:	02790098 	.word	0x02790098
 800f9ec:	03100310 	.word	0x03100310
 800f9f0:	03100065 	.word	0x03100065
 800f9f4:	0098      	.short	0x0098
 800f9f6:	9800      	ldr	r0, [sp, #0]
 800f9f8:	aa0e      	add	r2, sp, #56	@ 0x38
 800f9fa:	4639      	mov	r1, r7
 800f9fc:	f000 fbd4 	bl	80101a8 <__sprint_r>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	f040 8332 	bne.w	801006a <_vfiprintf_r+0x852>
 800fa06:	ae11      	add	r6, sp, #68	@ 0x44
 800fa08:	e780      	b.n	800f90c <_vfiprintf_r+0xf4>
 800fa0a:	4a98      	ldr	r2, [pc, #608]	@ (800fc6c <_vfiprintf_r+0x454>)
 800fa0c:	9205      	str	r2, [sp, #20]
 800fa0e:	f01a 0220 	ands.w	r2, sl, #32
 800fa12:	f000 822e 	beq.w	800fe72 <_vfiprintf_r+0x65a>
 800fa16:	3507      	adds	r5, #7
 800fa18:	f025 0507 	bic.w	r5, r5, #7
 800fa1c:	46a8      	mov	r8, r5
 800fa1e:	686d      	ldr	r5, [r5, #4]
 800fa20:	f858 4b08 	ldr.w	r4, [r8], #8
 800fa24:	f01a 0f01 	tst.w	sl, #1
 800fa28:	d009      	beq.n	800fa3e <_vfiprintf_r+0x226>
 800fa2a:	ea54 0205 	orrs.w	r2, r4, r5
 800fa2e:	bf1f      	itttt	ne
 800fa30:	2230      	movne	r2, #48	@ 0x30
 800fa32:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800fa36:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800fa3a:	f04a 0a02 	orrne.w	sl, sl, #2
 800fa3e:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800fa42:	e111      	b.n	800fc68 <_vfiprintf_r+0x450>
 800fa44:	9800      	ldr	r0, [sp, #0]
 800fa46:	f7fe ffb5 	bl	800e9b4 <_localeconv_r>
 800fa4a:	6843      	ldr	r3, [r0, #4]
 800fa4c:	9308      	str	r3, [sp, #32]
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7f0 fc16 	bl	8000280 <strlen>
 800fa54:	9007      	str	r0, [sp, #28]
 800fa56:	9800      	ldr	r0, [sp, #0]
 800fa58:	f7fe ffac 	bl	800e9b4 <_localeconv_r>
 800fa5c:	6883      	ldr	r3, [r0, #8]
 800fa5e:	9306      	str	r3, [sp, #24]
 800fa60:	9b07      	ldr	r3, [sp, #28]
 800fa62:	b12b      	cbz	r3, 800fa70 <_vfiprintf_r+0x258>
 800fa64:	9b06      	ldr	r3, [sp, #24]
 800fa66:	b11b      	cbz	r3, 800fa70 <_vfiprintf_r+0x258>
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	b10b      	cbz	r3, 800fa70 <_vfiprintf_r+0x258>
 800fa6c:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800fa70:	465c      	mov	r4, fp
 800fa72:	e75b      	b.n	800f92c <_vfiprintf_r+0x114>
 800fa74:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d1f9      	bne.n	800fa70 <_vfiprintf_r+0x258>
 800fa7c:	2320      	movs	r3, #32
 800fa7e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800fa82:	e7f5      	b.n	800fa70 <_vfiprintf_r+0x258>
 800fa84:	f04a 0a01 	orr.w	sl, sl, #1
 800fa88:	e7f2      	b.n	800fa70 <_vfiprintf_r+0x258>
 800fa8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa8e:	9302      	str	r3, [sp, #8]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	daed      	bge.n	800fa70 <_vfiprintf_r+0x258>
 800fa94:	425b      	negs	r3, r3
 800fa96:	9302      	str	r3, [sp, #8]
 800fa98:	f04a 0a04 	orr.w	sl, sl, #4
 800fa9c:	e7e8      	b.n	800fa70 <_vfiprintf_r+0x258>
 800fa9e:	232b      	movs	r3, #43	@ 0x2b
 800faa0:	e7ed      	b.n	800fa7e <_vfiprintf_r+0x266>
 800faa2:	465a      	mov	r2, fp
 800faa4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800faa8:	2b2a      	cmp	r3, #42	@ 0x2a
 800faaa:	d113      	bne.n	800fad4 <_vfiprintf_r+0x2bc>
 800faac:	f855 3b04 	ldr.w	r3, [r5], #4
 800fab0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fab4:	9301      	str	r3, [sp, #4]
 800fab6:	4693      	mov	fp, r2
 800fab8:	e7da      	b.n	800fa70 <_vfiprintf_r+0x258>
 800faba:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fabe:	fb04 0101 	mla	r1, r4, r1, r0
 800fac2:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800fac6:	2809      	cmp	r0, #9
 800fac8:	d9f7      	bls.n	800faba <_vfiprintf_r+0x2a2>
 800faca:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 800face:	9101      	str	r1, [sp, #4]
 800fad0:	4693      	mov	fp, r2
 800fad2:	e72e      	b.n	800f932 <_vfiprintf_r+0x11a>
 800fad4:	2100      	movs	r1, #0
 800fad6:	240a      	movs	r4, #10
 800fad8:	e7f3      	b.n	800fac2 <_vfiprintf_r+0x2aa>
 800fada:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800fade:	e7c7      	b.n	800fa70 <_vfiprintf_r+0x258>
 800fae0:	2200      	movs	r2, #0
 800fae2:	9202      	str	r2, [sp, #8]
 800fae4:	210a      	movs	r1, #10
 800fae6:	9a02      	ldr	r2, [sp, #8]
 800fae8:	3b30      	subs	r3, #48	@ 0x30
 800faea:	fb01 3302 	mla	r3, r1, r2, r3
 800faee:	9302      	str	r3, [sp, #8]
 800faf0:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800faf4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800faf8:	2a09      	cmp	r2, #9
 800fafa:	d9f4      	bls.n	800fae6 <_vfiprintf_r+0x2ce>
 800fafc:	e719      	b.n	800f932 <_vfiprintf_r+0x11a>
 800fafe:	f89b 3000 	ldrb.w	r3, [fp]
 800fb02:	2b68      	cmp	r3, #104	@ 0x68
 800fb04:	bf06      	itte	eq
 800fb06:	f10b 0b01 	addeq.w	fp, fp, #1
 800fb0a:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800fb0e:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800fb12:	e7ad      	b.n	800fa70 <_vfiprintf_r+0x258>
 800fb14:	f89b 3000 	ldrb.w	r3, [fp]
 800fb18:	2b6c      	cmp	r3, #108	@ 0x6c
 800fb1a:	d104      	bne.n	800fb26 <_vfiprintf_r+0x30e>
 800fb1c:	f10b 0b01 	add.w	fp, fp, #1
 800fb20:	f04a 0a20 	orr.w	sl, sl, #32
 800fb24:	e7a4      	b.n	800fa70 <_vfiprintf_r+0x258>
 800fb26:	f04a 0a10 	orr.w	sl, sl, #16
 800fb2a:	e7a1      	b.n	800fa70 <_vfiprintf_r+0x258>
 800fb2c:	46a8      	mov	r8, r5
 800fb2e:	2400      	movs	r4, #0
 800fb30:	f858 3b04 	ldr.w	r3, [r8], #4
 800fb34:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800fb38:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	9301      	str	r3, [sp, #4]
 800fb40:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800fb44:	e0a9      	b.n	800fc9a <_vfiprintf_r+0x482>
 800fb46:	f04a 0a10 	orr.w	sl, sl, #16
 800fb4a:	f01a 0f20 	tst.w	sl, #32
 800fb4e:	d011      	beq.n	800fb74 <_vfiprintf_r+0x35c>
 800fb50:	3507      	adds	r5, #7
 800fb52:	f025 0507 	bic.w	r5, r5, #7
 800fb56:	46a8      	mov	r8, r5
 800fb58:	686d      	ldr	r5, [r5, #4]
 800fb5a:	f858 4b08 	ldr.w	r4, [r8], #8
 800fb5e:	2d00      	cmp	r5, #0
 800fb60:	da06      	bge.n	800fb70 <_vfiprintf_r+0x358>
 800fb62:	4264      	negs	r4, r4
 800fb64:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800fb68:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800fb6c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800fb70:	2301      	movs	r3, #1
 800fb72:	e048      	b.n	800fc06 <_vfiprintf_r+0x3ee>
 800fb74:	46a8      	mov	r8, r5
 800fb76:	f01a 0f10 	tst.w	sl, #16
 800fb7a:	f858 5b04 	ldr.w	r5, [r8], #4
 800fb7e:	d002      	beq.n	800fb86 <_vfiprintf_r+0x36e>
 800fb80:	462c      	mov	r4, r5
 800fb82:	17ed      	asrs	r5, r5, #31
 800fb84:	e7eb      	b.n	800fb5e <_vfiprintf_r+0x346>
 800fb86:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800fb8a:	d003      	beq.n	800fb94 <_vfiprintf_r+0x37c>
 800fb8c:	b22c      	sxth	r4, r5
 800fb8e:	f345 35c0 	sbfx	r5, r5, #15, #1
 800fb92:	e7e4      	b.n	800fb5e <_vfiprintf_r+0x346>
 800fb94:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800fb98:	d0f2      	beq.n	800fb80 <_vfiprintf_r+0x368>
 800fb9a:	b26c      	sxtb	r4, r5
 800fb9c:	f345 15c0 	sbfx	r5, r5, #7, #1
 800fba0:	e7dd      	b.n	800fb5e <_vfiprintf_r+0x346>
 800fba2:	f01a 0f20 	tst.w	sl, #32
 800fba6:	d007      	beq.n	800fbb8 <_vfiprintf_r+0x3a0>
 800fba8:	9a03      	ldr	r2, [sp, #12]
 800fbaa:	682b      	ldr	r3, [r5, #0]
 800fbac:	9903      	ldr	r1, [sp, #12]
 800fbae:	17d2      	asrs	r2, r2, #31
 800fbb0:	e9c3 1200 	strd	r1, r2, [r3]
 800fbb4:	3504      	adds	r5, #4
 800fbb6:	e694      	b.n	800f8e2 <_vfiprintf_r+0xca>
 800fbb8:	f01a 0f10 	tst.w	sl, #16
 800fbbc:	d003      	beq.n	800fbc6 <_vfiprintf_r+0x3ae>
 800fbbe:	682b      	ldr	r3, [r5, #0]
 800fbc0:	9a03      	ldr	r2, [sp, #12]
 800fbc2:	601a      	str	r2, [r3, #0]
 800fbc4:	e7f6      	b.n	800fbb4 <_vfiprintf_r+0x39c>
 800fbc6:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800fbca:	d003      	beq.n	800fbd4 <_vfiprintf_r+0x3bc>
 800fbcc:	682b      	ldr	r3, [r5, #0]
 800fbce:	9a03      	ldr	r2, [sp, #12]
 800fbd0:	801a      	strh	r2, [r3, #0]
 800fbd2:	e7ef      	b.n	800fbb4 <_vfiprintf_r+0x39c>
 800fbd4:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800fbd8:	d0f1      	beq.n	800fbbe <_vfiprintf_r+0x3a6>
 800fbda:	682b      	ldr	r3, [r5, #0]
 800fbdc:	9a03      	ldr	r2, [sp, #12]
 800fbde:	701a      	strb	r2, [r3, #0]
 800fbe0:	e7e8      	b.n	800fbb4 <_vfiprintf_r+0x39c>
 800fbe2:	f04a 0a10 	orr.w	sl, sl, #16
 800fbe6:	f01a 0320 	ands.w	r3, sl, #32
 800fbea:	d01f      	beq.n	800fc2c <_vfiprintf_r+0x414>
 800fbec:	3507      	adds	r5, #7
 800fbee:	f025 0507 	bic.w	r5, r5, #7
 800fbf2:	46a8      	mov	r8, r5
 800fbf4:	686d      	ldr	r5, [r5, #4]
 800fbf6:	f858 4b08 	ldr.w	r4, [r8], #8
 800fbfa:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800fbfe:	2300      	movs	r3, #0
 800fc00:	2200      	movs	r2, #0
 800fc02:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800fc06:	9a01      	ldr	r2, [sp, #4]
 800fc08:	2a00      	cmp	r2, #0
 800fc0a:	f2c0 825c 	blt.w	80100c6 <_vfiprintf_r+0x8ae>
 800fc0e:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800fc12:	9204      	str	r2, [sp, #16]
 800fc14:	ea54 0205 	orrs.w	r2, r4, r5
 800fc18:	f040 825b 	bne.w	80100d2 <_vfiprintf_r+0x8ba>
 800fc1c:	9a01      	ldr	r2, [sp, #4]
 800fc1e:	2a00      	cmp	r2, #0
 800fc20:	f000 8195 	beq.w	800ff4e <_vfiprintf_r+0x736>
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	f040 8257 	bne.w	80100d8 <_vfiprintf_r+0x8c0>
 800fc2a:	e139      	b.n	800fea0 <_vfiprintf_r+0x688>
 800fc2c:	46a8      	mov	r8, r5
 800fc2e:	f01a 0510 	ands.w	r5, sl, #16
 800fc32:	f858 4b04 	ldr.w	r4, [r8], #4
 800fc36:	d001      	beq.n	800fc3c <_vfiprintf_r+0x424>
 800fc38:	461d      	mov	r5, r3
 800fc3a:	e7de      	b.n	800fbfa <_vfiprintf_r+0x3e2>
 800fc3c:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800fc40:	d001      	beq.n	800fc46 <_vfiprintf_r+0x42e>
 800fc42:	b2a4      	uxth	r4, r4
 800fc44:	e7d9      	b.n	800fbfa <_vfiprintf_r+0x3e2>
 800fc46:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800fc4a:	d0d6      	beq.n	800fbfa <_vfiprintf_r+0x3e2>
 800fc4c:	b2e4      	uxtb	r4, r4
 800fc4e:	e7f3      	b.n	800fc38 <_vfiprintf_r+0x420>
 800fc50:	46a8      	mov	r8, r5
 800fc52:	f647 0330 	movw	r3, #30768	@ 0x7830
 800fc56:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800fc5a:	f858 4b04 	ldr.w	r4, [r8], #4
 800fc5e:	4b03      	ldr	r3, [pc, #12]	@ (800fc6c <_vfiprintf_r+0x454>)
 800fc60:	9305      	str	r3, [sp, #20]
 800fc62:	2500      	movs	r5, #0
 800fc64:	f04a 0a02 	orr.w	sl, sl, #2
 800fc68:	2302      	movs	r3, #2
 800fc6a:	e7c9      	b.n	800fc00 <_vfiprintf_r+0x3e8>
 800fc6c:	08011b5c 	.word	0x08011b5c
 800fc70:	9b01      	ldr	r3, [sp, #4]
 800fc72:	46a8      	mov	r8, r5
 800fc74:	2500      	movs	r5, #0
 800fc76:	42ab      	cmp	r3, r5
 800fc78:	f858 9b04 	ldr.w	r9, [r8], #4
 800fc7c:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800fc80:	f2c0 80d0 	blt.w	800fe24 <_vfiprintf_r+0x60c>
 800fc84:	461a      	mov	r2, r3
 800fc86:	4629      	mov	r1, r5
 800fc88:	4648      	mov	r0, r9
 800fc8a:	f7f0 faa9 	bl	80001e0 <memchr>
 800fc8e:	4604      	mov	r4, r0
 800fc90:	b118      	cbz	r0, 800fc9a <_vfiprintf_r+0x482>
 800fc92:	eba0 0309 	sub.w	r3, r0, r9
 800fc96:	9301      	str	r3, [sp, #4]
 800fc98:	462c      	mov	r4, r5
 800fc9a:	9b01      	ldr	r3, [sp, #4]
 800fc9c:	42a3      	cmp	r3, r4
 800fc9e:	bfb8      	it	lt
 800fca0:	4623      	movlt	r3, r4
 800fca2:	9304      	str	r3, [sp, #16]
 800fca4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800fca8:	b113      	cbz	r3, 800fcb0 <_vfiprintf_r+0x498>
 800fcaa:	9b04      	ldr	r3, [sp, #16]
 800fcac:	3301      	adds	r3, #1
 800fcae:	9304      	str	r3, [sp, #16]
 800fcb0:	f01a 0302 	ands.w	r3, sl, #2
 800fcb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcb6:	bf1e      	ittt	ne
 800fcb8:	9b04      	ldrne	r3, [sp, #16]
 800fcba:	3302      	addne	r3, #2
 800fcbc:	9304      	strne	r3, [sp, #16]
 800fcbe:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800fcc2:	930a      	str	r3, [sp, #40]	@ 0x28
 800fcc4:	d11f      	bne.n	800fd06 <_vfiprintf_r+0x4ee>
 800fcc6:	9b02      	ldr	r3, [sp, #8]
 800fcc8:	9a04      	ldr	r2, [sp, #16]
 800fcca:	1a9d      	subs	r5, r3, r2
 800fccc:	2d00      	cmp	r5, #0
 800fcce:	dd1a      	ble.n	800fd06 <_vfiprintf_r+0x4ee>
 800fcd0:	4ba8      	ldr	r3, [pc, #672]	@ (800ff74 <_vfiprintf_r+0x75c>)
 800fcd2:	6033      	str	r3, [r6, #0]
 800fcd4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800fcd8:	2d10      	cmp	r5, #16
 800fcda:	f102 0201 	add.w	r2, r2, #1
 800fcde:	f106 0008 	add.w	r0, r6, #8
 800fce2:	f300 814d 	bgt.w	800ff80 <_vfiprintf_r+0x768>
 800fce6:	6075      	str	r5, [r6, #4]
 800fce8:	2a07      	cmp	r2, #7
 800fcea:	4465      	add	r5, ip
 800fcec:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800fcf0:	f340 8159 	ble.w	800ffa6 <_vfiprintf_r+0x78e>
 800fcf4:	9800      	ldr	r0, [sp, #0]
 800fcf6:	aa0e      	add	r2, sp, #56	@ 0x38
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	f000 fa55 	bl	80101a8 <__sprint_r>
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	f040 81b3 	bne.w	801006a <_vfiprintf_r+0x852>
 800fd04:	ae11      	add	r6, sp, #68	@ 0x44
 800fd06:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800fd0a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800fd0e:	b161      	cbz	r1, 800fd2a <_vfiprintf_r+0x512>
 800fd10:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800fd14:	3301      	adds	r3, #1
 800fd16:	6031      	str	r1, [r6, #0]
 800fd18:	2101      	movs	r1, #1
 800fd1a:	440a      	add	r2, r1
 800fd1c:	2b07      	cmp	r3, #7
 800fd1e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800fd22:	6071      	str	r1, [r6, #4]
 800fd24:	f300 8141 	bgt.w	800ffaa <_vfiprintf_r+0x792>
 800fd28:	3608      	adds	r6, #8
 800fd2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fd2c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800fd30:	b159      	cbz	r1, 800fd4a <_vfiprintf_r+0x532>
 800fd32:	a90d      	add	r1, sp, #52	@ 0x34
 800fd34:	3301      	adds	r3, #1
 800fd36:	6031      	str	r1, [r6, #0]
 800fd38:	2102      	movs	r1, #2
 800fd3a:	440a      	add	r2, r1
 800fd3c:	2b07      	cmp	r3, #7
 800fd3e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800fd42:	6071      	str	r1, [r6, #4]
 800fd44:	f300 813a 	bgt.w	800ffbc <_vfiprintf_r+0x7a4>
 800fd48:	3608      	adds	r6, #8
 800fd4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd4c:	2b80      	cmp	r3, #128	@ 0x80
 800fd4e:	d11f      	bne.n	800fd90 <_vfiprintf_r+0x578>
 800fd50:	9b02      	ldr	r3, [sp, #8]
 800fd52:	9a04      	ldr	r2, [sp, #16]
 800fd54:	1a9d      	subs	r5, r3, r2
 800fd56:	2d00      	cmp	r5, #0
 800fd58:	dd1a      	ble.n	800fd90 <_vfiprintf_r+0x578>
 800fd5a:	4b87      	ldr	r3, [pc, #540]	@ (800ff78 <_vfiprintf_r+0x760>)
 800fd5c:	6033      	str	r3, [r6, #0]
 800fd5e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800fd62:	2d10      	cmp	r5, #16
 800fd64:	f102 0201 	add.w	r2, r2, #1
 800fd68:	f106 0008 	add.w	r0, r6, #8
 800fd6c:	f300 812f 	bgt.w	800ffce <_vfiprintf_r+0x7b6>
 800fd70:	6075      	str	r5, [r6, #4]
 800fd72:	2a07      	cmp	r2, #7
 800fd74:	4465      	add	r5, ip
 800fd76:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800fd7a:	f340 813b 	ble.w	800fff4 <_vfiprintf_r+0x7dc>
 800fd7e:	9800      	ldr	r0, [sp, #0]
 800fd80:	aa0e      	add	r2, sp, #56	@ 0x38
 800fd82:	4639      	mov	r1, r7
 800fd84:	f000 fa10 	bl	80101a8 <__sprint_r>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	f040 816e 	bne.w	801006a <_vfiprintf_r+0x852>
 800fd8e:	ae11      	add	r6, sp, #68	@ 0x44
 800fd90:	9b01      	ldr	r3, [sp, #4]
 800fd92:	1ae4      	subs	r4, r4, r3
 800fd94:	2c00      	cmp	r4, #0
 800fd96:	dd1a      	ble.n	800fdce <_vfiprintf_r+0x5b6>
 800fd98:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800fd9c:	4876      	ldr	r0, [pc, #472]	@ (800ff78 <_vfiprintf_r+0x760>)
 800fd9e:	6030      	str	r0, [r6, #0]
 800fda0:	2c10      	cmp	r4, #16
 800fda2:	f103 0301 	add.w	r3, r3, #1
 800fda6:	f106 0108 	add.w	r1, r6, #8
 800fdaa:	f300 8125 	bgt.w	800fff8 <_vfiprintf_r+0x7e0>
 800fdae:	6074      	str	r4, [r6, #4]
 800fdb0:	2b07      	cmp	r3, #7
 800fdb2:	4414      	add	r4, r2
 800fdb4:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800fdb8:	f340 812f 	ble.w	801001a <_vfiprintf_r+0x802>
 800fdbc:	9800      	ldr	r0, [sp, #0]
 800fdbe:	aa0e      	add	r2, sp, #56	@ 0x38
 800fdc0:	4639      	mov	r1, r7
 800fdc2:	f000 f9f1 	bl	80101a8 <__sprint_r>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	f040 814f 	bne.w	801006a <_vfiprintf_r+0x852>
 800fdcc:	ae11      	add	r6, sp, #68	@ 0x44
 800fdce:	9b01      	ldr	r3, [sp, #4]
 800fdd0:	9a01      	ldr	r2, [sp, #4]
 800fdd2:	6073      	str	r3, [r6, #4]
 800fdd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fdd6:	f8c6 9000 	str.w	r9, [r6]
 800fdda:	4413      	add	r3, r2
 800fddc:	9310      	str	r3, [sp, #64]	@ 0x40
 800fdde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fde0:	3301      	adds	r3, #1
 800fde2:	2b07      	cmp	r3, #7
 800fde4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fde6:	f300 811a 	bgt.w	801001e <_vfiprintf_r+0x806>
 800fdea:	f106 0308 	add.w	r3, r6, #8
 800fdee:	f01a 0f04 	tst.w	sl, #4
 800fdf2:	f040 811c 	bne.w	801002e <_vfiprintf_r+0x816>
 800fdf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fdfa:	9904      	ldr	r1, [sp, #16]
 800fdfc:	428a      	cmp	r2, r1
 800fdfe:	bfac      	ite	ge
 800fe00:	189b      	addge	r3, r3, r2
 800fe02:	185b      	addlt	r3, r3, r1
 800fe04:	9303      	str	r3, [sp, #12]
 800fe06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fe08:	b13b      	cbz	r3, 800fe1a <_vfiprintf_r+0x602>
 800fe0a:	9800      	ldr	r0, [sp, #0]
 800fe0c:	aa0e      	add	r2, sp, #56	@ 0x38
 800fe0e:	4639      	mov	r1, r7
 800fe10:	f000 f9ca 	bl	80101a8 <__sprint_r>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	f040 8128 	bne.w	801006a <_vfiprintf_r+0x852>
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe1e:	4645      	mov	r5, r8
 800fe20:	ae11      	add	r6, sp, #68	@ 0x44
 800fe22:	e55e      	b.n	800f8e2 <_vfiprintf_r+0xca>
 800fe24:	4648      	mov	r0, r9
 800fe26:	f7f0 fa2b 	bl	8000280 <strlen>
 800fe2a:	9001      	str	r0, [sp, #4]
 800fe2c:	e734      	b.n	800fc98 <_vfiprintf_r+0x480>
 800fe2e:	f04a 0a10 	orr.w	sl, sl, #16
 800fe32:	f01a 0320 	ands.w	r3, sl, #32
 800fe36:	d008      	beq.n	800fe4a <_vfiprintf_r+0x632>
 800fe38:	3507      	adds	r5, #7
 800fe3a:	f025 0507 	bic.w	r5, r5, #7
 800fe3e:	46a8      	mov	r8, r5
 800fe40:	686d      	ldr	r5, [r5, #4]
 800fe42:	f858 4b08 	ldr.w	r4, [r8], #8
 800fe46:	2301      	movs	r3, #1
 800fe48:	e6da      	b.n	800fc00 <_vfiprintf_r+0x3e8>
 800fe4a:	46a8      	mov	r8, r5
 800fe4c:	f01a 0510 	ands.w	r5, sl, #16
 800fe50:	f858 4b04 	ldr.w	r4, [r8], #4
 800fe54:	d001      	beq.n	800fe5a <_vfiprintf_r+0x642>
 800fe56:	461d      	mov	r5, r3
 800fe58:	e7f5      	b.n	800fe46 <_vfiprintf_r+0x62e>
 800fe5a:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800fe5e:	d001      	beq.n	800fe64 <_vfiprintf_r+0x64c>
 800fe60:	b2a4      	uxth	r4, r4
 800fe62:	e7f0      	b.n	800fe46 <_vfiprintf_r+0x62e>
 800fe64:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800fe68:	d0ed      	beq.n	800fe46 <_vfiprintf_r+0x62e>
 800fe6a:	b2e4      	uxtb	r4, r4
 800fe6c:	e7f3      	b.n	800fe56 <_vfiprintf_r+0x63e>
 800fe6e:	4a43      	ldr	r2, [pc, #268]	@ (800ff7c <_vfiprintf_r+0x764>)
 800fe70:	e5cc      	b.n	800fa0c <_vfiprintf_r+0x1f4>
 800fe72:	46a8      	mov	r8, r5
 800fe74:	f01a 0510 	ands.w	r5, sl, #16
 800fe78:	f858 4b04 	ldr.w	r4, [r8], #4
 800fe7c:	d001      	beq.n	800fe82 <_vfiprintf_r+0x66a>
 800fe7e:	4615      	mov	r5, r2
 800fe80:	e5d0      	b.n	800fa24 <_vfiprintf_r+0x20c>
 800fe82:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800fe86:	d001      	beq.n	800fe8c <_vfiprintf_r+0x674>
 800fe88:	b2a4      	uxth	r4, r4
 800fe8a:	e5cb      	b.n	800fa24 <_vfiprintf_r+0x20c>
 800fe8c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800fe90:	f43f adc8 	beq.w	800fa24 <_vfiprintf_r+0x20c>
 800fe94:	b2e4      	uxtb	r4, r4
 800fe96:	e7f2      	b.n	800fe7e <_vfiprintf_r+0x666>
 800fe98:	2c0a      	cmp	r4, #10
 800fe9a:	f175 0300 	sbcs.w	r3, r5, #0
 800fe9e:	d206      	bcs.n	800feae <_vfiprintf_r+0x696>
 800fea0:	3430      	adds	r4, #48	@ 0x30
 800fea2:	b2e4      	uxtb	r4, r4
 800fea4:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800fea8:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800feac:	e130      	b.n	8010110 <_vfiprintf_r+0x8f8>
 800feae:	ab3a      	add	r3, sp, #232	@ 0xe8
 800feb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800feb2:	9b04      	ldr	r3, [sp, #16]
 800feb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800feb8:	f04f 0a00 	mov.w	sl, #0
 800febc:	930a      	str	r3, [sp, #40]	@ 0x28
 800febe:	220a      	movs	r2, #10
 800fec0:	2300      	movs	r3, #0
 800fec2:	4620      	mov	r0, r4
 800fec4:	4629      	mov	r1, r5
 800fec6:	f7f0 ff37 	bl	8000d38 <__aeabi_uldivmod>
 800feca:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fecc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fece:	3230      	adds	r2, #48	@ 0x30
 800fed0:	f801 2c01 	strb.w	r2, [r1, #-1]
 800fed4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fed6:	4603      	mov	r3, r0
 800fed8:	f101 39ff 	add.w	r9, r1, #4294967295
 800fedc:	f10a 0a01 	add.w	sl, sl, #1
 800fee0:	b312      	cbz	r2, 800ff28 <_vfiprintf_r+0x710>
 800fee2:	9a06      	ldr	r2, [sp, #24]
 800fee4:	7812      	ldrb	r2, [r2, #0]
 800fee6:	4552      	cmp	r2, sl
 800fee8:	d11e      	bne.n	800ff28 <_vfiprintf_r+0x710>
 800feea:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800feee:	d01b      	beq.n	800ff28 <_vfiprintf_r+0x710>
 800fef0:	2c0a      	cmp	r4, #10
 800fef2:	f175 0500 	sbcs.w	r5, r5, #0
 800fef6:	f0c0 810b 	bcc.w	8010110 <_vfiprintf_r+0x8f8>
 800fefa:	9b07      	ldr	r3, [sp, #28]
 800fefc:	9009      	str	r0, [sp, #36]	@ 0x24
 800fefe:	eba9 0903 	sub.w	r9, r9, r3
 800ff02:	461a      	mov	r2, r3
 800ff04:	9908      	ldr	r1, [sp, #32]
 800ff06:	4648      	mov	r0, r9
 800ff08:	f7fc f864 	bl	800bfd4 <strncpy>
 800ff0c:	9b06      	ldr	r3, [sp, #24]
 800ff0e:	785a      	ldrb	r2, [r3, #1]
 800ff10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff12:	b112      	cbz	r2, 800ff1a <_vfiprintf_r+0x702>
 800ff14:	9a06      	ldr	r2, [sp, #24]
 800ff16:	3201      	adds	r2, #1
 800ff18:	9206      	str	r2, [sp, #24]
 800ff1a:	f04f 0a00 	mov.w	sl, #0
 800ff1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ff20:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800ff24:	461c      	mov	r4, r3
 800ff26:	e7ca      	b.n	800febe <_vfiprintf_r+0x6a6>
 800ff28:	2c0a      	cmp	r4, #10
 800ff2a:	f175 0500 	sbcs.w	r5, r5, #0
 800ff2e:	d2f6      	bcs.n	800ff1e <_vfiprintf_r+0x706>
 800ff30:	e0ee      	b.n	8010110 <_vfiprintf_r+0x8f8>
 800ff32:	f004 030f 	and.w	r3, r4, #15
 800ff36:	9a05      	ldr	r2, [sp, #20]
 800ff38:	0924      	lsrs	r4, r4, #4
 800ff3a:	5cd3      	ldrb	r3, [r2, r3]
 800ff3c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800ff40:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800ff44:	092d      	lsrs	r5, r5, #4
 800ff46:	ea54 0305 	orrs.w	r3, r4, r5
 800ff4a:	d1f2      	bne.n	800ff32 <_vfiprintf_r+0x71a>
 800ff4c:	e0e0      	b.n	8010110 <_vfiprintf_r+0x8f8>
 800ff4e:	b923      	cbnz	r3, 800ff5a <_vfiprintf_r+0x742>
 800ff50:	f01a 0f01 	tst.w	sl, #1
 800ff54:	d001      	beq.n	800ff5a <_vfiprintf_r+0x742>
 800ff56:	2430      	movs	r4, #48	@ 0x30
 800ff58:	e7a4      	b.n	800fea4 <_vfiprintf_r+0x68c>
 800ff5a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800ff5e:	e0d7      	b.n	8010110 <_vfiprintf_r+0x8f8>
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f000 80a3 	beq.w	80100ac <_vfiprintf_r+0x894>
 800ff66:	2400      	movs	r4, #0
 800ff68:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800ff6c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800ff70:	46a8      	mov	r8, r5
 800ff72:	e5e3      	b.n	800fb3c <_vfiprintf_r+0x324>
 800ff74:	08011ea8 	.word	0x08011ea8
 800ff78:	08011e98 	.word	0x08011e98
 800ff7c:	08011b6d 	.word	0x08011b6d
 800ff80:	2110      	movs	r1, #16
 800ff82:	6071      	str	r1, [r6, #4]
 800ff84:	2a07      	cmp	r2, #7
 800ff86:	4461      	add	r1, ip
 800ff88:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800ff8c:	dd08      	ble.n	800ffa0 <_vfiprintf_r+0x788>
 800ff8e:	9800      	ldr	r0, [sp, #0]
 800ff90:	aa0e      	add	r2, sp, #56	@ 0x38
 800ff92:	4639      	mov	r1, r7
 800ff94:	f000 f908 	bl	80101a8 <__sprint_r>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d166      	bne.n	801006a <_vfiprintf_r+0x852>
 800ff9c:	4b60      	ldr	r3, [pc, #384]	@ (8010120 <_vfiprintf_r+0x908>)
 800ff9e:	a811      	add	r0, sp, #68	@ 0x44
 800ffa0:	3d10      	subs	r5, #16
 800ffa2:	4606      	mov	r6, r0
 800ffa4:	e695      	b.n	800fcd2 <_vfiprintf_r+0x4ba>
 800ffa6:	4606      	mov	r6, r0
 800ffa8:	e6ad      	b.n	800fd06 <_vfiprintf_r+0x4ee>
 800ffaa:	9800      	ldr	r0, [sp, #0]
 800ffac:	aa0e      	add	r2, sp, #56	@ 0x38
 800ffae:	4639      	mov	r1, r7
 800ffb0:	f000 f8fa 	bl	80101a8 <__sprint_r>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	d158      	bne.n	801006a <_vfiprintf_r+0x852>
 800ffb8:	ae11      	add	r6, sp, #68	@ 0x44
 800ffba:	e6b6      	b.n	800fd2a <_vfiprintf_r+0x512>
 800ffbc:	9800      	ldr	r0, [sp, #0]
 800ffbe:	aa0e      	add	r2, sp, #56	@ 0x38
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	f000 f8f1 	bl	80101a8 <__sprint_r>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d14f      	bne.n	801006a <_vfiprintf_r+0x852>
 800ffca:	ae11      	add	r6, sp, #68	@ 0x44
 800ffcc:	e6bd      	b.n	800fd4a <_vfiprintf_r+0x532>
 800ffce:	2110      	movs	r1, #16
 800ffd0:	6071      	str	r1, [r6, #4]
 800ffd2:	2a07      	cmp	r2, #7
 800ffd4:	4461      	add	r1, ip
 800ffd6:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800ffda:	dd08      	ble.n	800ffee <_vfiprintf_r+0x7d6>
 800ffdc:	9800      	ldr	r0, [sp, #0]
 800ffde:	aa0e      	add	r2, sp, #56	@ 0x38
 800ffe0:	4639      	mov	r1, r7
 800ffe2:	f000 f8e1 	bl	80101a8 <__sprint_r>
 800ffe6:	2800      	cmp	r0, #0
 800ffe8:	d13f      	bne.n	801006a <_vfiprintf_r+0x852>
 800ffea:	4b4e      	ldr	r3, [pc, #312]	@ (8010124 <_vfiprintf_r+0x90c>)
 800ffec:	a811      	add	r0, sp, #68	@ 0x44
 800ffee:	3d10      	subs	r5, #16
 800fff0:	4606      	mov	r6, r0
 800fff2:	e6b3      	b.n	800fd5c <_vfiprintf_r+0x544>
 800fff4:	4606      	mov	r6, r0
 800fff6:	e6cb      	b.n	800fd90 <_vfiprintf_r+0x578>
 800fff8:	2010      	movs	r0, #16
 800fffa:	4402      	add	r2, r0
 800fffc:	2b07      	cmp	r3, #7
 800fffe:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010002:	6070      	str	r0, [r6, #4]
 8010004:	dd06      	ble.n	8010014 <_vfiprintf_r+0x7fc>
 8010006:	9800      	ldr	r0, [sp, #0]
 8010008:	aa0e      	add	r2, sp, #56	@ 0x38
 801000a:	4639      	mov	r1, r7
 801000c:	f000 f8cc 	bl	80101a8 <__sprint_r>
 8010010:	bb58      	cbnz	r0, 801006a <_vfiprintf_r+0x852>
 8010012:	a911      	add	r1, sp, #68	@ 0x44
 8010014:	3c10      	subs	r4, #16
 8010016:	460e      	mov	r6, r1
 8010018:	e6be      	b.n	800fd98 <_vfiprintf_r+0x580>
 801001a:	460e      	mov	r6, r1
 801001c:	e6d7      	b.n	800fdce <_vfiprintf_r+0x5b6>
 801001e:	9800      	ldr	r0, [sp, #0]
 8010020:	aa0e      	add	r2, sp, #56	@ 0x38
 8010022:	4639      	mov	r1, r7
 8010024:	f000 f8c0 	bl	80101a8 <__sprint_r>
 8010028:	b9f8      	cbnz	r0, 801006a <_vfiprintf_r+0x852>
 801002a:	ab11      	add	r3, sp, #68	@ 0x44
 801002c:	e6df      	b.n	800fdee <_vfiprintf_r+0x5d6>
 801002e:	9a02      	ldr	r2, [sp, #8]
 8010030:	9904      	ldr	r1, [sp, #16]
 8010032:	1a54      	subs	r4, r2, r1
 8010034:	2c00      	cmp	r4, #0
 8010036:	f77f aede 	ble.w	800fdf6 <_vfiprintf_r+0x5de>
 801003a:	4d39      	ldr	r5, [pc, #228]	@ (8010120 <_vfiprintf_r+0x908>)
 801003c:	2610      	movs	r6, #16
 801003e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8010042:	2c10      	cmp	r4, #16
 8010044:	f102 0201 	add.w	r2, r2, #1
 8010048:	601d      	str	r5, [r3, #0]
 801004a:	dc1d      	bgt.n	8010088 <_vfiprintf_r+0x870>
 801004c:	605c      	str	r4, [r3, #4]
 801004e:	2a07      	cmp	r2, #7
 8010050:	440c      	add	r4, r1
 8010052:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8010056:	f77f aece 	ble.w	800fdf6 <_vfiprintf_r+0x5de>
 801005a:	9800      	ldr	r0, [sp, #0]
 801005c:	aa0e      	add	r2, sp, #56	@ 0x38
 801005e:	4639      	mov	r1, r7
 8010060:	f000 f8a2 	bl	80101a8 <__sprint_r>
 8010064:	2800      	cmp	r0, #0
 8010066:	f43f aec6 	beq.w	800fdf6 <_vfiprintf_r+0x5de>
 801006a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801006c:	07d9      	lsls	r1, r3, #31
 801006e:	d405      	bmi.n	801007c <_vfiprintf_r+0x864>
 8010070:	89bb      	ldrh	r3, [r7, #12]
 8010072:	059a      	lsls	r2, r3, #22
 8010074:	d402      	bmi.n	801007c <_vfiprintf_r+0x864>
 8010076:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010078:	f7fc f889 	bl	800c18e <__retarget_lock_release_recursive>
 801007c:	89bb      	ldrh	r3, [r7, #12]
 801007e:	065b      	lsls	r3, r3, #25
 8010080:	f57f abf3 	bpl.w	800f86a <_vfiprintf_r+0x52>
 8010084:	f7ff bbee 	b.w	800f864 <_vfiprintf_r+0x4c>
 8010088:	3110      	adds	r1, #16
 801008a:	2a07      	cmp	r2, #7
 801008c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8010090:	605e      	str	r6, [r3, #4]
 8010092:	dc02      	bgt.n	801009a <_vfiprintf_r+0x882>
 8010094:	3308      	adds	r3, #8
 8010096:	3c10      	subs	r4, #16
 8010098:	e7d1      	b.n	801003e <_vfiprintf_r+0x826>
 801009a:	9800      	ldr	r0, [sp, #0]
 801009c:	aa0e      	add	r2, sp, #56	@ 0x38
 801009e:	4639      	mov	r1, r7
 80100a0:	f000 f882 	bl	80101a8 <__sprint_r>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d1e0      	bne.n	801006a <_vfiprintf_r+0x852>
 80100a8:	ab11      	add	r3, sp, #68	@ 0x44
 80100aa:	e7f4      	b.n	8010096 <_vfiprintf_r+0x87e>
 80100ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80100ae:	b913      	cbnz	r3, 80100b6 <_vfiprintf_r+0x89e>
 80100b0:	2300      	movs	r3, #0
 80100b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80100b4:	e7d9      	b.n	801006a <_vfiprintf_r+0x852>
 80100b6:	9800      	ldr	r0, [sp, #0]
 80100b8:	aa0e      	add	r2, sp, #56	@ 0x38
 80100ba:	4639      	mov	r1, r7
 80100bc:	f000 f874 	bl	80101a8 <__sprint_r>
 80100c0:	2800      	cmp	r0, #0
 80100c2:	d0f5      	beq.n	80100b0 <_vfiprintf_r+0x898>
 80100c4:	e7d1      	b.n	801006a <_vfiprintf_r+0x852>
 80100c6:	ea54 0205 	orrs.w	r2, r4, r5
 80100ca:	f8cd a010 	str.w	sl, [sp, #16]
 80100ce:	f43f ada9 	beq.w	800fc24 <_vfiprintf_r+0x40c>
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	f43f aee0 	beq.w	800fe98 <_vfiprintf_r+0x680>
 80100d8:	2b02      	cmp	r3, #2
 80100da:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80100de:	f43f af28 	beq.w	800ff32 <_vfiprintf_r+0x71a>
 80100e2:	f004 0307 	and.w	r3, r4, #7
 80100e6:	08e4      	lsrs	r4, r4, #3
 80100e8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80100ec:	08ed      	lsrs	r5, r5, #3
 80100ee:	3330      	adds	r3, #48	@ 0x30
 80100f0:	ea54 0105 	orrs.w	r1, r4, r5
 80100f4:	464a      	mov	r2, r9
 80100f6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80100fa:	d1f2      	bne.n	80100e2 <_vfiprintf_r+0x8ca>
 80100fc:	9904      	ldr	r1, [sp, #16]
 80100fe:	07c8      	lsls	r0, r1, #31
 8010100:	d506      	bpl.n	8010110 <_vfiprintf_r+0x8f8>
 8010102:	2b30      	cmp	r3, #48	@ 0x30
 8010104:	d004      	beq.n	8010110 <_vfiprintf_r+0x8f8>
 8010106:	2330      	movs	r3, #48	@ 0x30
 8010108:	f809 3c01 	strb.w	r3, [r9, #-1]
 801010c:	f1a2 0902 	sub.w	r9, r2, #2
 8010110:	ab3a      	add	r3, sp, #232	@ 0xe8
 8010112:	eba3 0309 	sub.w	r3, r3, r9
 8010116:	9c01      	ldr	r4, [sp, #4]
 8010118:	f8dd a010 	ldr.w	sl, [sp, #16]
 801011c:	9301      	str	r3, [sp, #4]
 801011e:	e5bc      	b.n	800fc9a <_vfiprintf_r+0x482>
 8010120:	08011ea8 	.word	0x08011ea8
 8010124:	08011e98 	.word	0x08011e98

08010128 <__sbprintf>:
 8010128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801012a:	461f      	mov	r7, r3
 801012c:	898b      	ldrh	r3, [r1, #12]
 801012e:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8010132:	f023 0302 	bic.w	r3, r3, #2
 8010136:	f8ad 300c 	strh.w	r3, [sp, #12]
 801013a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801013c:	9319      	str	r3, [sp, #100]	@ 0x64
 801013e:	89cb      	ldrh	r3, [r1, #14]
 8010140:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010144:	69cb      	ldr	r3, [r1, #28]
 8010146:	9307      	str	r3, [sp, #28]
 8010148:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801014a:	9309      	str	r3, [sp, #36]	@ 0x24
 801014c:	ab1a      	add	r3, sp, #104	@ 0x68
 801014e:	9300      	str	r3, [sp, #0]
 8010150:	9304      	str	r3, [sp, #16]
 8010152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010156:	4615      	mov	r5, r2
 8010158:	4606      	mov	r6, r0
 801015a:	9302      	str	r3, [sp, #8]
 801015c:	9305      	str	r3, [sp, #20]
 801015e:	a816      	add	r0, sp, #88	@ 0x58
 8010160:	2300      	movs	r3, #0
 8010162:	460c      	mov	r4, r1
 8010164:	9306      	str	r3, [sp, #24]
 8010166:	f7fc f80f 	bl	800c188 <__retarget_lock_init_recursive>
 801016a:	462a      	mov	r2, r5
 801016c:	463b      	mov	r3, r7
 801016e:	4669      	mov	r1, sp
 8010170:	4630      	mov	r0, r6
 8010172:	f7ff fb51 	bl	800f818 <_vfiprintf_r>
 8010176:	1e05      	subs	r5, r0, #0
 8010178:	db07      	blt.n	801018a <__sbprintf+0x62>
 801017a:	4669      	mov	r1, sp
 801017c:	4630      	mov	r0, r6
 801017e:	f7fe fbf3 	bl	800e968 <_fflush_r>
 8010182:	2800      	cmp	r0, #0
 8010184:	bf18      	it	ne
 8010186:	f04f 35ff 	movne.w	r5, #4294967295
 801018a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801018e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010190:	065b      	lsls	r3, r3, #25
 8010192:	bf42      	ittt	mi
 8010194:	89a3      	ldrhmi	r3, [r4, #12]
 8010196:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 801019a:	81a3      	strhmi	r3, [r4, #12]
 801019c:	f7fb fff5 	bl	800c18a <__retarget_lock_close_recursive>
 80101a0:	4628      	mov	r0, r5
 80101a2:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80101a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101a8 <__sprint_r>:
 80101a8:	6893      	ldr	r3, [r2, #8]
 80101aa:	b510      	push	{r4, lr}
 80101ac:	4614      	mov	r4, r2
 80101ae:	b133      	cbz	r3, 80101be <__sprint_r+0x16>
 80101b0:	f000 f862 	bl	8010278 <__sfvwrite_r>
 80101b4:	2300      	movs	r3, #0
 80101b6:	60a3      	str	r3, [r4, #8]
 80101b8:	2300      	movs	r3, #0
 80101ba:	6063      	str	r3, [r4, #4]
 80101bc:	bd10      	pop	{r4, pc}
 80101be:	4618      	mov	r0, r3
 80101c0:	e7fa      	b.n	80101b8 <__sprint_r+0x10>

080101c2 <__ssputs_r>:
 80101c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101c6:	688e      	ldr	r6, [r1, #8]
 80101c8:	461f      	mov	r7, r3
 80101ca:	42be      	cmp	r6, r7
 80101cc:	680b      	ldr	r3, [r1, #0]
 80101ce:	4682      	mov	sl, r0
 80101d0:	460c      	mov	r4, r1
 80101d2:	4690      	mov	r8, r2
 80101d4:	d82d      	bhi.n	8010232 <__ssputs_r+0x70>
 80101d6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101da:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80101de:	d026      	beq.n	801022e <__ssputs_r+0x6c>
 80101e0:	6965      	ldr	r5, [r4, #20]
 80101e2:	6909      	ldr	r1, [r1, #16]
 80101e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101e8:	eba3 0901 	sub.w	r9, r3, r1
 80101ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80101f0:	1c7b      	adds	r3, r7, #1
 80101f2:	444b      	add	r3, r9
 80101f4:	106d      	asrs	r5, r5, #1
 80101f6:	429d      	cmp	r5, r3
 80101f8:	bf38      	it	cc
 80101fa:	461d      	movcc	r5, r3
 80101fc:	0553      	lsls	r3, r2, #21
 80101fe:	d527      	bpl.n	8010250 <__ssputs_r+0x8e>
 8010200:	4629      	mov	r1, r5
 8010202:	f7fa fc5b 	bl	800aabc <_malloc_r>
 8010206:	4606      	mov	r6, r0
 8010208:	b360      	cbz	r0, 8010264 <__ssputs_r+0xa2>
 801020a:	6921      	ldr	r1, [r4, #16]
 801020c:	464a      	mov	r2, r9
 801020e:	f7fb ffd3 	bl	800c1b8 <memcpy>
 8010212:	89a3      	ldrh	r3, [r4, #12]
 8010214:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801021c:	81a3      	strh	r3, [r4, #12]
 801021e:	6126      	str	r6, [r4, #16]
 8010220:	6165      	str	r5, [r4, #20]
 8010222:	444e      	add	r6, r9
 8010224:	eba5 0509 	sub.w	r5, r5, r9
 8010228:	6026      	str	r6, [r4, #0]
 801022a:	60a5      	str	r5, [r4, #8]
 801022c:	463e      	mov	r6, r7
 801022e:	42be      	cmp	r6, r7
 8010230:	d900      	bls.n	8010234 <__ssputs_r+0x72>
 8010232:	463e      	mov	r6, r7
 8010234:	6820      	ldr	r0, [r4, #0]
 8010236:	4632      	mov	r2, r6
 8010238:	4641      	mov	r1, r8
 801023a:	f000 f9bf 	bl	80105bc <memmove>
 801023e:	68a3      	ldr	r3, [r4, #8]
 8010240:	1b9b      	subs	r3, r3, r6
 8010242:	60a3      	str	r3, [r4, #8]
 8010244:	6823      	ldr	r3, [r4, #0]
 8010246:	4433      	add	r3, r6
 8010248:	6023      	str	r3, [r4, #0]
 801024a:	2000      	movs	r0, #0
 801024c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010250:	462a      	mov	r2, r5
 8010252:	f000 f9d5 	bl	8010600 <_realloc_r>
 8010256:	4606      	mov	r6, r0
 8010258:	2800      	cmp	r0, #0
 801025a:	d1e0      	bne.n	801021e <__ssputs_r+0x5c>
 801025c:	6921      	ldr	r1, [r4, #16]
 801025e:	4650      	mov	r0, sl
 8010260:	f7fc f82e 	bl	800c2c0 <_free_r>
 8010264:	230c      	movs	r3, #12
 8010266:	f8ca 3000 	str.w	r3, [sl]
 801026a:	89a3      	ldrh	r3, [r4, #12]
 801026c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010270:	81a3      	strh	r3, [r4, #12]
 8010272:	f04f 30ff 	mov.w	r0, #4294967295
 8010276:	e7e9      	b.n	801024c <__ssputs_r+0x8a>

08010278 <__sfvwrite_r>:
 8010278:	6893      	ldr	r3, [r2, #8]
 801027a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801027e:	4606      	mov	r6, r0
 8010280:	460c      	mov	r4, r1
 8010282:	4691      	mov	r9, r2
 8010284:	b91b      	cbnz	r3, 801028e <__sfvwrite_r+0x16>
 8010286:	2000      	movs	r0, #0
 8010288:	b003      	add	sp, #12
 801028a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801028e:	898b      	ldrh	r3, [r1, #12]
 8010290:	0718      	lsls	r0, r3, #28
 8010292:	d550      	bpl.n	8010336 <__sfvwrite_r+0xbe>
 8010294:	690b      	ldr	r3, [r1, #16]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d04d      	beq.n	8010336 <__sfvwrite_r+0xbe>
 801029a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801029e:	f8d9 8000 	ldr.w	r8, [r9]
 80102a2:	f013 0702 	ands.w	r7, r3, #2
 80102a6:	d16b      	bne.n	8010380 <__sfvwrite_r+0x108>
 80102a8:	f013 0301 	ands.w	r3, r3, #1
 80102ac:	f000 809c 	beq.w	80103e8 <__sfvwrite_r+0x170>
 80102b0:	4638      	mov	r0, r7
 80102b2:	46ba      	mov	sl, r7
 80102b4:	46bb      	mov	fp, r7
 80102b6:	f1bb 0f00 	cmp.w	fp, #0
 80102ba:	f000 8103 	beq.w	80104c4 <__sfvwrite_r+0x24c>
 80102be:	b950      	cbnz	r0, 80102d6 <__sfvwrite_r+0x5e>
 80102c0:	465a      	mov	r2, fp
 80102c2:	210a      	movs	r1, #10
 80102c4:	4650      	mov	r0, sl
 80102c6:	f7ef ff8b 	bl	80001e0 <memchr>
 80102ca:	2800      	cmp	r0, #0
 80102cc:	f000 8100 	beq.w	80104d0 <__sfvwrite_r+0x258>
 80102d0:	3001      	adds	r0, #1
 80102d2:	eba0 070a 	sub.w	r7, r0, sl
 80102d6:	6820      	ldr	r0, [r4, #0]
 80102d8:	6921      	ldr	r1, [r4, #16]
 80102da:	68a5      	ldr	r5, [r4, #8]
 80102dc:	6963      	ldr	r3, [r4, #20]
 80102de:	455f      	cmp	r7, fp
 80102e0:	463a      	mov	r2, r7
 80102e2:	bf28      	it	cs
 80102e4:	465a      	movcs	r2, fp
 80102e6:	4288      	cmp	r0, r1
 80102e8:	f240 80f5 	bls.w	80104d6 <__sfvwrite_r+0x25e>
 80102ec:	441d      	add	r5, r3
 80102ee:	42aa      	cmp	r2, r5
 80102f0:	f340 80f1 	ble.w	80104d6 <__sfvwrite_r+0x25e>
 80102f4:	4651      	mov	r1, sl
 80102f6:	462a      	mov	r2, r5
 80102f8:	f000 f960 	bl	80105bc <memmove>
 80102fc:	6823      	ldr	r3, [r4, #0]
 80102fe:	442b      	add	r3, r5
 8010300:	6023      	str	r3, [r4, #0]
 8010302:	4621      	mov	r1, r4
 8010304:	4630      	mov	r0, r6
 8010306:	f7fe fb2f 	bl	800e968 <_fflush_r>
 801030a:	2800      	cmp	r0, #0
 801030c:	d167      	bne.n	80103de <__sfvwrite_r+0x166>
 801030e:	1b7f      	subs	r7, r7, r5
 8010310:	f040 80f9 	bne.w	8010506 <__sfvwrite_r+0x28e>
 8010314:	4621      	mov	r1, r4
 8010316:	4630      	mov	r0, r6
 8010318:	f7fe fb26 	bl	800e968 <_fflush_r>
 801031c:	2800      	cmp	r0, #0
 801031e:	d15e      	bne.n	80103de <__sfvwrite_r+0x166>
 8010320:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010324:	1b5b      	subs	r3, r3, r5
 8010326:	44aa      	add	sl, r5
 8010328:	ebab 0b05 	sub.w	fp, fp, r5
 801032c:	f8c9 3008 	str.w	r3, [r9, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d1c0      	bne.n	80102b6 <__sfvwrite_r+0x3e>
 8010334:	e7a7      	b.n	8010286 <__sfvwrite_r+0xe>
 8010336:	4621      	mov	r1, r4
 8010338:	4630      	mov	r0, r6
 801033a:	f000 f8e9 	bl	8010510 <__swsetup_r>
 801033e:	2800      	cmp	r0, #0
 8010340:	d0ab      	beq.n	801029a <__sfvwrite_r+0x22>
 8010342:	f04f 30ff 	mov.w	r0, #4294967295
 8010346:	e79f      	b.n	8010288 <__sfvwrite_r+0x10>
 8010348:	e9d8 a500 	ldrd	sl, r5, [r8]
 801034c:	f108 0808 	add.w	r8, r8, #8
 8010350:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8010354:	69e1      	ldr	r1, [r4, #28]
 8010356:	2d00      	cmp	r5, #0
 8010358:	d0f6      	beq.n	8010348 <__sfvwrite_r+0xd0>
 801035a:	42bd      	cmp	r5, r7
 801035c:	462b      	mov	r3, r5
 801035e:	4652      	mov	r2, sl
 8010360:	bf28      	it	cs
 8010362:	463b      	movcs	r3, r7
 8010364:	4630      	mov	r0, r6
 8010366:	47d8      	blx	fp
 8010368:	2800      	cmp	r0, #0
 801036a:	dd38      	ble.n	80103de <__sfvwrite_r+0x166>
 801036c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010370:	1a1b      	subs	r3, r3, r0
 8010372:	4482      	add	sl, r0
 8010374:	1a2d      	subs	r5, r5, r0
 8010376:	f8c9 3008 	str.w	r3, [r9, #8]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1e8      	bne.n	8010350 <__sfvwrite_r+0xd8>
 801037e:	e782      	b.n	8010286 <__sfvwrite_r+0xe>
 8010380:	f04f 0a00 	mov.w	sl, #0
 8010384:	4f61      	ldr	r7, [pc, #388]	@ (801050c <__sfvwrite_r+0x294>)
 8010386:	4655      	mov	r5, sl
 8010388:	e7e2      	b.n	8010350 <__sfvwrite_r+0xd8>
 801038a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 801038e:	f108 0808 	add.w	r8, r8, #8
 8010392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010396:	6820      	ldr	r0, [r4, #0]
 8010398:	68a2      	ldr	r2, [r4, #8]
 801039a:	f1ba 0f00 	cmp.w	sl, #0
 801039e:	d0f4      	beq.n	801038a <__sfvwrite_r+0x112>
 80103a0:	0599      	lsls	r1, r3, #22
 80103a2:	d563      	bpl.n	801046c <__sfvwrite_r+0x1f4>
 80103a4:	4552      	cmp	r2, sl
 80103a6:	d836      	bhi.n	8010416 <__sfvwrite_r+0x19e>
 80103a8:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80103ac:	d033      	beq.n	8010416 <__sfvwrite_r+0x19e>
 80103ae:	6921      	ldr	r1, [r4, #16]
 80103b0:	6965      	ldr	r5, [r4, #20]
 80103b2:	eba0 0b01 	sub.w	fp, r0, r1
 80103b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103be:	f10b 0201 	add.w	r2, fp, #1
 80103c2:	106d      	asrs	r5, r5, #1
 80103c4:	4452      	add	r2, sl
 80103c6:	4295      	cmp	r5, r2
 80103c8:	bf38      	it	cc
 80103ca:	4615      	movcc	r5, r2
 80103cc:	055b      	lsls	r3, r3, #21
 80103ce:	d53d      	bpl.n	801044c <__sfvwrite_r+0x1d4>
 80103d0:	4629      	mov	r1, r5
 80103d2:	4630      	mov	r0, r6
 80103d4:	f7fa fb72 	bl	800aabc <_malloc_r>
 80103d8:	b948      	cbnz	r0, 80103ee <__sfvwrite_r+0x176>
 80103da:	230c      	movs	r3, #12
 80103dc:	6033      	str	r3, [r6, #0]
 80103de:	89a3      	ldrh	r3, [r4, #12]
 80103e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103e4:	81a3      	strh	r3, [r4, #12]
 80103e6:	e7ac      	b.n	8010342 <__sfvwrite_r+0xca>
 80103e8:	461f      	mov	r7, r3
 80103ea:	469a      	mov	sl, r3
 80103ec:	e7d1      	b.n	8010392 <__sfvwrite_r+0x11a>
 80103ee:	465a      	mov	r2, fp
 80103f0:	6921      	ldr	r1, [r4, #16]
 80103f2:	9001      	str	r0, [sp, #4]
 80103f4:	f7fb fee0 	bl	800c1b8 <memcpy>
 80103f8:	89a2      	ldrh	r2, [r4, #12]
 80103fa:	9b01      	ldr	r3, [sp, #4]
 80103fc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8010400:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010404:	81a2      	strh	r2, [r4, #12]
 8010406:	6123      	str	r3, [r4, #16]
 8010408:	6165      	str	r5, [r4, #20]
 801040a:	445b      	add	r3, fp
 801040c:	eba5 050b 	sub.w	r5, r5, fp
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	4652      	mov	r2, sl
 8010414:	60a5      	str	r5, [r4, #8]
 8010416:	4552      	cmp	r2, sl
 8010418:	bf28      	it	cs
 801041a:	4652      	movcs	r2, sl
 801041c:	6820      	ldr	r0, [r4, #0]
 801041e:	9201      	str	r2, [sp, #4]
 8010420:	4639      	mov	r1, r7
 8010422:	f000 f8cb 	bl	80105bc <memmove>
 8010426:	68a3      	ldr	r3, [r4, #8]
 8010428:	9a01      	ldr	r2, [sp, #4]
 801042a:	1a9b      	subs	r3, r3, r2
 801042c:	60a3      	str	r3, [r4, #8]
 801042e:	6823      	ldr	r3, [r4, #0]
 8010430:	4413      	add	r3, r2
 8010432:	4655      	mov	r5, sl
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801043a:	1b5b      	subs	r3, r3, r5
 801043c:	442f      	add	r7, r5
 801043e:	ebaa 0a05 	sub.w	sl, sl, r5
 8010442:	f8c9 3008 	str.w	r3, [r9, #8]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1a3      	bne.n	8010392 <__sfvwrite_r+0x11a>
 801044a:	e71c      	b.n	8010286 <__sfvwrite_r+0xe>
 801044c:	462a      	mov	r2, r5
 801044e:	4630      	mov	r0, r6
 8010450:	f000 f8d6 	bl	8010600 <_realloc_r>
 8010454:	4603      	mov	r3, r0
 8010456:	2800      	cmp	r0, #0
 8010458:	d1d5      	bne.n	8010406 <__sfvwrite_r+0x18e>
 801045a:	6921      	ldr	r1, [r4, #16]
 801045c:	4630      	mov	r0, r6
 801045e:	f7fb ff2f 	bl	800c2c0 <_free_r>
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010468:	81a3      	strh	r3, [r4, #12]
 801046a:	e7b6      	b.n	80103da <__sfvwrite_r+0x162>
 801046c:	6923      	ldr	r3, [r4, #16]
 801046e:	4283      	cmp	r3, r0
 8010470:	d302      	bcc.n	8010478 <__sfvwrite_r+0x200>
 8010472:	6961      	ldr	r1, [r4, #20]
 8010474:	4551      	cmp	r1, sl
 8010476:	d915      	bls.n	80104a4 <__sfvwrite_r+0x22c>
 8010478:	4552      	cmp	r2, sl
 801047a:	bf28      	it	cs
 801047c:	4652      	movcs	r2, sl
 801047e:	4639      	mov	r1, r7
 8010480:	4615      	mov	r5, r2
 8010482:	f000 f89b 	bl	80105bc <memmove>
 8010486:	68a3      	ldr	r3, [r4, #8]
 8010488:	6822      	ldr	r2, [r4, #0]
 801048a:	1b5b      	subs	r3, r3, r5
 801048c:	442a      	add	r2, r5
 801048e:	60a3      	str	r3, [r4, #8]
 8010490:	6022      	str	r2, [r4, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d1cf      	bne.n	8010436 <__sfvwrite_r+0x1be>
 8010496:	4621      	mov	r1, r4
 8010498:	4630      	mov	r0, r6
 801049a:	f7fe fa65 	bl	800e968 <_fflush_r>
 801049e:	2800      	cmp	r0, #0
 80104a0:	d0c9      	beq.n	8010436 <__sfvwrite_r+0x1be>
 80104a2:	e79c      	b.n	80103de <__sfvwrite_r+0x166>
 80104a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80104a8:	4553      	cmp	r3, sl
 80104aa:	bf28      	it	cs
 80104ac:	4653      	movcs	r3, sl
 80104ae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80104b0:	fb93 f3f1 	sdiv	r3, r3, r1
 80104b4:	463a      	mov	r2, r7
 80104b6:	434b      	muls	r3, r1
 80104b8:	4630      	mov	r0, r6
 80104ba:	69e1      	ldr	r1, [r4, #28]
 80104bc:	47a8      	blx	r5
 80104be:	1e05      	subs	r5, r0, #0
 80104c0:	dcb9      	bgt.n	8010436 <__sfvwrite_r+0x1be>
 80104c2:	e78c      	b.n	80103de <__sfvwrite_r+0x166>
 80104c4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80104c8:	2000      	movs	r0, #0
 80104ca:	f108 0808 	add.w	r8, r8, #8
 80104ce:	e6f2      	b.n	80102b6 <__sfvwrite_r+0x3e>
 80104d0:	f10b 0701 	add.w	r7, fp, #1
 80104d4:	e6ff      	b.n	80102d6 <__sfvwrite_r+0x5e>
 80104d6:	4293      	cmp	r3, r2
 80104d8:	dc08      	bgt.n	80104ec <__sfvwrite_r+0x274>
 80104da:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80104dc:	69e1      	ldr	r1, [r4, #28]
 80104de:	4652      	mov	r2, sl
 80104e0:	4630      	mov	r0, r6
 80104e2:	47a8      	blx	r5
 80104e4:	1e05      	subs	r5, r0, #0
 80104e6:	f73f af12 	bgt.w	801030e <__sfvwrite_r+0x96>
 80104ea:	e778      	b.n	80103de <__sfvwrite_r+0x166>
 80104ec:	4651      	mov	r1, sl
 80104ee:	9201      	str	r2, [sp, #4]
 80104f0:	f000 f864 	bl	80105bc <memmove>
 80104f4:	9a01      	ldr	r2, [sp, #4]
 80104f6:	68a3      	ldr	r3, [r4, #8]
 80104f8:	1a9b      	subs	r3, r3, r2
 80104fa:	60a3      	str	r3, [r4, #8]
 80104fc:	6823      	ldr	r3, [r4, #0]
 80104fe:	4413      	add	r3, r2
 8010500:	6023      	str	r3, [r4, #0]
 8010502:	4615      	mov	r5, r2
 8010504:	e703      	b.n	801030e <__sfvwrite_r+0x96>
 8010506:	2001      	movs	r0, #1
 8010508:	e70a      	b.n	8010320 <__sfvwrite_r+0xa8>
 801050a:	bf00      	nop
 801050c:	7ffffc00 	.word	0x7ffffc00

08010510 <__swsetup_r>:
 8010510:	b538      	push	{r3, r4, r5, lr}
 8010512:	4b29      	ldr	r3, [pc, #164]	@ (80105b8 <__swsetup_r+0xa8>)
 8010514:	4605      	mov	r5, r0
 8010516:	6818      	ldr	r0, [r3, #0]
 8010518:	460c      	mov	r4, r1
 801051a:	b118      	cbz	r0, 8010524 <__swsetup_r+0x14>
 801051c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801051e:	b90b      	cbnz	r3, 8010524 <__swsetup_r+0x14>
 8010520:	f7fb fc96 	bl	800be50 <__sinit>
 8010524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010528:	0719      	lsls	r1, r3, #28
 801052a:	d422      	bmi.n	8010572 <__swsetup_r+0x62>
 801052c:	06da      	lsls	r2, r3, #27
 801052e:	d407      	bmi.n	8010540 <__swsetup_r+0x30>
 8010530:	2209      	movs	r2, #9
 8010532:	602a      	str	r2, [r5, #0]
 8010534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010538:	81a3      	strh	r3, [r4, #12]
 801053a:	f04f 30ff 	mov.w	r0, #4294967295
 801053e:	e033      	b.n	80105a8 <__swsetup_r+0x98>
 8010540:	0758      	lsls	r0, r3, #29
 8010542:	d512      	bpl.n	801056a <__swsetup_r+0x5a>
 8010544:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010546:	b141      	cbz	r1, 801055a <__swsetup_r+0x4a>
 8010548:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801054c:	4299      	cmp	r1, r3
 801054e:	d002      	beq.n	8010556 <__swsetup_r+0x46>
 8010550:	4628      	mov	r0, r5
 8010552:	f7fb feb5 	bl	800c2c0 <_free_r>
 8010556:	2300      	movs	r3, #0
 8010558:	6323      	str	r3, [r4, #48]	@ 0x30
 801055a:	89a3      	ldrh	r3, [r4, #12]
 801055c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010560:	81a3      	strh	r3, [r4, #12]
 8010562:	2300      	movs	r3, #0
 8010564:	6063      	str	r3, [r4, #4]
 8010566:	6923      	ldr	r3, [r4, #16]
 8010568:	6023      	str	r3, [r4, #0]
 801056a:	89a3      	ldrh	r3, [r4, #12]
 801056c:	f043 0308 	orr.w	r3, r3, #8
 8010570:	81a3      	strh	r3, [r4, #12]
 8010572:	6923      	ldr	r3, [r4, #16]
 8010574:	b94b      	cbnz	r3, 801058a <__swsetup_r+0x7a>
 8010576:	89a3      	ldrh	r3, [r4, #12]
 8010578:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801057c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010580:	d003      	beq.n	801058a <__swsetup_r+0x7a>
 8010582:	4621      	mov	r1, r4
 8010584:	4628      	mov	r0, r5
 8010586:	f000 fa0b 	bl	80109a0 <__smakebuf_r>
 801058a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801058e:	f013 0201 	ands.w	r2, r3, #1
 8010592:	d00a      	beq.n	80105aa <__swsetup_r+0x9a>
 8010594:	2200      	movs	r2, #0
 8010596:	60a2      	str	r2, [r4, #8]
 8010598:	6962      	ldr	r2, [r4, #20]
 801059a:	4252      	negs	r2, r2
 801059c:	61a2      	str	r2, [r4, #24]
 801059e:	6922      	ldr	r2, [r4, #16]
 80105a0:	b942      	cbnz	r2, 80105b4 <__swsetup_r+0xa4>
 80105a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80105a6:	d1c5      	bne.n	8010534 <__swsetup_r+0x24>
 80105a8:	bd38      	pop	{r3, r4, r5, pc}
 80105aa:	0799      	lsls	r1, r3, #30
 80105ac:	bf58      	it	pl
 80105ae:	6962      	ldrpl	r2, [r4, #20]
 80105b0:	60a2      	str	r2, [r4, #8]
 80105b2:	e7f4      	b.n	801059e <__swsetup_r+0x8e>
 80105b4:	2000      	movs	r0, #0
 80105b6:	e7f7      	b.n	80105a8 <__swsetup_r+0x98>
 80105b8:	200005bc 	.word	0x200005bc

080105bc <memmove>:
 80105bc:	4288      	cmp	r0, r1
 80105be:	b510      	push	{r4, lr}
 80105c0:	eb01 0402 	add.w	r4, r1, r2
 80105c4:	d902      	bls.n	80105cc <memmove+0x10>
 80105c6:	4284      	cmp	r4, r0
 80105c8:	4623      	mov	r3, r4
 80105ca:	d807      	bhi.n	80105dc <memmove+0x20>
 80105cc:	1e43      	subs	r3, r0, #1
 80105ce:	42a1      	cmp	r1, r4
 80105d0:	d008      	beq.n	80105e4 <memmove+0x28>
 80105d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105da:	e7f8      	b.n	80105ce <memmove+0x12>
 80105dc:	4402      	add	r2, r0
 80105de:	4601      	mov	r1, r0
 80105e0:	428a      	cmp	r2, r1
 80105e2:	d100      	bne.n	80105e6 <memmove+0x2a>
 80105e4:	bd10      	pop	{r4, pc}
 80105e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80105ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80105ee:	e7f7      	b.n	80105e0 <memmove+0x24>

080105f0 <abort>:
 80105f0:	b508      	push	{r3, lr}
 80105f2:	2006      	movs	r0, #6
 80105f4:	f000 fa3a 	bl	8010a6c <raise>
 80105f8:	2001      	movs	r0, #1
 80105fa:	f7f1 ff93 	bl	8002524 <_exit>
	...

08010600 <_realloc_r>:
 8010600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010604:	4682      	mov	sl, r0
 8010606:	4693      	mov	fp, r2
 8010608:	460c      	mov	r4, r1
 801060a:	b929      	cbnz	r1, 8010618 <_realloc_r+0x18>
 801060c:	4611      	mov	r1, r2
 801060e:	b003      	add	sp, #12
 8010610:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010614:	f7fa ba52 	b.w	800aabc <_malloc_r>
 8010618:	f7fa fc8a 	bl	800af30 <__malloc_lock>
 801061c:	f10b 080b 	add.w	r8, fp, #11
 8010620:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010624:	f1b8 0f16 	cmp.w	r8, #22
 8010628:	f1a4 0908 	sub.w	r9, r4, #8
 801062c:	f025 0603 	bic.w	r6, r5, #3
 8010630:	d908      	bls.n	8010644 <_realloc_r+0x44>
 8010632:	f038 0807 	bics.w	r8, r8, #7
 8010636:	d507      	bpl.n	8010648 <_realloc_r+0x48>
 8010638:	230c      	movs	r3, #12
 801063a:	f8ca 3000 	str.w	r3, [sl]
 801063e:	f04f 0b00 	mov.w	fp, #0
 8010642:	e032      	b.n	80106aa <_realloc_r+0xaa>
 8010644:	f04f 0810 	mov.w	r8, #16
 8010648:	45c3      	cmp	fp, r8
 801064a:	d8f5      	bhi.n	8010638 <_realloc_r+0x38>
 801064c:	4546      	cmp	r6, r8
 801064e:	f280 8174 	bge.w	801093a <_realloc_r+0x33a>
 8010652:	4b9e      	ldr	r3, [pc, #632]	@ (80108cc <_realloc_r+0x2cc>)
 8010654:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8010658:	eb09 0106 	add.w	r1, r9, r6
 801065c:	458c      	cmp	ip, r1
 801065e:	6848      	ldr	r0, [r1, #4]
 8010660:	d005      	beq.n	801066e <_realloc_r+0x6e>
 8010662:	f020 0201 	bic.w	r2, r0, #1
 8010666:	440a      	add	r2, r1
 8010668:	6852      	ldr	r2, [r2, #4]
 801066a:	07d7      	lsls	r7, r2, #31
 801066c:	d449      	bmi.n	8010702 <_realloc_r+0x102>
 801066e:	f020 0003 	bic.w	r0, r0, #3
 8010672:	458c      	cmp	ip, r1
 8010674:	eb06 0700 	add.w	r7, r6, r0
 8010678:	d11b      	bne.n	80106b2 <_realloc_r+0xb2>
 801067a:	f108 0210 	add.w	r2, r8, #16
 801067e:	42ba      	cmp	r2, r7
 8010680:	dc41      	bgt.n	8010706 <_realloc_r+0x106>
 8010682:	eb09 0208 	add.w	r2, r9, r8
 8010686:	eba7 0708 	sub.w	r7, r7, r8
 801068a:	f047 0701 	orr.w	r7, r7, #1
 801068e:	609a      	str	r2, [r3, #8]
 8010690:	6057      	str	r7, [r2, #4]
 8010692:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010696:	f003 0301 	and.w	r3, r3, #1
 801069a:	ea43 0308 	orr.w	r3, r3, r8
 801069e:	f844 3c04 	str.w	r3, [r4, #-4]
 80106a2:	4650      	mov	r0, sl
 80106a4:	f7fa fc4a 	bl	800af3c <__malloc_unlock>
 80106a8:	46a3      	mov	fp, r4
 80106aa:	4658      	mov	r0, fp
 80106ac:	b003      	add	sp, #12
 80106ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106b2:	45b8      	cmp	r8, r7
 80106b4:	dc27      	bgt.n	8010706 <_realloc_r+0x106>
 80106b6:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80106ba:	60d3      	str	r3, [r2, #12]
 80106bc:	609a      	str	r2, [r3, #8]
 80106be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80106c2:	eba7 0008 	sub.w	r0, r7, r8
 80106c6:	280f      	cmp	r0, #15
 80106c8:	f003 0301 	and.w	r3, r3, #1
 80106cc:	eb09 0207 	add.w	r2, r9, r7
 80106d0:	f240 8135 	bls.w	801093e <_realloc_r+0x33e>
 80106d4:	eb09 0108 	add.w	r1, r9, r8
 80106d8:	ea48 0303 	orr.w	r3, r8, r3
 80106dc:	f040 0001 	orr.w	r0, r0, #1
 80106e0:	f8c9 3004 	str.w	r3, [r9, #4]
 80106e4:	6048      	str	r0, [r1, #4]
 80106e6:	6853      	ldr	r3, [r2, #4]
 80106e8:	f043 0301 	orr.w	r3, r3, #1
 80106ec:	6053      	str	r3, [r2, #4]
 80106ee:	3108      	adds	r1, #8
 80106f0:	4650      	mov	r0, sl
 80106f2:	f7fb fde5 	bl	800c2c0 <_free_r>
 80106f6:	4650      	mov	r0, sl
 80106f8:	f7fa fc20 	bl	800af3c <__malloc_unlock>
 80106fc:	f109 0b08 	add.w	fp, r9, #8
 8010700:	e7d3      	b.n	80106aa <_realloc_r+0xaa>
 8010702:	2000      	movs	r0, #0
 8010704:	4601      	mov	r1, r0
 8010706:	07ea      	lsls	r2, r5, #31
 8010708:	f100 80c7 	bmi.w	801089a <_realloc_r+0x29a>
 801070c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8010710:	eba9 0505 	sub.w	r5, r9, r5
 8010714:	686a      	ldr	r2, [r5, #4]
 8010716:	f022 0203 	bic.w	r2, r2, #3
 801071a:	4432      	add	r2, r6
 801071c:	9201      	str	r2, [sp, #4]
 801071e:	2900      	cmp	r1, #0
 8010720:	f000 8086 	beq.w	8010830 <_realloc_r+0x230>
 8010724:	458c      	cmp	ip, r1
 8010726:	eb00 0702 	add.w	r7, r0, r2
 801072a:	d149      	bne.n	80107c0 <_realloc_r+0x1c0>
 801072c:	f108 0210 	add.w	r2, r8, #16
 8010730:	42ba      	cmp	r2, r7
 8010732:	dc7d      	bgt.n	8010830 <_realloc_r+0x230>
 8010734:	46ab      	mov	fp, r5
 8010736:	68ea      	ldr	r2, [r5, #12]
 8010738:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 801073c:	60ca      	str	r2, [r1, #12]
 801073e:	6091      	str	r1, [r2, #8]
 8010740:	1f32      	subs	r2, r6, #4
 8010742:	2a24      	cmp	r2, #36	@ 0x24
 8010744:	d836      	bhi.n	80107b4 <_realloc_r+0x1b4>
 8010746:	2a13      	cmp	r2, #19
 8010748:	d932      	bls.n	80107b0 <_realloc_r+0x1b0>
 801074a:	6821      	ldr	r1, [r4, #0]
 801074c:	60a9      	str	r1, [r5, #8]
 801074e:	6861      	ldr	r1, [r4, #4]
 8010750:	60e9      	str	r1, [r5, #12]
 8010752:	2a1b      	cmp	r2, #27
 8010754:	d81a      	bhi.n	801078c <_realloc_r+0x18c>
 8010756:	3408      	adds	r4, #8
 8010758:	f105 0210 	add.w	r2, r5, #16
 801075c:	6821      	ldr	r1, [r4, #0]
 801075e:	6011      	str	r1, [r2, #0]
 8010760:	6861      	ldr	r1, [r4, #4]
 8010762:	6051      	str	r1, [r2, #4]
 8010764:	68a1      	ldr	r1, [r4, #8]
 8010766:	6091      	str	r1, [r2, #8]
 8010768:	eb05 0208 	add.w	r2, r5, r8
 801076c:	eba7 0708 	sub.w	r7, r7, r8
 8010770:	f047 0701 	orr.w	r7, r7, #1
 8010774:	609a      	str	r2, [r3, #8]
 8010776:	6057      	str	r7, [r2, #4]
 8010778:	686b      	ldr	r3, [r5, #4]
 801077a:	f003 0301 	and.w	r3, r3, #1
 801077e:	ea43 0308 	orr.w	r3, r3, r8
 8010782:	606b      	str	r3, [r5, #4]
 8010784:	4650      	mov	r0, sl
 8010786:	f7fa fbd9 	bl	800af3c <__malloc_unlock>
 801078a:	e78e      	b.n	80106aa <_realloc_r+0xaa>
 801078c:	68a1      	ldr	r1, [r4, #8]
 801078e:	6129      	str	r1, [r5, #16]
 8010790:	68e1      	ldr	r1, [r4, #12]
 8010792:	6169      	str	r1, [r5, #20]
 8010794:	2a24      	cmp	r2, #36	@ 0x24
 8010796:	bf01      	itttt	eq
 8010798:	6922      	ldreq	r2, [r4, #16]
 801079a:	61aa      	streq	r2, [r5, #24]
 801079c:	6961      	ldreq	r1, [r4, #20]
 801079e:	61e9      	streq	r1, [r5, #28]
 80107a0:	bf19      	ittee	ne
 80107a2:	3410      	addne	r4, #16
 80107a4:	f105 0218 	addne.w	r2, r5, #24
 80107a8:	f105 0220 	addeq.w	r2, r5, #32
 80107ac:	3418      	addeq	r4, #24
 80107ae:	e7d5      	b.n	801075c <_realloc_r+0x15c>
 80107b0:	465a      	mov	r2, fp
 80107b2:	e7d3      	b.n	801075c <_realloc_r+0x15c>
 80107b4:	4621      	mov	r1, r4
 80107b6:	4658      	mov	r0, fp
 80107b8:	f7ff ff00 	bl	80105bc <memmove>
 80107bc:	4b43      	ldr	r3, [pc, #268]	@ (80108cc <_realloc_r+0x2cc>)
 80107be:	e7d3      	b.n	8010768 <_realloc_r+0x168>
 80107c0:	45b8      	cmp	r8, r7
 80107c2:	dc35      	bgt.n	8010830 <_realloc_r+0x230>
 80107c4:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80107c8:	4628      	mov	r0, r5
 80107ca:	60d3      	str	r3, [r2, #12]
 80107cc:	609a      	str	r2, [r3, #8]
 80107ce:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80107d2:	68eb      	ldr	r3, [r5, #12]
 80107d4:	60d3      	str	r3, [r2, #12]
 80107d6:	609a      	str	r2, [r3, #8]
 80107d8:	1f32      	subs	r2, r6, #4
 80107da:	2a24      	cmp	r2, #36	@ 0x24
 80107dc:	d824      	bhi.n	8010828 <_realloc_r+0x228>
 80107de:	2a13      	cmp	r2, #19
 80107e0:	d908      	bls.n	80107f4 <_realloc_r+0x1f4>
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	60ab      	str	r3, [r5, #8]
 80107e6:	6863      	ldr	r3, [r4, #4]
 80107e8:	60eb      	str	r3, [r5, #12]
 80107ea:	2a1b      	cmp	r2, #27
 80107ec:	d80a      	bhi.n	8010804 <_realloc_r+0x204>
 80107ee:	3408      	adds	r4, #8
 80107f0:	f105 0010 	add.w	r0, r5, #16
 80107f4:	6823      	ldr	r3, [r4, #0]
 80107f6:	6003      	str	r3, [r0, #0]
 80107f8:	6863      	ldr	r3, [r4, #4]
 80107fa:	6043      	str	r3, [r0, #4]
 80107fc:	68a3      	ldr	r3, [r4, #8]
 80107fe:	6083      	str	r3, [r0, #8]
 8010800:	46a9      	mov	r9, r5
 8010802:	e75c      	b.n	80106be <_realloc_r+0xbe>
 8010804:	68a3      	ldr	r3, [r4, #8]
 8010806:	612b      	str	r3, [r5, #16]
 8010808:	68e3      	ldr	r3, [r4, #12]
 801080a:	616b      	str	r3, [r5, #20]
 801080c:	2a24      	cmp	r2, #36	@ 0x24
 801080e:	bf01      	itttt	eq
 8010810:	6923      	ldreq	r3, [r4, #16]
 8010812:	61ab      	streq	r3, [r5, #24]
 8010814:	6963      	ldreq	r3, [r4, #20]
 8010816:	61eb      	streq	r3, [r5, #28]
 8010818:	bf19      	ittee	ne
 801081a:	3410      	addne	r4, #16
 801081c:	f105 0018 	addne.w	r0, r5, #24
 8010820:	f105 0020 	addeq.w	r0, r5, #32
 8010824:	3418      	addeq	r4, #24
 8010826:	e7e5      	b.n	80107f4 <_realloc_r+0x1f4>
 8010828:	4621      	mov	r1, r4
 801082a:	f7ff fec7 	bl	80105bc <memmove>
 801082e:	e7e7      	b.n	8010800 <_realloc_r+0x200>
 8010830:	9b01      	ldr	r3, [sp, #4]
 8010832:	4598      	cmp	r8, r3
 8010834:	dc31      	bgt.n	801089a <_realloc_r+0x29a>
 8010836:	4628      	mov	r0, r5
 8010838:	68eb      	ldr	r3, [r5, #12]
 801083a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801083e:	60d3      	str	r3, [r2, #12]
 8010840:	609a      	str	r2, [r3, #8]
 8010842:	1f32      	subs	r2, r6, #4
 8010844:	2a24      	cmp	r2, #36	@ 0x24
 8010846:	d824      	bhi.n	8010892 <_realloc_r+0x292>
 8010848:	2a13      	cmp	r2, #19
 801084a:	d908      	bls.n	801085e <_realloc_r+0x25e>
 801084c:	6823      	ldr	r3, [r4, #0]
 801084e:	60ab      	str	r3, [r5, #8]
 8010850:	6863      	ldr	r3, [r4, #4]
 8010852:	60eb      	str	r3, [r5, #12]
 8010854:	2a1b      	cmp	r2, #27
 8010856:	d80a      	bhi.n	801086e <_realloc_r+0x26e>
 8010858:	3408      	adds	r4, #8
 801085a:	f105 0010 	add.w	r0, r5, #16
 801085e:	6823      	ldr	r3, [r4, #0]
 8010860:	6003      	str	r3, [r0, #0]
 8010862:	6863      	ldr	r3, [r4, #4]
 8010864:	6043      	str	r3, [r0, #4]
 8010866:	68a3      	ldr	r3, [r4, #8]
 8010868:	6083      	str	r3, [r0, #8]
 801086a:	9f01      	ldr	r7, [sp, #4]
 801086c:	e7c8      	b.n	8010800 <_realloc_r+0x200>
 801086e:	68a3      	ldr	r3, [r4, #8]
 8010870:	612b      	str	r3, [r5, #16]
 8010872:	68e3      	ldr	r3, [r4, #12]
 8010874:	616b      	str	r3, [r5, #20]
 8010876:	2a24      	cmp	r2, #36	@ 0x24
 8010878:	bf01      	itttt	eq
 801087a:	6923      	ldreq	r3, [r4, #16]
 801087c:	61ab      	streq	r3, [r5, #24]
 801087e:	6963      	ldreq	r3, [r4, #20]
 8010880:	61eb      	streq	r3, [r5, #28]
 8010882:	bf19      	ittee	ne
 8010884:	3410      	addne	r4, #16
 8010886:	f105 0018 	addne.w	r0, r5, #24
 801088a:	f105 0020 	addeq.w	r0, r5, #32
 801088e:	3418      	addeq	r4, #24
 8010890:	e7e5      	b.n	801085e <_realloc_r+0x25e>
 8010892:	4621      	mov	r1, r4
 8010894:	f7ff fe92 	bl	80105bc <memmove>
 8010898:	e7e7      	b.n	801086a <_realloc_r+0x26a>
 801089a:	4659      	mov	r1, fp
 801089c:	4650      	mov	r0, sl
 801089e:	f7fa f90d 	bl	800aabc <_malloc_r>
 80108a2:	4683      	mov	fp, r0
 80108a4:	b918      	cbnz	r0, 80108ae <_realloc_r+0x2ae>
 80108a6:	4650      	mov	r0, sl
 80108a8:	f7fa fb48 	bl	800af3c <__malloc_unlock>
 80108ac:	e6c7      	b.n	801063e <_realloc_r+0x3e>
 80108ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80108b2:	f023 0301 	bic.w	r3, r3, #1
 80108b6:	444b      	add	r3, r9
 80108b8:	f1a0 0208 	sub.w	r2, r0, #8
 80108bc:	4293      	cmp	r3, r2
 80108be:	d107      	bne.n	80108d0 <_realloc_r+0x2d0>
 80108c0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80108c4:	f027 0703 	bic.w	r7, r7, #3
 80108c8:	4437      	add	r7, r6
 80108ca:	e6f8      	b.n	80106be <_realloc_r+0xbe>
 80108cc:	2000003c 	.word	0x2000003c
 80108d0:	1f32      	subs	r2, r6, #4
 80108d2:	2a24      	cmp	r2, #36	@ 0x24
 80108d4:	d82d      	bhi.n	8010932 <_realloc_r+0x332>
 80108d6:	2a13      	cmp	r2, #19
 80108d8:	d928      	bls.n	801092c <_realloc_r+0x32c>
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	6003      	str	r3, [r0, #0]
 80108de:	6863      	ldr	r3, [r4, #4]
 80108e0:	6043      	str	r3, [r0, #4]
 80108e2:	2a1b      	cmp	r2, #27
 80108e4:	d80e      	bhi.n	8010904 <_realloc_r+0x304>
 80108e6:	f104 0208 	add.w	r2, r4, #8
 80108ea:	f100 0308 	add.w	r3, r0, #8
 80108ee:	6811      	ldr	r1, [r2, #0]
 80108f0:	6019      	str	r1, [r3, #0]
 80108f2:	6851      	ldr	r1, [r2, #4]
 80108f4:	6059      	str	r1, [r3, #4]
 80108f6:	6892      	ldr	r2, [r2, #8]
 80108f8:	609a      	str	r2, [r3, #8]
 80108fa:	4621      	mov	r1, r4
 80108fc:	4650      	mov	r0, sl
 80108fe:	f7fb fcdf 	bl	800c2c0 <_free_r>
 8010902:	e73f      	b.n	8010784 <_realloc_r+0x184>
 8010904:	68a3      	ldr	r3, [r4, #8]
 8010906:	6083      	str	r3, [r0, #8]
 8010908:	68e3      	ldr	r3, [r4, #12]
 801090a:	60c3      	str	r3, [r0, #12]
 801090c:	2a24      	cmp	r2, #36	@ 0x24
 801090e:	bf01      	itttt	eq
 8010910:	6923      	ldreq	r3, [r4, #16]
 8010912:	6103      	streq	r3, [r0, #16]
 8010914:	6961      	ldreq	r1, [r4, #20]
 8010916:	6141      	streq	r1, [r0, #20]
 8010918:	bf19      	ittee	ne
 801091a:	f104 0210 	addne.w	r2, r4, #16
 801091e:	f100 0310 	addne.w	r3, r0, #16
 8010922:	f104 0218 	addeq.w	r2, r4, #24
 8010926:	f100 0318 	addeq.w	r3, r0, #24
 801092a:	e7e0      	b.n	80108ee <_realloc_r+0x2ee>
 801092c:	4603      	mov	r3, r0
 801092e:	4622      	mov	r2, r4
 8010930:	e7dd      	b.n	80108ee <_realloc_r+0x2ee>
 8010932:	4621      	mov	r1, r4
 8010934:	f7ff fe42 	bl	80105bc <memmove>
 8010938:	e7df      	b.n	80108fa <_realloc_r+0x2fa>
 801093a:	4637      	mov	r7, r6
 801093c:	e6bf      	b.n	80106be <_realloc_r+0xbe>
 801093e:	431f      	orrs	r7, r3
 8010940:	f8c9 7004 	str.w	r7, [r9, #4]
 8010944:	6853      	ldr	r3, [r2, #4]
 8010946:	f043 0301 	orr.w	r3, r3, #1
 801094a:	6053      	str	r3, [r2, #4]
 801094c:	e6d3      	b.n	80106f6 <_realloc_r+0xf6>
 801094e:	bf00      	nop

08010950 <__swhatbuf_r>:
 8010950:	b570      	push	{r4, r5, r6, lr}
 8010952:	460c      	mov	r4, r1
 8010954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010958:	2900      	cmp	r1, #0
 801095a:	b096      	sub	sp, #88	@ 0x58
 801095c:	4615      	mov	r5, r2
 801095e:	461e      	mov	r6, r3
 8010960:	da07      	bge.n	8010972 <__swhatbuf_r+0x22>
 8010962:	89a1      	ldrh	r1, [r4, #12]
 8010964:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8010968:	d117      	bne.n	801099a <__swhatbuf_r+0x4a>
 801096a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801096e:	4608      	mov	r0, r1
 8010970:	e00f      	b.n	8010992 <__swhatbuf_r+0x42>
 8010972:	466a      	mov	r2, sp
 8010974:	f000 f882 	bl	8010a7c <_fstat_r>
 8010978:	2800      	cmp	r0, #0
 801097a:	dbf2      	blt.n	8010962 <__swhatbuf_r+0x12>
 801097c:	9901      	ldr	r1, [sp, #4]
 801097e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010982:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010986:	4259      	negs	r1, r3
 8010988:	4159      	adcs	r1, r3
 801098a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801098e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010992:	6031      	str	r1, [r6, #0]
 8010994:	602b      	str	r3, [r5, #0]
 8010996:	b016      	add	sp, #88	@ 0x58
 8010998:	bd70      	pop	{r4, r5, r6, pc}
 801099a:	2100      	movs	r1, #0
 801099c:	2340      	movs	r3, #64	@ 0x40
 801099e:	e7e6      	b.n	801096e <__swhatbuf_r+0x1e>

080109a0 <__smakebuf_r>:
 80109a0:	898b      	ldrh	r3, [r1, #12]
 80109a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109a4:	079d      	lsls	r5, r3, #30
 80109a6:	4606      	mov	r6, r0
 80109a8:	460c      	mov	r4, r1
 80109aa:	d507      	bpl.n	80109bc <__smakebuf_r+0x1c>
 80109ac:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80109b0:	6023      	str	r3, [r4, #0]
 80109b2:	6123      	str	r3, [r4, #16]
 80109b4:	2301      	movs	r3, #1
 80109b6:	6163      	str	r3, [r4, #20]
 80109b8:	b003      	add	sp, #12
 80109ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109bc:	ab01      	add	r3, sp, #4
 80109be:	466a      	mov	r2, sp
 80109c0:	f7ff ffc6 	bl	8010950 <__swhatbuf_r>
 80109c4:	9f00      	ldr	r7, [sp, #0]
 80109c6:	4605      	mov	r5, r0
 80109c8:	4639      	mov	r1, r7
 80109ca:	4630      	mov	r0, r6
 80109cc:	f7fa f876 	bl	800aabc <_malloc_r>
 80109d0:	b948      	cbnz	r0, 80109e6 <__smakebuf_r+0x46>
 80109d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109d6:	059a      	lsls	r2, r3, #22
 80109d8:	d4ee      	bmi.n	80109b8 <__smakebuf_r+0x18>
 80109da:	f023 0303 	bic.w	r3, r3, #3
 80109de:	f043 0302 	orr.w	r3, r3, #2
 80109e2:	81a3      	strh	r3, [r4, #12]
 80109e4:	e7e2      	b.n	80109ac <__smakebuf_r+0xc>
 80109e6:	89a3      	ldrh	r3, [r4, #12]
 80109e8:	6020      	str	r0, [r4, #0]
 80109ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109ee:	81a3      	strh	r3, [r4, #12]
 80109f0:	9b01      	ldr	r3, [sp, #4]
 80109f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80109f6:	b15b      	cbz	r3, 8010a10 <__smakebuf_r+0x70>
 80109f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109fc:	4630      	mov	r0, r6
 80109fe:	f000 f84f 	bl	8010aa0 <_isatty_r>
 8010a02:	b128      	cbz	r0, 8010a10 <__smakebuf_r+0x70>
 8010a04:	89a3      	ldrh	r3, [r4, #12]
 8010a06:	f023 0303 	bic.w	r3, r3, #3
 8010a0a:	f043 0301 	orr.w	r3, r3, #1
 8010a0e:	81a3      	strh	r3, [r4, #12]
 8010a10:	89a3      	ldrh	r3, [r4, #12]
 8010a12:	431d      	orrs	r5, r3
 8010a14:	81a5      	strh	r5, [r4, #12]
 8010a16:	e7cf      	b.n	80109b8 <__smakebuf_r+0x18>

08010a18 <_raise_r>:
 8010a18:	291f      	cmp	r1, #31
 8010a1a:	b538      	push	{r3, r4, r5, lr}
 8010a1c:	4605      	mov	r5, r0
 8010a1e:	460c      	mov	r4, r1
 8010a20:	d904      	bls.n	8010a2c <_raise_r+0x14>
 8010a22:	2316      	movs	r3, #22
 8010a24:	6003      	str	r3, [r0, #0]
 8010a26:	f04f 30ff 	mov.w	r0, #4294967295
 8010a2a:	bd38      	pop	{r3, r4, r5, pc}
 8010a2c:	f8d0 2138 	ldr.w	r2, [r0, #312]	@ 0x138
 8010a30:	b112      	cbz	r2, 8010a38 <_raise_r+0x20>
 8010a32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a36:	b94b      	cbnz	r3, 8010a4c <_raise_r+0x34>
 8010a38:	4628      	mov	r0, r5
 8010a3a:	f000 f853 	bl	8010ae4 <_getpid_r>
 8010a3e:	4622      	mov	r2, r4
 8010a40:	4601      	mov	r1, r0
 8010a42:	4628      	mov	r0, r5
 8010a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a48:	f000 b83a 	b.w	8010ac0 <_kill_r>
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d00a      	beq.n	8010a66 <_raise_r+0x4e>
 8010a50:	1c59      	adds	r1, r3, #1
 8010a52:	d103      	bne.n	8010a5c <_raise_r+0x44>
 8010a54:	2316      	movs	r3, #22
 8010a56:	6003      	str	r3, [r0, #0]
 8010a58:	2001      	movs	r0, #1
 8010a5a:	e7e6      	b.n	8010a2a <_raise_r+0x12>
 8010a5c:	2100      	movs	r1, #0
 8010a5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010a62:	4620      	mov	r0, r4
 8010a64:	4798      	blx	r3
 8010a66:	2000      	movs	r0, #0
 8010a68:	e7df      	b.n	8010a2a <_raise_r+0x12>
	...

08010a6c <raise>:
 8010a6c:	4b02      	ldr	r3, [pc, #8]	@ (8010a78 <raise+0xc>)
 8010a6e:	4601      	mov	r1, r0
 8010a70:	6818      	ldr	r0, [r3, #0]
 8010a72:	f7ff bfd1 	b.w	8010a18 <_raise_r>
 8010a76:	bf00      	nop
 8010a78:	200005bc 	.word	0x200005bc

08010a7c <_fstat_r>:
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4d07      	ldr	r5, [pc, #28]	@ (8010a9c <_fstat_r+0x20>)
 8010a80:	2300      	movs	r3, #0
 8010a82:	4604      	mov	r4, r0
 8010a84:	4608      	mov	r0, r1
 8010a86:	4611      	mov	r1, r2
 8010a88:	602b      	str	r3, [r5, #0]
 8010a8a:	f7f1 fd9b 	bl	80025c4 <_fstat>
 8010a8e:	1c43      	adds	r3, r0, #1
 8010a90:	d102      	bne.n	8010a98 <_fstat_r+0x1c>
 8010a92:	682b      	ldr	r3, [r5, #0]
 8010a94:	b103      	cbz	r3, 8010a98 <_fstat_r+0x1c>
 8010a96:	6023      	str	r3, [r4, #0]
 8010a98:	bd38      	pop	{r3, r4, r5, pc}
 8010a9a:	bf00      	nop
 8010a9c:	20001100 	.word	0x20001100

08010aa0 <_isatty_r>:
 8010aa0:	b538      	push	{r3, r4, r5, lr}
 8010aa2:	4d06      	ldr	r5, [pc, #24]	@ (8010abc <_isatty_r+0x1c>)
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	4604      	mov	r4, r0
 8010aa8:	4608      	mov	r0, r1
 8010aaa:	602b      	str	r3, [r5, #0]
 8010aac:	f7f1 fd9a 	bl	80025e4 <_isatty>
 8010ab0:	1c43      	adds	r3, r0, #1
 8010ab2:	d102      	bne.n	8010aba <_isatty_r+0x1a>
 8010ab4:	682b      	ldr	r3, [r5, #0]
 8010ab6:	b103      	cbz	r3, 8010aba <_isatty_r+0x1a>
 8010ab8:	6023      	str	r3, [r4, #0]
 8010aba:	bd38      	pop	{r3, r4, r5, pc}
 8010abc:	20001100 	.word	0x20001100

08010ac0 <_kill_r>:
 8010ac0:	b538      	push	{r3, r4, r5, lr}
 8010ac2:	4d07      	ldr	r5, [pc, #28]	@ (8010ae0 <_kill_r+0x20>)
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	4604      	mov	r4, r0
 8010ac8:	4608      	mov	r0, r1
 8010aca:	4611      	mov	r1, r2
 8010acc:	602b      	str	r3, [r5, #0]
 8010ace:	f7f1 fd19 	bl	8002504 <_kill>
 8010ad2:	1c43      	adds	r3, r0, #1
 8010ad4:	d102      	bne.n	8010adc <_kill_r+0x1c>
 8010ad6:	682b      	ldr	r3, [r5, #0]
 8010ad8:	b103      	cbz	r3, 8010adc <_kill_r+0x1c>
 8010ada:	6023      	str	r3, [r4, #0]
 8010adc:	bd38      	pop	{r3, r4, r5, pc}
 8010ade:	bf00      	nop
 8010ae0:	20001100 	.word	0x20001100

08010ae4 <_getpid_r>:
 8010ae4:	f7f1 bd06 	b.w	80024f4 <_getpid>

08010ae8 <atan2f>:
 8010ae8:	f000 b8b2 	b.w	8010c50 <__ieee754_atan2f>

08010aec <log10f>:
 8010aec:	b508      	push	{r3, lr}
 8010aee:	ed2d 8b02 	vpush	{d8}
 8010af2:	eeb0 8a40 	vmov.f32	s16, s0
 8010af6:	f000 f94b 	bl	8010d90 <__ieee754_log10f>
 8010afa:	eeb4 8a48 	vcmp.f32	s16, s16
 8010afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b02:	d60f      	bvs.n	8010b24 <log10f+0x38>
 8010b04:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b0c:	d80a      	bhi.n	8010b24 <log10f+0x38>
 8010b0e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b16:	d108      	bne.n	8010b2a <log10f+0x3e>
 8010b18:	f7fb fb0c 	bl	800c134 <__errno>
 8010b1c:	2322      	movs	r3, #34	@ 0x22
 8010b1e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010b40 <log10f+0x54>
 8010b22:	6003      	str	r3, [r0, #0]
 8010b24:	ecbd 8b02 	vpop	{d8}
 8010b28:	bd08      	pop	{r3, pc}
 8010b2a:	f7fb fb03 	bl	800c134 <__errno>
 8010b2e:	ecbd 8b02 	vpop	{d8}
 8010b32:	2321      	movs	r3, #33	@ 0x21
 8010b34:	6003      	str	r3, [r0, #0]
 8010b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010b3a:	4802      	ldr	r0, [pc, #8]	@ (8010b44 <log10f+0x58>)
 8010b3c:	f7fb bb54 	b.w	800c1e8 <nanf>
 8010b40:	ff800000 	.word	0xff800000
 8010b44:	08011bbb 	.word	0x08011bbb

08010b48 <powf>:
 8010b48:	b508      	push	{r3, lr}
 8010b4a:	ed2d 8b04 	vpush	{d8-d9}
 8010b4e:	eeb0 8a60 	vmov.f32	s16, s1
 8010b52:	eeb0 9a40 	vmov.f32	s18, s0
 8010b56:	f000 f973 	bl	8010e40 <__ieee754_powf>
 8010b5a:	eeb4 8a48 	vcmp.f32	s16, s16
 8010b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b62:	eef0 8a40 	vmov.f32	s17, s0
 8010b66:	d63e      	bvs.n	8010be6 <powf+0x9e>
 8010b68:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b70:	d112      	bne.n	8010b98 <powf+0x50>
 8010b72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b7a:	d039      	beq.n	8010bf0 <powf+0xa8>
 8010b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8010b80:	f000 f858 	bl	8010c34 <finitef>
 8010b84:	b378      	cbz	r0, 8010be6 <powf+0x9e>
 8010b86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8e:	d52a      	bpl.n	8010be6 <powf+0x9e>
 8010b90:	f7fb fad0 	bl	800c134 <__errno>
 8010b94:	2322      	movs	r3, #34	@ 0x22
 8010b96:	e014      	b.n	8010bc2 <powf+0x7a>
 8010b98:	f000 f84c 	bl	8010c34 <finitef>
 8010b9c:	b998      	cbnz	r0, 8010bc6 <powf+0x7e>
 8010b9e:	eeb0 0a49 	vmov.f32	s0, s18
 8010ba2:	f000 f847 	bl	8010c34 <finitef>
 8010ba6:	b170      	cbz	r0, 8010bc6 <powf+0x7e>
 8010ba8:	eeb0 0a48 	vmov.f32	s0, s16
 8010bac:	f000 f842 	bl	8010c34 <finitef>
 8010bb0:	b148      	cbz	r0, 8010bc6 <powf+0x7e>
 8010bb2:	eef4 8a68 	vcmp.f32	s17, s17
 8010bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bba:	d7e9      	bvc.n	8010b90 <powf+0x48>
 8010bbc:	f7fb faba 	bl	800c134 <__errno>
 8010bc0:	2321      	movs	r3, #33	@ 0x21
 8010bc2:	6003      	str	r3, [r0, #0]
 8010bc4:	e00f      	b.n	8010be6 <powf+0x9e>
 8010bc6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bce:	d10a      	bne.n	8010be6 <powf+0x9e>
 8010bd0:	eeb0 0a49 	vmov.f32	s0, s18
 8010bd4:	f000 f82e 	bl	8010c34 <finitef>
 8010bd8:	b128      	cbz	r0, 8010be6 <powf+0x9e>
 8010bda:	eeb0 0a48 	vmov.f32	s0, s16
 8010bde:	f000 f829 	bl	8010c34 <finitef>
 8010be2:	2800      	cmp	r0, #0
 8010be4:	d1d4      	bne.n	8010b90 <powf+0x48>
 8010be6:	eeb0 0a68 	vmov.f32	s0, s17
 8010bea:	ecbd 8b04 	vpop	{d8-d9}
 8010bee:	bd08      	pop	{r3, pc}
 8010bf0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010bf4:	e7f7      	b.n	8010be6 <powf+0x9e>
	...

08010bf8 <sqrtf>:
 8010bf8:	b508      	push	{r3, lr}
 8010bfa:	ed2d 8b02 	vpush	{d8}
 8010bfe:	eeb0 8a40 	vmov.f32	s16, s0
 8010c02:	f000 f821 	bl	8010c48 <__ieee754_sqrtf>
 8010c06:	eeb4 8a48 	vcmp.f32	s16, s16
 8010c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0e:	d60c      	bvs.n	8010c2a <sqrtf+0x32>
 8010c10:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010c30 <sqrtf+0x38>
 8010c14:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1c:	d505      	bpl.n	8010c2a <sqrtf+0x32>
 8010c1e:	f7fb fa89 	bl	800c134 <__errno>
 8010c22:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010c26:	2321      	movs	r3, #33	@ 0x21
 8010c28:	6003      	str	r3, [r0, #0]
 8010c2a:	ecbd 8b02 	vpop	{d8}
 8010c2e:	bd08      	pop	{r3, pc}
 8010c30:	00000000 	.word	0x00000000

08010c34 <finitef>:
 8010c34:	ee10 3a10 	vmov	r3, s0
 8010c38:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8010c3c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8010c40:	bfac      	ite	ge
 8010c42:	2000      	movge	r0, #0
 8010c44:	2001      	movlt	r0, #1
 8010c46:	4770      	bx	lr

08010c48 <__ieee754_sqrtf>:
 8010c48:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010c4c:	4770      	bx	lr
	...

08010c50 <__ieee754_atan2f>:
 8010c50:	ee10 2a90 	vmov	r2, s1
 8010c54:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010c58:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010c5c:	b510      	push	{r4, lr}
 8010c5e:	eef0 7a40 	vmov.f32	s15, s0
 8010c62:	d806      	bhi.n	8010c72 <__ieee754_atan2f+0x22>
 8010c64:	ee10 0a10 	vmov	r0, s0
 8010c68:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010c6c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010c70:	d904      	bls.n	8010c7c <__ieee754_atan2f+0x2c>
 8010c72:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010c76:	eeb0 0a67 	vmov.f32	s0, s15
 8010c7a:	bd10      	pop	{r4, pc}
 8010c7c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010c80:	d103      	bne.n	8010c8a <__ieee754_atan2f+0x3a>
 8010c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c86:	f000 bba9 	b.w	80113dc <atanf>
 8010c8a:	1794      	asrs	r4, r2, #30
 8010c8c:	f004 0402 	and.w	r4, r4, #2
 8010c90:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010c94:	b943      	cbnz	r3, 8010ca8 <__ieee754_atan2f+0x58>
 8010c96:	2c02      	cmp	r4, #2
 8010c98:	d05e      	beq.n	8010d58 <__ieee754_atan2f+0x108>
 8010c9a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010d6c <__ieee754_atan2f+0x11c>
 8010c9e:	2c03      	cmp	r4, #3
 8010ca0:	bf08      	it	eq
 8010ca2:	eef0 7a47 	vmoveq.f32	s15, s14
 8010ca6:	e7e6      	b.n	8010c76 <__ieee754_atan2f+0x26>
 8010ca8:	b941      	cbnz	r1, 8010cbc <__ieee754_atan2f+0x6c>
 8010caa:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8010d70 <__ieee754_atan2f+0x120>
 8010cae:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010d74 <__ieee754_atan2f+0x124>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	bfa8      	it	ge
 8010cb6:	eef0 7a47 	vmovge.f32	s15, s14
 8010cba:	e7dc      	b.n	8010c76 <__ieee754_atan2f+0x26>
 8010cbc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010cc0:	d110      	bne.n	8010ce4 <__ieee754_atan2f+0x94>
 8010cc2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010cc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8010cca:	d107      	bne.n	8010cdc <__ieee754_atan2f+0x8c>
 8010ccc:	2c02      	cmp	r4, #2
 8010cce:	d846      	bhi.n	8010d5e <__ieee754_atan2f+0x10e>
 8010cd0:	4b29      	ldr	r3, [pc, #164]	@ (8010d78 <__ieee754_atan2f+0x128>)
 8010cd2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010cd6:	edd3 7a00 	vldr	s15, [r3]
 8010cda:	e7cc      	b.n	8010c76 <__ieee754_atan2f+0x26>
 8010cdc:	2c02      	cmp	r4, #2
 8010cde:	d841      	bhi.n	8010d64 <__ieee754_atan2f+0x114>
 8010ce0:	4b26      	ldr	r3, [pc, #152]	@ (8010d7c <__ieee754_atan2f+0x12c>)
 8010ce2:	e7f6      	b.n	8010cd2 <__ieee754_atan2f+0x82>
 8010ce4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010ce8:	d0df      	beq.n	8010caa <__ieee754_atan2f+0x5a>
 8010cea:	1a5b      	subs	r3, r3, r1
 8010cec:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010cf0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010cf4:	da1a      	bge.n	8010d2c <__ieee754_atan2f+0xdc>
 8010cf6:	2a00      	cmp	r2, #0
 8010cf8:	da01      	bge.n	8010cfe <__ieee754_atan2f+0xae>
 8010cfa:	313c      	adds	r1, #60	@ 0x3c
 8010cfc:	db19      	blt.n	8010d32 <__ieee754_atan2f+0xe2>
 8010cfe:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010d02:	f000 fc3f 	bl	8011584 <fabsf>
 8010d06:	f000 fb69 	bl	80113dc <atanf>
 8010d0a:	eef0 7a40 	vmov.f32	s15, s0
 8010d0e:	2c01      	cmp	r4, #1
 8010d10:	d012      	beq.n	8010d38 <__ieee754_atan2f+0xe8>
 8010d12:	2c02      	cmp	r4, #2
 8010d14:	d017      	beq.n	8010d46 <__ieee754_atan2f+0xf6>
 8010d16:	2c00      	cmp	r4, #0
 8010d18:	d0ad      	beq.n	8010c76 <__ieee754_atan2f+0x26>
 8010d1a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010d80 <__ieee754_atan2f+0x130>
 8010d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d22:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010d84 <__ieee754_atan2f+0x134>
 8010d26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d2a:	e7a4      	b.n	8010c76 <__ieee754_atan2f+0x26>
 8010d2c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8010d74 <__ieee754_atan2f+0x124>
 8010d30:	e7ed      	b.n	8010d0e <__ieee754_atan2f+0xbe>
 8010d32:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010d88 <__ieee754_atan2f+0x138>
 8010d36:	e7ea      	b.n	8010d0e <__ieee754_atan2f+0xbe>
 8010d38:	ee17 3a90 	vmov	r3, s15
 8010d3c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010d40:	ee07 3a90 	vmov	s15, r3
 8010d44:	e797      	b.n	8010c76 <__ieee754_atan2f+0x26>
 8010d46:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010d80 <__ieee754_atan2f+0x130>
 8010d4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d4e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010d84 <__ieee754_atan2f+0x134>
 8010d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d56:	e78e      	b.n	8010c76 <__ieee754_atan2f+0x26>
 8010d58:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010d84 <__ieee754_atan2f+0x134>
 8010d5c:	e78b      	b.n	8010c76 <__ieee754_atan2f+0x26>
 8010d5e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010d8c <__ieee754_atan2f+0x13c>
 8010d62:	e788      	b.n	8010c76 <__ieee754_atan2f+0x26>
 8010d64:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010d88 <__ieee754_atan2f+0x138>
 8010d68:	e785      	b.n	8010c76 <__ieee754_atan2f+0x26>
 8010d6a:	bf00      	nop
 8010d6c:	c0490fdb 	.word	0xc0490fdb
 8010d70:	bfc90fdb 	.word	0xbfc90fdb
 8010d74:	3fc90fdb 	.word	0x3fc90fdb
 8010d78:	08011ec4 	.word	0x08011ec4
 8010d7c:	08011eb8 	.word	0x08011eb8
 8010d80:	33bbbd2e 	.word	0x33bbbd2e
 8010d84:	40490fdb 	.word	0x40490fdb
 8010d88:	00000000 	.word	0x00000000
 8010d8c:	3f490fdb 	.word	0x3f490fdb

08010d90 <__ieee754_log10f>:
 8010d90:	b508      	push	{r3, lr}
 8010d92:	ee10 3a10 	vmov	r3, s0
 8010d96:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010d9a:	ed2d 8b02 	vpush	{d8}
 8010d9e:	d108      	bne.n	8010db2 <__ieee754_log10f+0x22>
 8010da0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8010e28 <__ieee754_log10f+0x98>
 8010da4:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8010e2c <__ieee754_log10f+0x9c>
 8010da8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010dac:	ecbd 8b02 	vpop	{d8}
 8010db0:	bd08      	pop	{r3, pc}
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	461a      	mov	r2, r3
 8010db6:	da02      	bge.n	8010dbe <__ieee754_log10f+0x2e>
 8010db8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8010dbc:	e7f2      	b.n	8010da4 <__ieee754_log10f+0x14>
 8010dbe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010dc2:	db02      	blt.n	8010dca <__ieee754_log10f+0x3a>
 8010dc4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010dc8:	e7f0      	b.n	8010dac <__ieee754_log10f+0x1c>
 8010dca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010dce:	bfbf      	itttt	lt
 8010dd0:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8010e30 <__ieee754_log10f+0xa0>
 8010dd4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8010dd8:	f06f 0118 	mvnlt.w	r1, #24
 8010ddc:	ee17 2a90 	vmovlt	r2, s15
 8010de0:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8010de4:	bfa8      	it	ge
 8010de6:	2100      	movge	r1, #0
 8010de8:	3b7f      	subs	r3, #127	@ 0x7f
 8010dea:	440b      	add	r3, r1
 8010dec:	0fd9      	lsrs	r1, r3, #31
 8010dee:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8010df2:	ee07 3a90 	vmov	s15, r3
 8010df6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8010dfa:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8010dfe:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8010e02:	ee00 3a10 	vmov	s0, r3
 8010e06:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8010e0a:	f000 fc4f 	bl	80116ac <__ieee754_logf>
 8010e0e:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010e34 <__ieee754_log10f+0xa4>
 8010e12:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010e16:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010e38 <__ieee754_log10f+0xa8>
 8010e1a:	eea8 0a27 	vfma.f32	s0, s16, s15
 8010e1e:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8010e3c <__ieee754_log10f+0xac>
 8010e22:	eea8 0a27 	vfma.f32	s0, s16, s15
 8010e26:	e7c1      	b.n	8010dac <__ieee754_log10f+0x1c>
 8010e28:	cc000000 	.word	0xcc000000
 8010e2c:	00000000 	.word	0x00000000
 8010e30:	4c000000 	.word	0x4c000000
 8010e34:	3ede5bd9 	.word	0x3ede5bd9
 8010e38:	355427db 	.word	0x355427db
 8010e3c:	3e9a2080 	.word	0x3e9a2080

08010e40 <__ieee754_powf>:
 8010e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e44:	ee10 4a90 	vmov	r4, s1
 8010e48:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8010e4c:	ed2d 8b02 	vpush	{d8}
 8010e50:	ee10 6a10 	vmov	r6, s0
 8010e54:	eeb0 8a40 	vmov.f32	s16, s0
 8010e58:	eef0 8a60 	vmov.f32	s17, s1
 8010e5c:	d10c      	bne.n	8010e78 <__ieee754_powf+0x38>
 8010e5e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8010e62:	0076      	lsls	r6, r6, #1
 8010e64:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8010e68:	f240 8274 	bls.w	8011354 <__ieee754_powf+0x514>
 8010e6c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010e70:	ecbd 8b02 	vpop	{d8}
 8010e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e78:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8010e7c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8010e80:	d802      	bhi.n	8010e88 <__ieee754_powf+0x48>
 8010e82:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010e86:	d908      	bls.n	8010e9a <__ieee754_powf+0x5a>
 8010e88:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8010e8c:	d1ee      	bne.n	8010e6c <__ieee754_powf+0x2c>
 8010e8e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010e92:	0064      	lsls	r4, r4, #1
 8010e94:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8010e98:	e7e6      	b.n	8010e68 <__ieee754_powf+0x28>
 8010e9a:	2e00      	cmp	r6, #0
 8010e9c:	da1f      	bge.n	8010ede <__ieee754_powf+0x9e>
 8010e9e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8010ea2:	f080 8260 	bcs.w	8011366 <__ieee754_powf+0x526>
 8010ea6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010eaa:	d32f      	bcc.n	8010f0c <__ieee754_powf+0xcc>
 8010eac:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8010eb0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8010eb4:	fa49 f503 	asr.w	r5, r9, r3
 8010eb8:	fa05 f303 	lsl.w	r3, r5, r3
 8010ebc:	454b      	cmp	r3, r9
 8010ebe:	d123      	bne.n	8010f08 <__ieee754_powf+0xc8>
 8010ec0:	f005 0501 	and.w	r5, r5, #1
 8010ec4:	f1c5 0502 	rsb	r5, r5, #2
 8010ec8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010ecc:	d11f      	bne.n	8010f0e <__ieee754_powf+0xce>
 8010ece:	2c00      	cmp	r4, #0
 8010ed0:	f280 8246 	bge.w	8011360 <__ieee754_powf+0x520>
 8010ed4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010ed8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010edc:	e7c8      	b.n	8010e70 <__ieee754_powf+0x30>
 8010ede:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010ee2:	d111      	bne.n	8010f08 <__ieee754_powf+0xc8>
 8010ee4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8010ee8:	f000 8234 	beq.w	8011354 <__ieee754_powf+0x514>
 8010eec:	d906      	bls.n	8010efc <__ieee754_powf+0xbc>
 8010eee:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8011204 <__ieee754_powf+0x3c4>
 8010ef2:	2c00      	cmp	r4, #0
 8010ef4:	bfa8      	it	ge
 8010ef6:	eeb0 0a68 	vmovge.f32	s0, s17
 8010efa:	e7b9      	b.n	8010e70 <__ieee754_powf+0x30>
 8010efc:	2c00      	cmp	r4, #0
 8010efe:	f280 822c 	bge.w	801135a <__ieee754_powf+0x51a>
 8010f02:	eeb1 0a68 	vneg.f32	s0, s17
 8010f06:	e7b3      	b.n	8010e70 <__ieee754_powf+0x30>
 8010f08:	2500      	movs	r5, #0
 8010f0a:	e7dd      	b.n	8010ec8 <__ieee754_powf+0x88>
 8010f0c:	2500      	movs	r5, #0
 8010f0e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010f12:	d102      	bne.n	8010f1a <__ieee754_powf+0xda>
 8010f14:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010f18:	e7aa      	b.n	8010e70 <__ieee754_powf+0x30>
 8010f1a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010f1e:	f040 8227 	bne.w	8011370 <__ieee754_powf+0x530>
 8010f22:	2e00      	cmp	r6, #0
 8010f24:	f2c0 8224 	blt.w	8011370 <__ieee754_powf+0x530>
 8010f28:	eeb0 0a48 	vmov.f32	s0, s16
 8010f2c:	ecbd 8b02 	vpop	{d8}
 8010f30:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f34:	f7ff be88 	b.w	8010c48 <__ieee754_sqrtf>
 8010f38:	2d01      	cmp	r5, #1
 8010f3a:	d199      	bne.n	8010e70 <__ieee754_powf+0x30>
 8010f3c:	eeb1 0a40 	vneg.f32	s0, s0
 8010f40:	e796      	b.n	8010e70 <__ieee754_powf+0x30>
 8010f42:	0ff0      	lsrs	r0, r6, #31
 8010f44:	3801      	subs	r0, #1
 8010f46:	ea55 0300 	orrs.w	r3, r5, r0
 8010f4a:	d104      	bne.n	8010f56 <__ieee754_powf+0x116>
 8010f4c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010f50:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010f54:	e78c      	b.n	8010e70 <__ieee754_powf+0x30>
 8010f56:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8010f5a:	d96d      	bls.n	8011038 <__ieee754_powf+0x1f8>
 8010f5c:	4baa      	ldr	r3, [pc, #680]	@ (8011208 <__ieee754_powf+0x3c8>)
 8010f5e:	4598      	cmp	r8, r3
 8010f60:	d808      	bhi.n	8010f74 <__ieee754_powf+0x134>
 8010f62:	2c00      	cmp	r4, #0
 8010f64:	da0b      	bge.n	8010f7e <__ieee754_powf+0x13e>
 8010f66:	2000      	movs	r0, #0
 8010f68:	ecbd 8b02 	vpop	{d8}
 8010f6c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f70:	f000 bb96 	b.w	80116a0 <__math_oflowf>
 8010f74:	4ba5      	ldr	r3, [pc, #660]	@ (801120c <__ieee754_powf+0x3cc>)
 8010f76:	4598      	cmp	r8, r3
 8010f78:	d908      	bls.n	8010f8c <__ieee754_powf+0x14c>
 8010f7a:	2c00      	cmp	r4, #0
 8010f7c:	dcf3      	bgt.n	8010f66 <__ieee754_powf+0x126>
 8010f7e:	2000      	movs	r0, #0
 8010f80:	ecbd 8b02 	vpop	{d8}
 8010f84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f88:	f000 bb84 	b.w	8011694 <__math_uflowf>
 8010f8c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010f90:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010f94:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8011210 <__ieee754_powf+0x3d0>
 8010f98:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010f9c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010fa0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010fa4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010fa8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010fac:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8011214 <__ieee754_powf+0x3d4>
 8010fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010fb4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8011218 <__ieee754_powf+0x3d8>
 8010fb8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010fbc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801121c <__ieee754_powf+0x3dc>
 8010fc0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010fc4:	eeb0 7a67 	vmov.f32	s14, s15
 8010fc8:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010fcc:	ee17 3a10 	vmov	r3, s14
 8010fd0:	f36f 030b 	bfc	r3, #0, #12
 8010fd4:	ee07 3a10 	vmov	s14, r3
 8010fd8:	eeb0 6a47 	vmov.f32	s12, s14
 8010fdc:	eea0 6a66 	vfms.f32	s12, s0, s13
 8010fe0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010fe4:	3d01      	subs	r5, #1
 8010fe6:	4305      	orrs	r5, r0
 8010fe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010fec:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010ff0:	f36f 040b 	bfc	r4, #0, #12
 8010ff4:	bf18      	it	ne
 8010ff6:	eeb0 8a66 	vmovne.f32	s16, s13
 8010ffa:	ee06 4a90 	vmov	s13, r4
 8010ffe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011002:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8011006:	ee67 7a26 	vmul.f32	s15, s14, s13
 801100a:	eee6 0a07 	vfma.f32	s1, s12, s14
 801100e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011012:	ee17 1a10 	vmov	r1, s14
 8011016:	2900      	cmp	r1, #0
 8011018:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801101c:	f340 80dd 	ble.w	80111da <__ieee754_powf+0x39a>
 8011020:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8011024:	f240 80ca 	bls.w	80111bc <__ieee754_powf+0x37c>
 8011028:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011030:	bf4c      	ite	mi
 8011032:	2001      	movmi	r0, #1
 8011034:	2000      	movpl	r0, #0
 8011036:	e797      	b.n	8010f68 <__ieee754_powf+0x128>
 8011038:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801103c:	bf01      	itttt	eq
 801103e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8011220 <__ieee754_powf+0x3e0>
 8011042:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011046:	f06f 0317 	mvneq.w	r3, #23
 801104a:	ee17 7a90 	vmoveq	r7, s15
 801104e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8011052:	bf18      	it	ne
 8011054:	2300      	movne	r3, #0
 8011056:	3a7f      	subs	r2, #127	@ 0x7f
 8011058:	441a      	add	r2, r3
 801105a:	4b72      	ldr	r3, [pc, #456]	@ (8011224 <__ieee754_powf+0x3e4>)
 801105c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8011060:	429f      	cmp	r7, r3
 8011062:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8011066:	dd06      	ble.n	8011076 <__ieee754_powf+0x236>
 8011068:	4b6f      	ldr	r3, [pc, #444]	@ (8011228 <__ieee754_powf+0x3e8>)
 801106a:	429f      	cmp	r7, r3
 801106c:	f340 80a4 	ble.w	80111b8 <__ieee754_powf+0x378>
 8011070:	3201      	adds	r2, #1
 8011072:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8011076:	2600      	movs	r6, #0
 8011078:	4b6c      	ldr	r3, [pc, #432]	@ (801122c <__ieee754_powf+0x3ec>)
 801107a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801107e:	ee07 1a10 	vmov	s14, r1
 8011082:	edd3 5a00 	vldr	s11, [r3]
 8011086:	4b6a      	ldr	r3, [pc, #424]	@ (8011230 <__ieee754_powf+0x3f0>)
 8011088:	ee75 7a87 	vadd.f32	s15, s11, s14
 801108c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011090:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8011094:	1049      	asrs	r1, r1, #1
 8011096:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801109a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801109e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80110a2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80110a6:	ee07 1a90 	vmov	s15, r1
 80110aa:	ee26 5a24 	vmul.f32	s10, s12, s9
 80110ae:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80110b2:	ee15 7a10 	vmov	r7, s10
 80110b6:	401f      	ands	r7, r3
 80110b8:	ee06 7a90 	vmov	s13, r7
 80110bc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80110c0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80110c4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80110c8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80110cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8011234 <__ieee754_powf+0x3f4>
 80110d0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011238 <__ieee754_powf+0x3f8>
 80110d4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80110d8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801123c <__ieee754_powf+0x3fc>
 80110dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80110e0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8011210 <__ieee754_powf+0x3d0>
 80110e4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80110e8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8011240 <__ieee754_powf+0x400>
 80110ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80110f0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8011244 <__ieee754_powf+0x404>
 80110f4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80110f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80110fc:	ee35 7a26 	vadd.f32	s14, s10, s13
 8011100:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8011104:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011108:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801110c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8011110:	eef0 5a67 	vmov.f32	s11, s15
 8011114:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8011118:	ee75 5a87 	vadd.f32	s11, s11, s14
 801111c:	ee15 1a90 	vmov	r1, s11
 8011120:	4019      	ands	r1, r3
 8011122:	ee05 1a90 	vmov	s11, r1
 8011126:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801112a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801112e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011132:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011136:	eee6 7a25 	vfma.f32	s15, s12, s11
 801113a:	eeb0 6a67 	vmov.f32	s12, s15
 801113e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011142:	ee16 1a10 	vmov	r1, s12
 8011146:	4019      	ands	r1, r3
 8011148:	ee06 1a10 	vmov	s12, r1
 801114c:	eeb0 7a46 	vmov.f32	s14, s12
 8011150:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8011154:	493c      	ldr	r1, [pc, #240]	@ (8011248 <__ieee754_powf+0x408>)
 8011156:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801115a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801115e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801124c <__ieee754_powf+0x40c>
 8011162:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8011250 <__ieee754_powf+0x410>
 8011166:	ee67 7a87 	vmul.f32	s15, s15, s14
 801116a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8011254 <__ieee754_powf+0x414>
 801116e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011172:	ed91 7a00 	vldr	s14, [r1]
 8011176:	ee77 7a87 	vadd.f32	s15, s15, s14
 801117a:	ee07 2a10 	vmov	s14, r2
 801117e:	4a36      	ldr	r2, [pc, #216]	@ (8011258 <__ieee754_powf+0x418>)
 8011180:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8011184:	eeb0 7a67 	vmov.f32	s14, s15
 8011188:	eea6 7a25 	vfma.f32	s14, s12, s11
 801118c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8011190:	ed92 5a00 	vldr	s10, [r2]
 8011194:	ee37 7a05 	vadd.f32	s14, s14, s10
 8011198:	ee37 7a26 	vadd.f32	s14, s14, s13
 801119c:	ee17 2a10 	vmov	r2, s14
 80111a0:	401a      	ands	r2, r3
 80111a2:	ee07 2a10 	vmov	s14, r2
 80111a6:	ee77 6a66 	vsub.f32	s13, s14, s13
 80111aa:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80111ae:	eee6 6a65 	vfms.f32	s13, s12, s11
 80111b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80111b6:	e715      	b.n	8010fe4 <__ieee754_powf+0x1a4>
 80111b8:	2601      	movs	r6, #1
 80111ba:	e75d      	b.n	8011078 <__ieee754_powf+0x238>
 80111bc:	d152      	bne.n	8011264 <__ieee754_powf+0x424>
 80111be:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801125c <__ieee754_powf+0x41c>
 80111c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80111c6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80111ca:	eef4 6ac7 	vcmpe.f32	s13, s14
 80111ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d2:	f73f af29 	bgt.w	8011028 <__ieee754_powf+0x1e8>
 80111d6:	2386      	movs	r3, #134	@ 0x86
 80111d8:	e048      	b.n	801126c <__ieee754_powf+0x42c>
 80111da:	4a21      	ldr	r2, [pc, #132]	@ (8011260 <__ieee754_powf+0x420>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d907      	bls.n	80111f0 <__ieee754_powf+0x3b0>
 80111e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80111e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e8:	bf4c      	ite	mi
 80111ea:	2001      	movmi	r0, #1
 80111ec:	2000      	movpl	r0, #0
 80111ee:	e6c7      	b.n	8010f80 <__ieee754_powf+0x140>
 80111f0:	d138      	bne.n	8011264 <__ieee754_powf+0x424>
 80111f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80111f6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80111fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fe:	dbea      	blt.n	80111d6 <__ieee754_powf+0x396>
 8011200:	e7ee      	b.n	80111e0 <__ieee754_powf+0x3a0>
 8011202:	bf00      	nop
 8011204:	00000000 	.word	0x00000000
 8011208:	3f7ffff3 	.word	0x3f7ffff3
 801120c:	3f800007 	.word	0x3f800007
 8011210:	3eaaaaab 	.word	0x3eaaaaab
 8011214:	3fb8aa00 	.word	0x3fb8aa00
 8011218:	3fb8aa3b 	.word	0x3fb8aa3b
 801121c:	36eca570 	.word	0x36eca570
 8011220:	4b800000 	.word	0x4b800000
 8011224:	001cc471 	.word	0x001cc471
 8011228:	005db3d6 	.word	0x005db3d6
 801122c:	08011ee0 	.word	0x08011ee0
 8011230:	fffff000 	.word	0xfffff000
 8011234:	3e6c3255 	.word	0x3e6c3255
 8011238:	3e53f142 	.word	0x3e53f142
 801123c:	3e8ba305 	.word	0x3e8ba305
 8011240:	3edb6db7 	.word	0x3edb6db7
 8011244:	3f19999a 	.word	0x3f19999a
 8011248:	08011ed0 	.word	0x08011ed0
 801124c:	3f76384f 	.word	0x3f76384f
 8011250:	3f763800 	.word	0x3f763800
 8011254:	369dc3a0 	.word	0x369dc3a0
 8011258:	08011ed8 	.word	0x08011ed8
 801125c:	3338aa3c 	.word	0x3338aa3c
 8011260:	43160000 	.word	0x43160000
 8011264:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8011268:	d96f      	bls.n	801134a <__ieee754_powf+0x50a>
 801126a:	15db      	asrs	r3, r3, #23
 801126c:	3b7e      	subs	r3, #126	@ 0x7e
 801126e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8011272:	4118      	asrs	r0, r3
 8011274:	4408      	add	r0, r1
 8011276:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801127a:	4a4e      	ldr	r2, [pc, #312]	@ (80113b4 <__ieee754_powf+0x574>)
 801127c:	3b7f      	subs	r3, #127	@ 0x7f
 801127e:	411a      	asrs	r2, r3
 8011280:	4002      	ands	r2, r0
 8011282:	ee07 2a10 	vmov	s14, r2
 8011286:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801128a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801128e:	f1c3 0317 	rsb	r3, r3, #23
 8011292:	4118      	asrs	r0, r3
 8011294:	2900      	cmp	r1, #0
 8011296:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801129a:	bfb8      	it	lt
 801129c:	4240      	neglt	r0, r0
 801129e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80112a2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80113b8 <__ieee754_powf+0x578>
 80112a6:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80113bc <__ieee754_powf+0x57c>
 80112aa:	ee16 3a90 	vmov	r3, s13
 80112ae:	f36f 030b 	bfc	r3, #0, #12
 80112b2:	ee06 3a90 	vmov	s13, r3
 80112b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80112ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80112be:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80112c2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80113c0 <__ieee754_powf+0x580>
 80112c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112ca:	eee0 7a87 	vfma.f32	s15, s1, s14
 80112ce:	eeb0 7a67 	vmov.f32	s14, s15
 80112d2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80112d6:	eef0 5a47 	vmov.f32	s11, s14
 80112da:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80112de:	ee67 6a07 	vmul.f32	s13, s14, s14
 80112e2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80112e6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80113c4 <__ieee754_powf+0x584>
 80112ea:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80113c8 <__ieee754_powf+0x588>
 80112ee:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80112f2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80113cc <__ieee754_powf+0x58c>
 80112f6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80112fa:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80113d0 <__ieee754_powf+0x590>
 80112fe:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8011302:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80113d4 <__ieee754_powf+0x594>
 8011306:	eee6 5a26 	vfma.f32	s11, s12, s13
 801130a:	eeb0 6a47 	vmov.f32	s12, s14
 801130e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8011312:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011316:	ee67 5a06 	vmul.f32	s11, s14, s12
 801131a:	ee36 6a66 	vsub.f32	s12, s12, s13
 801131e:	eee7 7a27 	vfma.f32	s15, s14, s15
 8011322:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8011326:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801132a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801132e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011332:	ee10 3a10 	vmov	r3, s0
 8011336:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801133a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801133e:	da06      	bge.n	801134e <__ieee754_powf+0x50e>
 8011340:	f000 f928 	bl	8011594 <scalbnf>
 8011344:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011348:	e592      	b.n	8010e70 <__ieee754_powf+0x30>
 801134a:	2000      	movs	r0, #0
 801134c:	e7a7      	b.n	801129e <__ieee754_powf+0x45e>
 801134e:	ee00 3a10 	vmov	s0, r3
 8011352:	e7f7      	b.n	8011344 <__ieee754_powf+0x504>
 8011354:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011358:	e58a      	b.n	8010e70 <__ieee754_powf+0x30>
 801135a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80113d8 <__ieee754_powf+0x598>
 801135e:	e587      	b.n	8010e70 <__ieee754_powf+0x30>
 8011360:	eeb0 0a48 	vmov.f32	s0, s16
 8011364:	e584      	b.n	8010e70 <__ieee754_powf+0x30>
 8011366:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801136a:	f43f adbb 	beq.w	8010ee4 <__ieee754_powf+0xa4>
 801136e:	2502      	movs	r5, #2
 8011370:	eeb0 0a48 	vmov.f32	s0, s16
 8011374:	f000 f906 	bl	8011584 <fabsf>
 8011378:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801137c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8011380:	4647      	mov	r7, r8
 8011382:	d003      	beq.n	801138c <__ieee754_powf+0x54c>
 8011384:	f1b8 0f00 	cmp.w	r8, #0
 8011388:	f47f addb 	bne.w	8010f42 <__ieee754_powf+0x102>
 801138c:	2c00      	cmp	r4, #0
 801138e:	bfbc      	itt	lt
 8011390:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8011394:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011398:	2e00      	cmp	r6, #0
 801139a:	f6bf ad69 	bge.w	8010e70 <__ieee754_powf+0x30>
 801139e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80113a2:	ea58 0805 	orrs.w	r8, r8, r5
 80113a6:	f47f adc7 	bne.w	8010f38 <__ieee754_powf+0xf8>
 80113aa:	ee70 7a40 	vsub.f32	s15, s0, s0
 80113ae:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80113b2:	e55d      	b.n	8010e70 <__ieee754_powf+0x30>
 80113b4:	ff800000 	.word	0xff800000
 80113b8:	3f317218 	.word	0x3f317218
 80113bc:	3f317200 	.word	0x3f317200
 80113c0:	35bfbe8c 	.word	0x35bfbe8c
 80113c4:	b5ddea0e 	.word	0xb5ddea0e
 80113c8:	3331bb4c 	.word	0x3331bb4c
 80113cc:	388ab355 	.word	0x388ab355
 80113d0:	bb360b61 	.word	0xbb360b61
 80113d4:	3e2aaaab 	.word	0x3e2aaaab
 80113d8:	00000000 	.word	0x00000000

080113dc <atanf>:
 80113dc:	b538      	push	{r3, r4, r5, lr}
 80113de:	ee10 5a10 	vmov	r5, s0
 80113e2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80113e6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80113ea:	eef0 7a40 	vmov.f32	s15, s0
 80113ee:	d310      	bcc.n	8011412 <atanf+0x36>
 80113f0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80113f4:	d904      	bls.n	8011400 <atanf+0x24>
 80113f6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80113fa:	eeb0 0a67 	vmov.f32	s0, s15
 80113fe:	bd38      	pop	{r3, r4, r5, pc}
 8011400:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011538 <atanf+0x15c>
 8011404:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801153c <atanf+0x160>
 8011408:	2d00      	cmp	r5, #0
 801140a:	bfc8      	it	gt
 801140c:	eef0 7a47 	vmovgt.f32	s15, s14
 8011410:	e7f3      	b.n	80113fa <atanf+0x1e>
 8011412:	4b4b      	ldr	r3, [pc, #300]	@ (8011540 <atanf+0x164>)
 8011414:	429c      	cmp	r4, r3
 8011416:	d810      	bhi.n	801143a <atanf+0x5e>
 8011418:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801141c:	d20a      	bcs.n	8011434 <atanf+0x58>
 801141e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011544 <atanf+0x168>
 8011422:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801142a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011432:	dce2      	bgt.n	80113fa <atanf+0x1e>
 8011434:	f04f 33ff 	mov.w	r3, #4294967295
 8011438:	e013      	b.n	8011462 <atanf+0x86>
 801143a:	f000 f8a3 	bl	8011584 <fabsf>
 801143e:	4b42      	ldr	r3, [pc, #264]	@ (8011548 <atanf+0x16c>)
 8011440:	429c      	cmp	r4, r3
 8011442:	d84f      	bhi.n	80114e4 <atanf+0x108>
 8011444:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011448:	429c      	cmp	r4, r3
 801144a:	d841      	bhi.n	80114d0 <atanf+0xf4>
 801144c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011450:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011454:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011458:	2300      	movs	r3, #0
 801145a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801145e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011462:	1c5a      	adds	r2, r3, #1
 8011464:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011468:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801154c <atanf+0x170>
 801146c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011550 <atanf+0x174>
 8011470:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011554 <atanf+0x178>
 8011474:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011478:	eee6 5a87 	vfma.f32	s11, s13, s14
 801147c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011558 <atanf+0x17c>
 8011480:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011484:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801155c <atanf+0x180>
 8011488:	eee7 5a26 	vfma.f32	s11, s14, s13
 801148c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011560 <atanf+0x184>
 8011490:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011494:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011564 <atanf+0x188>
 8011498:	eee7 5a26 	vfma.f32	s11, s14, s13
 801149c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011568 <atanf+0x18c>
 80114a0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80114a4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801156c <atanf+0x190>
 80114a8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80114ac:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8011570 <atanf+0x194>
 80114b0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80114b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011574 <atanf+0x198>
 80114b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80114bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80114c0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80114c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80114c8:	d121      	bne.n	801150e <atanf+0x132>
 80114ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80114ce:	e794      	b.n	80113fa <atanf+0x1e>
 80114d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80114d4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80114d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80114dc:	2301      	movs	r3, #1
 80114de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80114e2:	e7be      	b.n	8011462 <atanf+0x86>
 80114e4:	4b24      	ldr	r3, [pc, #144]	@ (8011578 <atanf+0x19c>)
 80114e6:	429c      	cmp	r4, r3
 80114e8:	d80b      	bhi.n	8011502 <atanf+0x126>
 80114ea:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80114ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80114f2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80114f6:	2302      	movs	r3, #2
 80114f8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80114fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011500:	e7af      	b.n	8011462 <atanf+0x86>
 8011502:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011506:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801150a:	2303      	movs	r3, #3
 801150c:	e7a9      	b.n	8011462 <atanf+0x86>
 801150e:	4a1b      	ldr	r2, [pc, #108]	@ (801157c <atanf+0x1a0>)
 8011510:	491b      	ldr	r1, [pc, #108]	@ (8011580 <atanf+0x1a4>)
 8011512:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011516:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801151a:	edd3 6a00 	vldr	s13, [r3]
 801151e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011522:	2d00      	cmp	r5, #0
 8011524:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011528:	edd2 7a00 	vldr	s15, [r2]
 801152c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011530:	bfb8      	it	lt
 8011532:	eef1 7a67 	vneglt.f32	s15, s15
 8011536:	e760      	b.n	80113fa <atanf+0x1e>
 8011538:	bfc90fdb 	.word	0xbfc90fdb
 801153c:	3fc90fdb 	.word	0x3fc90fdb
 8011540:	3edfffff 	.word	0x3edfffff
 8011544:	7149f2ca 	.word	0x7149f2ca
 8011548:	3f97ffff 	.word	0x3f97ffff
 801154c:	3c8569d7 	.word	0x3c8569d7
 8011550:	3d4bda59 	.word	0x3d4bda59
 8011554:	bd6ef16b 	.word	0xbd6ef16b
 8011558:	3d886b35 	.word	0x3d886b35
 801155c:	3dba2e6e 	.word	0x3dba2e6e
 8011560:	3e124925 	.word	0x3e124925
 8011564:	3eaaaaab 	.word	0x3eaaaaab
 8011568:	bd15a221 	.word	0xbd15a221
 801156c:	bd9d8795 	.word	0xbd9d8795
 8011570:	bde38e38 	.word	0xbde38e38
 8011574:	be4ccccd 	.word	0xbe4ccccd
 8011578:	401bffff 	.word	0x401bffff
 801157c:	08011ef8 	.word	0x08011ef8
 8011580:	08011ee8 	.word	0x08011ee8

08011584 <fabsf>:
 8011584:	ee10 3a10 	vmov	r3, s0
 8011588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801158c:	ee00 3a10 	vmov	s0, r3
 8011590:	4770      	bx	lr
	...

08011594 <scalbnf>:
 8011594:	ee10 3a10 	vmov	r3, s0
 8011598:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801159c:	d02b      	beq.n	80115f6 <scalbnf+0x62>
 801159e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80115a2:	d302      	bcc.n	80115aa <scalbnf+0x16>
 80115a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80115a8:	4770      	bx	lr
 80115aa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80115ae:	d123      	bne.n	80115f8 <scalbnf+0x64>
 80115b0:	4b24      	ldr	r3, [pc, #144]	@ (8011644 <scalbnf+0xb0>)
 80115b2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011648 <scalbnf+0xb4>
 80115b6:	4298      	cmp	r0, r3
 80115b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80115bc:	db17      	blt.n	80115ee <scalbnf+0x5a>
 80115be:	ee10 3a10 	vmov	r3, s0
 80115c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80115c6:	3a19      	subs	r2, #25
 80115c8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80115cc:	4288      	cmp	r0, r1
 80115ce:	dd15      	ble.n	80115fc <scalbnf+0x68>
 80115d0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801164c <scalbnf+0xb8>
 80115d4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011650 <scalbnf+0xbc>
 80115d8:	ee10 3a10 	vmov	r3, s0
 80115dc:	eeb0 7a67 	vmov.f32	s14, s15
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	bfb8      	it	lt
 80115e4:	eef0 7a66 	vmovlt.f32	s15, s13
 80115e8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80115ec:	4770      	bx	lr
 80115ee:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011654 <scalbnf+0xc0>
 80115f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80115f6:	4770      	bx	lr
 80115f8:	0dd2      	lsrs	r2, r2, #23
 80115fa:	e7e5      	b.n	80115c8 <scalbnf+0x34>
 80115fc:	4410      	add	r0, r2
 80115fe:	28fe      	cmp	r0, #254	@ 0xfe
 8011600:	dce6      	bgt.n	80115d0 <scalbnf+0x3c>
 8011602:	2800      	cmp	r0, #0
 8011604:	dd06      	ble.n	8011614 <scalbnf+0x80>
 8011606:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801160a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801160e:	ee00 3a10 	vmov	s0, r3
 8011612:	4770      	bx	lr
 8011614:	f110 0f16 	cmn.w	r0, #22
 8011618:	da09      	bge.n	801162e <scalbnf+0x9a>
 801161a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011654 <scalbnf+0xc0>
 801161e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011658 <scalbnf+0xc4>
 8011622:	ee10 3a10 	vmov	r3, s0
 8011626:	eeb0 7a67 	vmov.f32	s14, s15
 801162a:	2b00      	cmp	r3, #0
 801162c:	e7d9      	b.n	80115e2 <scalbnf+0x4e>
 801162e:	3019      	adds	r0, #25
 8011630:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011634:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011638:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801165c <scalbnf+0xc8>
 801163c:	ee07 3a90 	vmov	s15, r3
 8011640:	e7d7      	b.n	80115f2 <scalbnf+0x5e>
 8011642:	bf00      	nop
 8011644:	ffff3cb0 	.word	0xffff3cb0
 8011648:	4c000000 	.word	0x4c000000
 801164c:	7149f2ca 	.word	0x7149f2ca
 8011650:	f149f2ca 	.word	0xf149f2ca
 8011654:	0da24260 	.word	0x0da24260
 8011658:	8da24260 	.word	0x8da24260
 801165c:	33000000 	.word	0x33000000

08011660 <with_errnof>:
 8011660:	b510      	push	{r4, lr}
 8011662:	ed2d 8b02 	vpush	{d8}
 8011666:	eeb0 8a40 	vmov.f32	s16, s0
 801166a:	4604      	mov	r4, r0
 801166c:	f7fa fd62 	bl	800c134 <__errno>
 8011670:	eeb0 0a48 	vmov.f32	s0, s16
 8011674:	ecbd 8b02 	vpop	{d8}
 8011678:	6004      	str	r4, [r0, #0]
 801167a:	bd10      	pop	{r4, pc}

0801167c <xflowf>:
 801167c:	b130      	cbz	r0, 801168c <xflowf+0x10>
 801167e:	eef1 7a40 	vneg.f32	s15, s0
 8011682:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011686:	2022      	movs	r0, #34	@ 0x22
 8011688:	f7ff bfea 	b.w	8011660 <with_errnof>
 801168c:	eef0 7a40 	vmov.f32	s15, s0
 8011690:	e7f7      	b.n	8011682 <xflowf+0x6>
	...

08011694 <__math_uflowf>:
 8011694:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801169c <__math_uflowf+0x8>
 8011698:	f7ff bff0 	b.w	801167c <xflowf>
 801169c:	10000000 	.word	0x10000000

080116a0 <__math_oflowf>:
 80116a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80116a8 <__math_oflowf+0x8>
 80116a4:	f7ff bfea 	b.w	801167c <xflowf>
 80116a8:	70000000 	.word	0x70000000

080116ac <__ieee754_logf>:
 80116ac:	ee10 3a10 	vmov	r3, s0
 80116b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80116b4:	d106      	bne.n	80116c4 <__ieee754_logf+0x18>
 80116b6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8011850 <__ieee754_logf+0x1a4>
 80116ba:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8011854 <__ieee754_logf+0x1a8>
 80116be:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80116c2:	4770      	bx	lr
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	461a      	mov	r2, r3
 80116c8:	da02      	bge.n	80116d0 <__ieee754_logf+0x24>
 80116ca:	ee30 7a40 	vsub.f32	s14, s0, s0
 80116ce:	e7f4      	b.n	80116ba <__ieee754_logf+0xe>
 80116d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80116d4:	db02      	blt.n	80116dc <__ieee754_logf+0x30>
 80116d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80116da:	4770      	bx	lr
 80116dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80116e0:	bfb8      	it	lt
 80116e2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8011858 <__ieee754_logf+0x1ac>
 80116e6:	485d      	ldr	r0, [pc, #372]	@ (801185c <__ieee754_logf+0x1b0>)
 80116e8:	bfbe      	ittt	lt
 80116ea:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80116ee:	f06f 0118 	mvnlt.w	r1, #24
 80116f2:	ee17 2a90 	vmovlt	r2, s15
 80116f6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80116fa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80116fe:	4410      	add	r0, r2
 8011700:	bfa8      	it	ge
 8011702:	2100      	movge	r1, #0
 8011704:	3b7f      	subs	r3, #127	@ 0x7f
 8011706:	440b      	add	r3, r1
 8011708:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 801170c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8011710:	4311      	orrs	r1, r2
 8011712:	ee00 1a10 	vmov	s0, r1
 8011716:	4952      	ldr	r1, [pc, #328]	@ (8011860 <__ieee754_logf+0x1b4>)
 8011718:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 801171c:	f102 000f 	add.w	r0, r2, #15
 8011720:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011724:	4001      	ands	r1, r0
 8011726:	ee30 0a67 	vsub.f32	s0, s0, s15
 801172a:	bb89      	cbnz	r1, 8011790 <__ieee754_logf+0xe4>
 801172c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011734:	d10f      	bne.n	8011756 <__ieee754_logf+0xaa>
 8011736:	2b00      	cmp	r3, #0
 8011738:	f000 8087 	beq.w	801184a <__ieee754_logf+0x19e>
 801173c:	ee07 3a90 	vmov	s15, r3
 8011740:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8011864 <__ieee754_logf+0x1b8>
 8011744:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8011868 <__ieee754_logf+0x1bc>
 8011748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801174c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011750:	eea7 0a87 	vfma.f32	s0, s15, s14
 8011754:	4770      	bx	lr
 8011756:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801186c <__ieee754_logf+0x1c0>
 801175a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801175e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8011762:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011766:	ee27 7a27 	vmul.f32	s14, s14, s15
 801176a:	b913      	cbnz	r3, 8011772 <__ieee754_logf+0xc6>
 801176c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011770:	4770      	bx	lr
 8011772:	ee07 3a90 	vmov	s15, r3
 8011776:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011864 <__ieee754_logf+0x1b8>
 801177a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801177e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011782:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011786:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011868 <__ieee754_logf+0x1bc>
 801178a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801178e:	4770      	bx	lr
 8011790:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011794:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011798:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011870 <__ieee754_logf+0x1c4>
 801179c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8011874 <__ieee754_logf+0x1c8>
 80117a0:	4935      	ldr	r1, [pc, #212]	@ (8011878 <__ieee754_logf+0x1cc>)
 80117a2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80117a6:	4411      	add	r1, r2
 80117a8:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80117ac:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80117b0:	430a      	orrs	r2, r1
 80117b2:	2a00      	cmp	r2, #0
 80117b4:	ee07 3a90 	vmov	s15, r3
 80117b8:	ee26 5a06 	vmul.f32	s10, s12, s12
 80117bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80117c0:	ee25 7a05 	vmul.f32	s14, s10, s10
 80117c4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801187c <__ieee754_logf+0x1d0>
 80117c8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80117cc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8011880 <__ieee754_logf+0x1d4>
 80117d0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80117d4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8011884 <__ieee754_logf+0x1d8>
 80117d8:	eee7 7a24 	vfma.f32	s15, s14, s9
 80117dc:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8011888 <__ieee754_logf+0x1dc>
 80117e0:	eee7 4a87 	vfma.f32	s9, s15, s14
 80117e4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801188c <__ieee754_logf+0x1e0>
 80117e8:	eee4 7a87 	vfma.f32	s15, s9, s14
 80117ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 80117f0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80117f4:	dd1a      	ble.n	801182c <__ieee754_logf+0x180>
 80117f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80117fa:	ee20 7a07 	vmul.f32	s14, s0, s14
 80117fe:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011802:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011806:	ee67 7a86 	vmul.f32	s15, s15, s12
 801180a:	b913      	cbnz	r3, 8011812 <__ieee754_logf+0x166>
 801180c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011810:	e7ac      	b.n	801176c <__ieee754_logf+0xc0>
 8011812:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8011864 <__ieee754_logf+0x1b8>
 8011816:	eee6 7a86 	vfma.f32	s15, s13, s12
 801181a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801181e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011822:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8011868 <__ieee754_logf+0x1bc>
 8011826:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801182a:	4770      	bx	lr
 801182c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011830:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011834:	b913      	cbnz	r3, 801183c <__ieee754_logf+0x190>
 8011836:	ee30 0a67 	vsub.f32	s0, s0, s15
 801183a:	4770      	bx	lr
 801183c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8011864 <__ieee754_logf+0x1b8>
 8011840:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011844:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011848:	e7eb      	b.n	8011822 <__ieee754_logf+0x176>
 801184a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8011854 <__ieee754_logf+0x1a8>
 801184e:	4770      	bx	lr
 8011850:	cc000000 	.word	0xcc000000
 8011854:	00000000 	.word	0x00000000
 8011858:	4c000000 	.word	0x4c000000
 801185c:	004afb20 	.word	0x004afb20
 8011860:	007ffff0 	.word	0x007ffff0
 8011864:	3717f7d1 	.word	0x3717f7d1
 8011868:	3f317180 	.word	0x3f317180
 801186c:	3eaaaaab 	.word	0x3eaaaaab
 8011870:	3e1cd04f 	.word	0x3e1cd04f
 8011874:	3e178897 	.word	0x3e178897
 8011878:	ffcf5c30 	.word	0xffcf5c30
 801187c:	3e638e29 	.word	0x3e638e29
 8011880:	3ecccccd 	.word	0x3ecccccd
 8011884:	3e3a3325 	.word	0x3e3a3325
 8011888:	3e924925 	.word	0x3e924925
 801188c:	3f2aaaab 	.word	0x3f2aaaab

08011890 <_init>:
 8011890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011892:	bf00      	nop
 8011894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011896:	bc08      	pop	{r3}
 8011898:	469e      	mov	lr, r3
 801189a:	4770      	bx	lr

0801189c <_fini>:
 801189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801189e:	bf00      	nop
 80118a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118a2:	bc08      	pop	{r3}
 80118a4:	469e      	mov	lr, r3
 80118a6:	4770      	bx	lr
